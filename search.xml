<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spark编译报错解决</title>
      <link href="2020/12/18/spark-bian-yi-bao-cuo-chu-li/"/>
      <url>2020/12/18/spark-bian-yi-bao-cuo-chu-li/</url>
      
        <content type="html"><![CDATA[<h5 id="本文版本选用"><a href="#本文版本选用" class="headerlink" title="本文版本选用:"></a>本文版本选用:</h5><p>saprk:2.6.4</p><p>scala:2.12.10</p><p>hive:1.1.0-cdh5.16.2</p><p>hadoop:2.6.0-cdh5.16.2</p><p>尝试过3.1.1,由于和hadoop cdh5.16.2不兼容,放弃了</p><p>首先源码导入IDEA,由于pom少了sql/hive-thriftserver,pom先加上</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>sql/hive-thriftserver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span></code></pre><p>再reimport一下.</p><h5 id="踩坑1"><a href="#踩坑1" class="headerlink" title="踩坑1:"></a>踩坑1:</h5><pre><code>Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: com/google/common/cache/CacheLoader    at org.apache.spark.SparkConf.loadFromSystemProperties(SparkConf.scala:76)    at org.apache.spark.SparkConf.&lt;init&gt;(SparkConf.scala:71)    at org.apache.spark.sql.hive.thriftserver.SparkSQLCLIDriver$.main(SparkSQLCLIDriver.scala:88)    at org.apache.spark.sql.hive.thriftserver.SparkSQLCLIDriver.main(SparkSQLCLIDriver.scala)Caused by: java.lang.ClassNotFoundException: com.google.common.cache.CacheLoader    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)    ... 4 more</code></pre><p>修改hive-thriftserver模块下的pom.xm文件    改完后rebuild一下.<br>    参考<a href="https://blog.csdn.net/qq_43081842/article/details/105777311">https://blog.csdn.net/qq_43081842/article/details/105777311</a></p><h5 id="踩坑2"><a href="#踩坑2" class="headerlink" title="踩坑2:"></a>踩坑2:</h5><p>Exception in thread “main” java.lang.RuntimeException: java.lang.RuntimeException: Error while running command to get file permissions : java.io.IOException: (null) entry in command string: null ls -F E:\tmp\hive<br>    at org.apache.hadoop.util.Shell$ShellCommandExecutor.execute(Shell.java:762)<br>    <a href="https://blog.csdn.net/ZH519080/article/details/107975469">https://blog.csdn.net/ZH519080/article/details/107975469</a></p><p>原因在win环境少winutils.exe,下载后配置HADOOP_HOME,并放到HADOOP_HOME/bin下</p><p>但是,这里继续踩坑了,WIN读不到HADOOP_HOME,只能在IDEA配置环境变量了</p><p><img src="https://i.loli.net/2021/04/09/6l4MbKTg2IActLR.png"></p><h5 id="踩坑3"><a href="#踩坑3" class="headerlink" title="踩坑3:"></a>踩坑3:</h5><pre><code>org.apache.spark.SparkException: A master URL must be set in your configuration    at org.apache.spark.SparkContext.&lt;init&gt;(SparkContext.scala:368)    at org.apache.spark.SparkContext$.getOrCreate(SparkContext.scala:2520)    at org.apache.spark.sql.SparkSession$Builder.$anonfun$getOrCreate$1(SparkSession.scala:930)    at scala.Option.getOrElse(Option.scala:189)    at org.apache.spark.sql.SparkSession$Builder.getOrCreate(SparkSession.scala:921)    at org.apache.spark.sql.hive.thriftserver.SparkSQLEnv$.init(SparkSQLEnv.scala:48)    at org.apache.spark.sql.hive.thriftserver.SparkSQLCLIDriver.&lt;init&gt;(SparkSQLCLIDriver.scala:315)    at org.apache.spark.sql.hive.thriftserver.SparkSQLCLIDriver$.main(SparkSQLCLIDriver.scala:166)    at org.apache.spark.sql.hive.thriftserver.SparkSQLCLIDriver.main(SparkSQLCLIDriver.scala)21/04/09 00:09:18 ERROR Utils: Uncaught exception in thread main</code></pre><p>原因:Spark应用程序在启动时需要指定运行模式</p><p>VM option加上:</p><pre><code>-Djline.WindowsTerminal.directConsole=false -Dspark.master=local</code></pre><p><img src="https://i.loli.net/2021/04/09/DeybfNnRxzkF8q7.png"></p><p>启动Spark Driver程序:</p><p><img src="https://i.loli.net/2021/04/09/rTDYNuw2U7mhBoP.png"></p><p>成功访问服务器hive库.</p>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink</title>
      <link href="2020/04/07/flink13/"/>
      <url>2020/04/07/flink13/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink</title>
      <link href="2020/04/05/flink12/"/>
      <url>2020/04/05/flink12/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink 异步操作MySQL/Http</title>
      <link href="2020/04/02/flink11/"/>
      <url>2020/04/02/flink11/</url>
      
        <content type="html"><![CDATA[<p>Flink异步操作MySQL</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>etl<span class="token punctuation">.</span>async<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSource<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>Configuration<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>async<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>ResultFuture<span class="token punctuation">,</span> RichAsyncFunction<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>AsyncDataStream<span class="token punctuation">,</span> StreamExecutionEnvironment<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Connection<span class="token punctuation">,</span> PreparedStatement<span class="token punctuation">,</span> ResultSet<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Callable<span class="token punctuation">,</span> ExecutorService<span class="token punctuation">,</span> TimeUnit<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>ExecutionContext<span class="token punctuation">,</span> Future<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> UserDomainMappingAsyncApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment      env<span class="token punctuation">.</span>setParallelism<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 2022-07-10 18:10:13,222.55.57.83,google.com,00000002</span>      <span class="token keyword">val</span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span>socketTextStream<span class="token punctuation">(</span><span class="token string">"warehouse001"</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> result  <span class="token operator">=</span> AsyncDataStream<span class="token punctuation">.</span>unorderedWait<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token keyword">new</span> AsyncMySQLRequest<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span>      result<span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>      env<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> AsyncMySQLRequest <span class="token keyword">extends</span> RichAsyncFunction<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">implicit</span> <span class="token keyword">lazy</span> <span class="token keyword">val</span> executor<span class="token operator">:</span> ExecutionContext <span class="token operator">=</span> ExecutionContext<span class="token punctuation">.</span>fromExecutor<span class="token punctuation">(</span>Executors<span class="token punctuation">.</span>directExecutor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> executorService<span class="token operator">:</span> ExecutorService <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">var</span> dataSource<span class="token operator">:</span> DruidDataSource <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> open<span class="token punctuation">(</span>parameters<span class="token operator">:</span> Configuration<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    executorService <span class="token operator">=</span> util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">.</span>newFixedThreadPool<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    dataSource <span class="token operator">=</span> <span class="token keyword">new</span> DruidDataSource<span class="token punctuation">(</span><span class="token punctuation">)</span>    dataSource<span class="token punctuation">.</span>setDriverClassName<span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span>    dataSource<span class="token punctuation">.</span>setUsername<span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span>    dataSource<span class="token punctuation">.</span>setPassword<span class="token punctuation">(</span><span class="token string">"ruozedata"</span><span class="token punctuation">)</span>    dataSource<span class="token punctuation">.</span>setUrl<span class="token punctuation">(</span><span class="token string">"jdbc:mysql://warehouse001:3306/test"</span><span class="token punctuation">)</span>    dataSource<span class="token punctuation">.</span>setInitialSize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    dataSource<span class="token punctuation">.</span>setMinIdle<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    dataSource<span class="token punctuation">.</span>setMaxActive<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> dataSource<span class="token punctuation">)</span> dataSource<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> executorService<span class="token punctuation">)</span> executorService<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// TODO...</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> asyncInvoke<span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> resultFuture<span class="token operator">:</span> ResultFuture<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> future<span class="token operator">:</span> util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Future<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> executorService<span class="token punctuation">.</span>submit<span class="token punctuation">(</span><span class="token keyword">new</span> Callable<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">override</span> <span class="token keyword">def</span> call<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> query<span class="token punctuation">(</span>input<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> resultFutureRequested<span class="token operator">:</span> Future<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span>  <span class="token operator">=</span>  Future<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      future<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    resultFutureRequested<span class="token punctuation">.</span>onSuccess <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> result<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token keyword">=></span> resultFuture<span class="token punctuation">.</span>complete<span class="token punctuation">(</span>Iterable<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> query<span class="token punctuation">(</span>domain<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> connection<span class="token operator">:</span>Connection <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">var</span> pstmt<span class="token operator">:</span>PreparedStatement <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">var</span> rs<span class="token operator">:</span>ResultSet <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">val</span> sql <span class="token operator">=</span> <span class="token string">"select user_id from user_domain_mapping where domain=?"</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"-"</span>    <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span>getConnection      pstmt <span class="token operator">=</span> connection<span class="token punctuation">.</span>prepareStatement<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>      pstmt<span class="token punctuation">.</span>setString<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> domain<span class="token punctuation">)</span>      rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span>executeQuery<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> rs<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">!=</span>rs<span class="token punctuation">)</span> rs<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">!=</span>pstmt<span class="token punctuation">)</span> pstmt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">!=</span>connection<span class="token punctuation">)</span> connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    result  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>异步操作Http:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>etl<span class="token punctuation">.</span>async<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Domain<span class="token punctuation">.</span>AccessLogV2<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Keys<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>Configuration<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>async<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>ResultFuture<span class="token punctuation">,</span> RichAsyncFunction<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>AsyncDataStream<span class="token punctuation">,</span> StreamExecutionEnvironment<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>config<span class="token punctuation">.</span>RequestConfig<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span>HttpGet<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>client<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>CloseableHttpAsyncClient<span class="token punctuation">,</span> HttpAsyncClients<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EntityUtils<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token keyword">import</span> scala<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>ExecutionContext<span class="token punctuation">,</span> Future<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 1) open: 创建Client * 2) close: 释放资源操作 * 3) asyncInvoke: 完成业务逻辑 *   resultFutureRequested: Future[OUT] *   resultFutureRequested.onSuccess中case的匹配类型与Future[OUT]一致 *   匹配的业务逻辑中resultFuture.complete(Iterable(DataStream中真正的数据类型)) * 4) 主方法中：AsyncDataStream(同步流, 自定义实现类, 超时时间, 时间的单位) **/</span><span class="token keyword">object</span> HttpETLAsyncApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment      env<span class="token punctuation">.</span>setParallelism<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 2022-07-10 18:10:13,222.55.57.83,google.com,00000002</span>      <span class="token comment" spellcheck="true">// TODO... 读接口的数据</span>      <span class="token keyword">val</span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span>socketTextStream<span class="token punctuation">(</span><span class="token string">"warehouse001"</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> result <span class="token operator">=</span> AsyncDataStream<span class="token punctuation">.</span>unorderedWait<span class="token punctuation">(</span>stream<span class="token punctuation">,</span>        <span class="token keyword">new</span> MyAsyncHttpRequest<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span>      result<span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>      env<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> MyAsyncHttpRequest <span class="token keyword">extends</span> RichAsyncFunction<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> AccessLogV2<span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">implicit</span> <span class="token keyword">lazy</span> <span class="token keyword">val</span> executor<span class="token operator">:</span> ExecutionContext <span class="token operator">=</span> ExecutionContext<span class="token punctuation">.</span>fromExecutor<span class="token punctuation">(</span>Executors<span class="token punctuation">.</span>directExecutor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> httpClient<span class="token operator">:</span>CloseableHttpAsyncClient <span class="token operator">=</span> _  <span class="token keyword">override</span> <span class="token keyword">def</span> open<span class="token punctuation">(</span>parameters<span class="token operator">:</span> Configuration<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> requestConfig<span class="token operator">:</span> RequestConfig <span class="token operator">=</span> RequestConfig<span class="token punctuation">.</span>custom<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setSocketTimeout<span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>setConnectTimeout<span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token punctuation">)</span>    httpClient <span class="token operator">=</span> HttpAsyncClients<span class="token punctuation">.</span>custom<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaxConnTotal<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setDefaultRequestConfig<span class="token punctuation">(</span>requestConfig<span class="token punctuation">)</span>      <span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token punctuation">)</span>    httpClient<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> httpClient<span class="token punctuation">)</span> httpClient<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> asyncInvoke<span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> resultFuture<span class="token operator">:</span> ResultFuture<span class="token punctuation">[</span>AccessLogV2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> splits <span class="token operator">=</span> input<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> time <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> ip <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> domain <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> province <span class="token operator">=</span> <span class="token string">"-"</span>    <span class="token keyword">var</span> city <span class="token operator">=</span> <span class="token string">"-"</span>    <span class="token keyword">val</span> url <span class="token operator">=</span> s<span class="token string">"https://restapi.amap.com/v3/ip?ip=$ip&amp;output=json&amp;key=$&amp;#123;Keys.password&amp;#125;"</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> httpGet <span class="token operator">=</span> <span class="token keyword">new</span> HttpGet<span class="token punctuation">(</span>url<span class="token punctuation">)</span>      <span class="token keyword">val</span> future  <span class="token operator">=</span> httpClient<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>httpGet<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> resultFutureRequested<span class="token operator">:</span> Future<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> Future <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> response <span class="token operator">=</span> future<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> status <span class="token operator">=</span> response<span class="token punctuation">.</span>getStatusLine<span class="token punctuation">.</span>getStatusCode        <span class="token keyword">val</span> entity <span class="token operator">=</span> response<span class="token punctuation">.</span>getEntity        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">val</span> result <span class="token operator">=</span> EntityUtils<span class="token punctuation">.</span>toString<span class="token punctuation">(</span>entity<span class="token punctuation">)</span>          <span class="token keyword">val</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span>parseObject<span class="token punctuation">(</span>result<span class="token punctuation">)</span>          province <span class="token operator">=</span> json<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token string">"province"</span><span class="token punctuation">)</span>          city <span class="token operator">=</span> json<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>province<span class="token punctuation">,</span> city<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      resultFutureRequested<span class="token punctuation">.</span>onSuccess <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token punctuation">(</span>province<span class="token punctuation">,</span> city<span class="token punctuation">)</span> <span class="token keyword">=></span> resultFuture<span class="token punctuation">.</span>complete<span class="token punctuation">(</span>Iterable<span class="token punctuation">(</span>AccessLogV2<span class="token punctuation">(</span>time<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> e<span class="token operator">:</span> Exception <span class="token keyword">=></span> e<span class="token punctuation">.</span>printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>BoardcastState操作:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>etl<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>state<span class="token punctuation">.</span>MapStateDescriptor<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>BroadcastStream<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>co<span class="token punctuation">.</span>BroadcastProcessFunction<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token keyword">object</span> BroadcastStateApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment      env<span class="token punctuation">.</span>setParallelism<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 字段、不太变  </span>      <span class="token keyword">val</span> stream1 <span class="token operator">=</span> env<span class="token punctuation">.</span>socketTextStream<span class="token punctuation">(</span><span class="token string">"warehouse001"</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>          <span class="token punctuation">(</span>splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> mapState <span class="token operator">=</span> <span class="token keyword">new</span> MapStateDescriptor<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"map-state"</span><span class="token punctuation">,</span> classOf<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">,</span> classOf<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> broadcastStream<span class="token operator">:</span> BroadcastStream<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> stream1<span class="token punctuation">.</span>broadcast<span class="token punctuation">(</span>mapState<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 日志数据</span>      <span class="token keyword">val</span> stream2 <span class="token operator">=</span> env<span class="token punctuation">.</span>socketTextStream<span class="token punctuation">(</span><span class="token string">"warehouse001"</span><span class="token punctuation">,</span> <span class="token number">9528</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> time <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim            <span class="token keyword">val</span> ip <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim            <span class="token keyword">val</span> domain <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim            <span class="token punctuation">(</span>time<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> domain<span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> connectStream <span class="token operator">=</span> stream2<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>broadcastStream<span class="token punctuation">)</span>      connectStream<span class="token punctuation">.</span>process<span class="token punctuation">(</span><span class="token keyword">new</span> BroadcastProcessFunction<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 处理日志处理         */</span>        <span class="token keyword">override</span> <span class="token keyword">def</span> processElement<span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ctx<span class="token operator">:</span> BroadcastProcessFunction<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">]</span>#ReadOnlyContext<span class="token punctuation">,</span> out<span class="token operator">:</span> Collector<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">val</span> broadcastState <span class="token operator">=</span> ctx<span class="token punctuation">.</span>getBroadcastState<span class="token punctuation">(</span>mapState<span class="token punctuation">)</span>          <span class="token keyword">val</span> time <span class="token operator">=</span> value<span class="token punctuation">.</span>_1          <span class="token keyword">val</span> ip <span class="token operator">=</span> value<span class="token punctuation">.</span>_2          <span class="token keyword">val</span> domain <span class="token operator">=</span> value<span class="token punctuation">.</span>_3          <span class="token keyword">val</span> userId <span class="token operator">=</span> broadcastState<span class="token punctuation">.</span>get<span class="token punctuation">(</span>domain<span class="token punctuation">)</span>          out<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 处理广播数据         */</span>        <span class="token keyword">override</span> <span class="token keyword">def</span> processBroadcastElement<span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ctx<span class="token operator">:</span> BroadcastProcessFunction<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">]</span>#Context<span class="token punctuation">,</span> out<span class="token operator">:</span> Collector<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">val</span> userId <span class="token operator">=</span> value<span class="token punctuation">.</span>_1          <span class="token keyword">val</span> domain <span class="token operator">=</span> value<span class="token punctuation">.</span>_2          <span class="token keyword">val</span> broadcastState <span class="token operator">=</span> ctx<span class="token punctuation">.</span>getBroadcastState<span class="token punctuation">(</span>mapState<span class="token punctuation">)</span>          broadcastState<span class="token punctuation">.</span>put<span class="token punctuation">(</span>domain<span class="token punctuation">,</span> userId<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 把规则数据存储到state中</span>            <span class="token comment" spellcheck="true">// 测试广播到所有的下游subtask</span>          <span class="token keyword">val</span> iterator <span class="token operator">=</span> broadcastState<span class="token punctuation">.</span>iterator<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span>hasNext<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">val</span> next<span class="token operator">:</span> Map<span class="token punctuation">.</span>Entry<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> iterator<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>            println<span class="token punctuation">(</span>next<span class="token punctuation">.</span>getKey <span class="token operator">+</span> <span class="token string">"==>"</span> <span class="token operator">+</span> next<span class="token punctuation">.</span>getValue <span class="token operator">+</span> <span class="token string">"==>"</span> <span class="token operator">+</span> getRuntimeContext<span class="token punctuation">.</span>getIndexOfThisSubtask<span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>      env<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink Table Join</title>
      <link href="2020/03/30/flink10/"/>
      <url>2020/03/30/flink10/</url>
      
        <content type="html"><![CDATA[<pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>join<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>time<span class="token punctuation">.</span>FastDateFormat<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>CoGroupFunction<span class="token punctuation">,</span> JoinFunction<span class="token punctuation">,</span> RichMapFunction<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>Configuration<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>TimeCharacteristic<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>AssignerWithPeriodicWatermarks<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>function<span class="token punctuation">.</span>AllWindowFunction<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>OutputTag<span class="token punctuation">,</span> StreamExecutionEnvironment<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>watermark<span class="token punctuation">.</span>Watermark<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>assigners<span class="token punctuation">.</span>TumblingEventTimeWindows<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>windows<span class="token punctuation">.</span>TimeWindow<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>JavaConverters<span class="token punctuation">.</span>_<span class="token comment" spellcheck="true">/** * items.coGroup(orders) * 1) items late ==> side + API/DB * 2) order late ==> API/DB * 3) union * * * -Xmx  -Xms * SparkHistoryServer: 16G * ThriftServer/HiveServer2 * */</span><span class="token keyword">object</span> JoinApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    env<span class="token punctuation">.</span>setParallelism<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>setStreamTimeCharacteristic<span class="token punctuation">(</span>TimeCharacteristic<span class="token punctuation">.</span>EventTime<span class="token punctuation">)</span>    test02<span class="token punctuation">(</span>env<span class="token punctuation">)</span>    env<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> test02<span class="token punctuation">(</span>env<span class="token operator">:</span>StreamExecutionEnvironment<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> window <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">val</span> delay <span class="token operator">=</span> <span class="token number">5002</span>    <span class="token keyword">val</span> late <span class="token operator">=</span> <span class="token keyword">new</span> OutputTag<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"late"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> left <span class="token operator">=</span> env<span class="token punctuation">.</span>addSource<span class="token punctuation">(</span><span class="token keyword">new</span> ASource<span class="token punctuation">)</span><span class="token punctuation">.</span>assignTimestampsAndWatermarks<span class="token punctuation">(</span><span class="token keyword">new</span> MyAssignerWithPeriodicWatermarks<span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> right <span class="token operator">=</span> env<span class="token punctuation">.</span>addSource<span class="token punctuation">(</span><span class="token keyword">new</span> BSource<span class="token punctuation">)</span><span class="token punctuation">.</span>assignTimestampsAndWatermarks<span class="token punctuation">(</span><span class="token keyword">new</span> MyAssignerWithPeriodicWatermarks<span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> leftStream <span class="token operator">=</span> left<span class="token punctuation">.</span>windowAll<span class="token punctuation">(</span>TumblingEventTimeWindows<span class="token punctuation">.</span>of<span class="token punctuation">(</span>Time<span class="token punctuation">.</span>seconds<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>sideOutputLateData<span class="token punctuation">(</span>late<span class="token punctuation">)</span>        <span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">new</span> AllWindowFunction<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TimeWindow<span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">override</span> <span class="token keyword">def</span> apply<span class="token punctuation">(</span>window<span class="token operator">:</span> TimeWindow<span class="token punctuation">,</span> input<span class="token operator">:</span> Iterable<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token operator">:</span> Collector<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>ele <span class="token keyword">&lt;-</span> input<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              out<span class="token punctuation">.</span>collect<span class="token punctuation">(</span>ele<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    leftStream<span class="token punctuation">.</span>getSideOutput<span class="token punctuation">(</span>late<span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">new</span> RichMapFunction<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">override</span> <span class="token keyword">def</span> open<span class="token punctuation">(</span>parameters<span class="token operator">:</span> Configuration<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span>open<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span>      <span class="token keyword">override</span> <span class="token keyword">def</span> close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">override</span> <span class="token keyword">def</span> map<span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// itemid orderid  => order找</span>        <span class="token string">""</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    leftStream<span class="token punctuation">.</span>coGroup<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">.</span>where<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">.</span>equalTo<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>      <span class="token punctuation">.</span>window<span class="token punctuation">(</span>TumblingEventTimeWindows<span class="token punctuation">.</span>of<span class="token punctuation">(</span>Time<span class="token punctuation">.</span>seconds<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">new</span> CoGroupFunction<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">Long</span><span class="token punctuation">,</span><span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">override</span> <span class="token keyword">def</span> coGroup<span class="token punctuation">(</span>first<span class="token operator">:</span> lang<span class="token punctuation">.</span>Iterable<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> second<span class="token operator">:</span> lang<span class="token punctuation">.</span>Iterable<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token operator">:</span> Collector<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>firstEle <span class="token keyword">&lt;-</span> first<span class="token punctuation">.</span>asScala<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>secondEle <span class="token keyword">&lt;-</span> second<span class="token punctuation">.</span>asScala<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              out<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">(</span>firstEle<span class="token punctuation">.</span>_1<span class="token punctuation">,</span> firstEle<span class="token punctuation">.</span>_2<span class="token punctuation">,</span> secondEle<span class="token punctuation">.</span>_2<span class="token punctuation">,</span> firstEle<span class="token punctuation">.</span>_3<span class="token punctuation">,</span> secondEle<span class="token punctuation">.</span>_3<span class="token punctuation">)</span><span class="token punctuation">)</span>              flag <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              out<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">(</span>firstEle<span class="token punctuation">.</span>_1<span class="token punctuation">,</span> firstEle<span class="token punctuation">.</span>_2<span class="token punctuation">,</span> <span class="token string">"null"</span><span class="token punctuation">,</span> firstEle<span class="token punctuation">.</span>_3<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 前提条件：同窗口同key   */</span>  <span class="token keyword">def</span> test01<span class="token punctuation">(</span>env<span class="token operator">:</span>StreamExecutionEnvironment<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> window <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">val</span> delay <span class="token operator">=</span> <span class="token number">5001</span>    <span class="token keyword">val</span> left <span class="token operator">=</span> env<span class="token punctuation">.</span>addSource<span class="token punctuation">(</span><span class="token keyword">new</span> ASource<span class="token punctuation">)</span><span class="token punctuation">.</span>assignTimestampsAndWatermarks<span class="token punctuation">(</span><span class="token keyword">new</span> MyAssignerWithPeriodicWatermarks<span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> right <span class="token operator">=</span> env<span class="token punctuation">.</span>addSource<span class="token punctuation">(</span><span class="token keyword">new</span> BSource<span class="token punctuation">)</span><span class="token punctuation">.</span>assignTimestampsAndWatermarks<span class="token punctuation">(</span><span class="token keyword">new</span> MyAssignerWithPeriodicWatermarks<span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">)</span>    left<span class="token punctuation">.</span>join<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">.</span>where<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">.</span>equalTo<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>        <span class="token punctuation">.</span>window<span class="token punctuation">(</span>TumblingEventTimeWindows<span class="token punctuation">.</span>of<span class="token punctuation">(</span>Time<span class="token punctuation">.</span>seconds<span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">new</span> JoinFunction<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">Long</span><span class="token punctuation">,</span><span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">override</span> <span class="token keyword">def</span> join<span class="token punctuation">(</span>first<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">,</span> second<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token punctuation">(</span>first<span class="token punctuation">.</span>_1<span class="token punctuation">,</span> first<span class="token punctuation">.</span>_2<span class="token punctuation">,</span> second<span class="token punctuation">.</span>_2<span class="token punctuation">,</span> first<span class="token punctuation">.</span>_3<span class="token punctuation">,</span> second<span class="token punctuation">.</span>_3<span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> MyAssignerWithPeriodicWatermarks<span class="token punctuation">(</span>maxAllowedUnOrderedTime<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> AssignerWithPeriodicWatermarks<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">val</span> format <span class="token operator">=</span> FastDateFormat<span class="token punctuation">.</span>getInstance<span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> currentMaxTimestamp<span class="token operator">:</span> <span class="token builtin">Long</span> <span class="token operator">=</span> _  <span class="token keyword">override</span> <span class="token keyword">def</span> getCurrentWatermark<span class="token operator">:</span> Watermark <span class="token operator">=</span> <span class="token keyword">new</span> Watermark<span class="token punctuation">(</span>currentMaxTimestamp <span class="token operator">-</span> maxAllowedUnOrderedTime<span class="token punctuation">)</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> extractTimestamp<span class="token punctuation">(</span>element<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">,</span> recordTimestamp<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Long</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> nowTime <span class="token operator">=</span> element<span class="token punctuation">.</span>_3    currentMaxTimestamp <span class="token operator">=</span> currentMaxTimestamp<span class="token punctuation">.</span>max<span class="token punctuation">(</span>nowTime<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    println(s"$&amp;#123;element&amp;#125; -- $&amp;#123;nowTime&amp;#125; -- $&amp;#123;format.format(nowTime)&amp;#125; -- $&amp;#123;format.format(currentMaxTimestamp)&amp;#125; -- $&amp;#123;format.format(getCurrentWatermark.getTimestamp)&amp;#125;")</span>    nowTime  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Bsource:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>join<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>source<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>RichParallelSourceFunction<span class="token punctuation">,</span> SourceFunction<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token punctuation">.</span>ListBuffer<span class="token comment" spellcheck="true">/** * 名字,性别,时间戳 **/</span><span class="token keyword">class</span> ASource <span class="token keyword">extends</span> RichParallelSourceFunction<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> running <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> run<span class="token punctuation">(</span>ctx<span class="token operator">:</span> SourceFunction<span class="token punctuation">.</span>SourceContext<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> buffer <span class="token operator">=</span> ListBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    buffer<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"M"</span><span class="token punctuation">,</span><span class="token number">50000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [50,60)</span>    buffer<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"M"</span><span class="token punctuation">,</span><span class="token number">54000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [50,60)</span>    buffer<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"M"</span><span class="token punctuation">,</span><span class="token number">79900L</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [70,80)</span>    buffer<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"M"</span><span class="token punctuation">,</span><span class="token number">115000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [110,120)</span>    buffer<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"M"</span><span class="token punctuation">,</span><span class="token number">100000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [100,110)</span>    buffer<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"M"</span><span class="token punctuation">,</span><span class="token number">109000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [100,110)</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>running <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">(</span>buffer<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span>_1<span class="token punctuation">,</span>buffer<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span>_2<span class="token punctuation">,</span>buffer<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span>_3<span class="token punctuation">)</span><span class="token punctuation">)</span>      count <span class="token operator">+=</span> <span class="token number">1</span>      Thread<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> cancel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    running <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Asource:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>join<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>source<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>RichParallelSourceFunction<span class="token punctuation">,</span> SourceFunction<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token punctuation">.</span>ListBuffer<span class="token comment" spellcheck="true">/** * 名字,城市,时间戳 **/</span><span class="token keyword">class</span> BSource <span class="token keyword">extends</span> RichParallelSourceFunction<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> running <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> run<span class="token punctuation">(</span>ctx<span class="token operator">:</span> SourceFunction<span class="token punctuation">.</span>SourceContext<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> buffer <span class="token operator">=</span> ListBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    buffer<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"北京"</span><span class="token punctuation">,</span><span class="token number">50000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [50,60)</span>    buffer<span class="token punctuation">.</span>+<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"深圳"</span><span class="token punctuation">,</span><span class="token number">109000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [100,110)</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>running <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">(</span>buffer<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span>_1<span class="token punctuation">,</span>buffer<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span>_2<span class="token punctuation">,</span>buffer<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span>_3<span class="token punctuation">)</span><span class="token punctuation">)</span>      count <span class="token operator">+=</span> <span class="token number">1</span>      Thread<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> cancel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    running <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink Table API&amp;SQL</title>
      <link href="2020/03/29/flink09/"/>
      <url>2020/03/29/flink09/</url>
      
        <content type="html"><![CDATA[<p>简单操作:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>basic<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>basic<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Domain<span class="token punctuation">.</span>Access<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>types<span class="token punctuation">.</span>Row<span class="token comment" spellcheck="true">// 开发时第一件事就是导这俩包</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>table<span class="token punctuation">.</span>api<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">object</span> DataStreamTableSQLApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    <span class="token keyword">val</span> tableEnv <span class="token operator">=</span> StreamTableEnvironment<span class="token punctuation">.</span>create<span class="token punctuation">(</span>env<span class="token punctuation">)</span>    <span class="token keyword">val</span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span>readTextFile<span class="token punctuation">(</span><span class="token string">"data/access.log"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>        Access<span class="token punctuation">(</span>splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toLong<span class="token punctuation">,</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> splits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toDouble<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// DS ==> table</span>    <span class="token keyword">val</span> table <span class="token operator">=</span> tableEnv<span class="token punctuation">.</span>fromDataStream<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 注册成为临时表</span>    tableEnv<span class="token punctuation">.</span>createTemporaryView<span class="token punctuation">(</span><span class="token string">"access"</span><span class="token punctuation">,</span> table<span class="token punctuation">)</span>    <span class="token keyword">val</span> resultTable <span class="token operator">=</span> tableEnv<span class="token punctuation">.</span>sqlQuery<span class="token punctuation">(</span><span class="token string">"select * from access"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// table  ==> DS flink输出时是流的形式输出的</span>    <span class="token comment" spellcheck="true">// 第一种</span>    tableEnv<span class="token punctuation">.</span>toAppendStream<span class="token punctuation">[</span>Row<span class="token punctuation">]</span><span class="token punctuation">(</span>resultTable<span class="token punctuation">)</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 第二种</span>    tableEnv<span class="token punctuation">.</span>toAppendStream<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Long</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>resultTable<span class="token punctuation">)</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 第三种</span>    resultTable<span class="token punctuation">.</span>toAppendStream<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Long</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>API操作:</p><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// 过时写法</span>table<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toAppendStream<span class="token punctuation">[</span>Row<span class="token punctuation">]</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token string">"+++++++++++多个字段+++++++++++"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 不过时写法</span>table<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token symbol">'domain</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toAppendStream<span class="token punctuation">[</span>Row<span class="token punctuation">]</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token string">"+++++++++++单个字段+++++++++++"</span><span class="token punctuation">)</span>table<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'domain,'</span>traffics<span class="token punctuation">,</span><span class="token symbol">'time</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toAppendStream<span class="token punctuation">[</span>Row<span class="token punctuation">]</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token string">"+++++++++++多个字段+++++++++++"</span><span class="token punctuation">)</span></code></pre><p>聚合类型:</p><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// 注册成为临时表</span>tableEnv<span class="token punctuation">.</span>createTemporaryView<span class="token punctuation">(</span><span class="token string">"access"</span><span class="token punctuation">,</span> table<span class="token punctuation">)</span><span class="token keyword">val</span> resultTable <span class="token operator">=</span> tableEnv<span class="token punctuation">.</span>sqlQuery<span class="token punctuation">(</span><span class="token string">"select domain, sum(traffics) from access group by domain"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 发生变更的时候需要toRetractStream算子</span>tableEnv<span class="token punctuation">.</span>toRetractStream<span class="token punctuation">[</span>Row<span class="token punctuation">]</span><span class="token punctuation">(</span>resultTable<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// API操作</span>table<span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span><span class="token symbol">'domain</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token symbol">'traffics</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>as<span class="token punctuation">(</span><span class="token string">"traffics"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'domain, '</span>traffics<span class="token punctuation">)</span>  <span class="token punctuation">.</span>toRetractStream<span class="token punctuation">[</span>Row<span class="token punctuation">]</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>SQL&amp;API操作kafka:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>connector<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>table<span class="token punctuation">.</span>descriptors<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Csv<span class="token punctuation">,</span> Kafka<span class="token punctuation">,</span> Schema<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>types<span class="token punctuation">.</span>Row<span class="token comment" spellcheck="true">// 开发时要做的第一件事情</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>table<span class="token punctuation">.</span>api<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>table<span class="token punctuation">.</span>api<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token comment" spellcheck="true">/** * 布隆过滤器：最Redis的整合 */</span><span class="token keyword">object</span> KafkaConnector <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    env<span class="token punctuation">.</span>setParallelism<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> tableEnvironment <span class="token operator">=</span> StreamTableEnvironment<span class="token punctuation">.</span>create<span class="token punctuation">(</span>env<span class="token punctuation">)</span>    tableEnvironment<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token keyword">new</span> Kafka<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>version<span class="token punctuation">(</span><span class="token string">"universal"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>topic<span class="token punctuation">(</span><span class="token string">"flinktopic"</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span>property<span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> <span class="token string">"warehouse001:9092"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token punctuation">.</span>withFormat<span class="token punctuation">(</span><span class="token keyword">new</span> Csv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>withSchema<span class="token punctuation">(</span><span class="token keyword">new</span> Schema<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>field<span class="token punctuation">(</span><span class="token string">"timestamp"</span><span class="token punctuation">,</span> DataTypes<span class="token punctuation">.</span>BIGINT<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>field<span class="token punctuation">(</span><span class="token string">"domain"</span><span class="token punctuation">,</span> DataTypes<span class="token punctuation">.</span>STRING<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>field<span class="token punctuation">(</span><span class="token string">"traffic"</span><span class="token punctuation">,</span> DataTypes<span class="token punctuation">.</span>FLOAT<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span>createTemporaryTable<span class="token punctuation">(</span><span class="token string">"kafkatable"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> resultTable <span class="token operator">=</span> tableEnvironment<span class="token punctuation">.</span>from<span class="token punctuation">(</span><span class="token string">"kafkatable"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'domain, '</span>traffic<span class="token punctuation">)</span>      <span class="token punctuation">.</span>filter<span class="token punctuation">(</span><span class="token symbol">'domain</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"github.com/apache"</span><span class="token punctuation">)</span>    resultTable<span class="token punctuation">.</span>toAppendStream<span class="token punctuation">[</span>Row<span class="token punctuation">]</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//    val resultTable = tableEnvironment.from("access_ods")</span><span class="token comment" spellcheck="true">//      .groupBy('domain)</span><span class="token comment" spellcheck="true">//      .aggregate('traffic.sum().as("traffics"))</span><span class="token comment" spellcheck="true">//      .select('domain, 'traffics)</span><span class="token comment" spellcheck="true">//    tableEnvironment.sqlQuery(</span><span class="token comment" spellcheck="true">//      """</span><span class="token comment" spellcheck="true">//        |select domain, traffic</span><span class="token comment" spellcheck="true">//        |from</span><span class="token comment" spellcheck="true">//        |access_ods</span><span class="token comment" spellcheck="true">//        |where domain='github.com/apache'</span><span class="token comment" spellcheck="true">//        |""".stripMargin)</span><span class="token comment" spellcheck="true">//      .toAppendStream[Row].print("SQL...")</span>    tableEnvironment<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token keyword">new</span> Kafka<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>version<span class="token punctuation">(</span><span class="token string">"universal"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>topic<span class="token punctuation">(</span><span class="token string">"flinktopictest"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>property<span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> <span class="token string">"warehouse001:9092"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>      <span class="token punctuation">.</span>withFormat<span class="token punctuation">(</span><span class="token keyword">new</span> Csv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>withSchema<span class="token punctuation">(</span><span class="token keyword">new</span> Schema<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>field<span class="token punctuation">(</span><span class="token string">"domain"</span><span class="token punctuation">,</span> DataTypes<span class="token punctuation">.</span>STRING<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>field<span class="token punctuation">(</span><span class="token string">"traffic"</span><span class="token punctuation">,</span> DataTypes<span class="token punctuation">.</span>FLOAT<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">.</span>createTemporaryTable<span class="token punctuation">(</span><span class="token string">"kafkaoutputtable"</span><span class="token punctuation">)</span>    resultTable<span class="token punctuation">.</span>executeInsert<span class="token punctuation">(</span><span class="token string">"kafkaoutputtable"</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>kafka是不支持update的操作的.</p><p>SQL&amp;API操作ES:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>connector<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>table<span class="token punctuation">.</span>descriptors<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Csv<span class="token punctuation">,</span> Elasticsearch<span class="token punctuation">,</span> FileSystem<span class="token punctuation">,</span> Schema<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>types<span class="token punctuation">.</span>Row<span class="token comment" spellcheck="true">// 开发时要做的第一件事情</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>table<span class="token punctuation">.</span>api<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>table<span class="token punctuation">.</span>api<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">object</span> ESConnector <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    env<span class="token punctuation">.</span>setParallelism<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> tableEnvironment <span class="token operator">=</span> StreamTableEnvironment<span class="token punctuation">.</span>create<span class="token punctuation">(</span>env<span class="token punctuation">)</span>    <span class="token keyword">val</span> path <span class="token operator">=</span> <span class="token string">"data/access.log"</span>    tableEnvironment<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token keyword">new</span> FileSystem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>path<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>withFormat<span class="token punctuation">(</span><span class="token keyword">new</span> Csv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>withSchema<span class="token punctuation">(</span><span class="token keyword">new</span> Schema<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>field<span class="token punctuation">(</span><span class="token string">"timestamp"</span><span class="token punctuation">,</span> DataTypes<span class="token punctuation">.</span>BIGINT<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>field<span class="token punctuation">(</span><span class="token string">"domain"</span><span class="token punctuation">,</span> DataTypes<span class="token punctuation">.</span>STRING<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>field<span class="token punctuation">(</span><span class="token string">"traffic"</span><span class="token punctuation">,</span> DataTypes<span class="token punctuation">.</span>FLOAT<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">.</span>createTemporaryTable<span class="token punctuation">(</span><span class="token string">"access_ods"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> resultTable <span class="token operator">=</span> tableEnvironment<span class="token punctuation">.</span>from<span class="token punctuation">(</span><span class="token string">"access_ods"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span><span class="token symbol">'domain</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token symbol">'traffic</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>as<span class="token punctuation">(</span><span class="token string">"traffics"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'domain, '</span>traffics<span class="token punctuation">)</span>    resultTable<span class="token punctuation">.</span>toRetractStream<span class="token punctuation">[</span>Row<span class="token punctuation">]</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span>    tableEnvironment<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token keyword">new</span> Elasticsearch<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>version<span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>host<span class="token punctuation">(</span><span class="token string">"warehouse001"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"access_elasticsearch"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>documentType<span class="token punctuation">(</span><span class="token string">"_doc"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>      <span class="token punctuation">.</span>inUpsertMode<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>withFormat<span class="token punctuation">(</span><span class="token keyword">new</span> Json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>withSchema<span class="token punctuation">(</span><span class="token keyword">new</span> Schema<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>field<span class="token punctuation">(</span><span class="token string">"domain"</span><span class="token punctuation">,</span> DataTypes<span class="token punctuation">.</span>STRING<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>field<span class="token punctuation">(</span><span class="token string">"traffics"</span><span class="token punctuation">,</span> DataTypes<span class="token punctuation">.</span>FLOAT<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">.</span>createTemporaryTable<span class="token punctuation">(</span><span class="token string">"esoutput"</span><span class="token punctuation">)</span>    resultTable<span class="token punctuation">.</span>executeInsert<span class="token punctuation">(</span><span class="token string">"esoutput"</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>es是支持upsert的和retract的区别是直接更新而retract是先回撤再插入.</p><p>SQL/API使用窗口函数:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>window<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>TimeCharacteristic<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>timestamps<span class="token punctuation">.</span>BoundedOutOfOrdernessTimestampExtractor<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>table<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Table<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>table<span class="token punctuation">.</span>descriptors<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Csv<span class="token punctuation">,</span> FileSystem<span class="token punctuation">,</span> OldCsv<span class="token punctuation">,</span> Schema<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>types<span class="token punctuation">.</span>Row<span class="token comment" spellcheck="true">// 开发时要做的第一件事情</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>table<span class="token punctuation">.</span>api<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>table<span class="token punctuation">.</span>api<span class="token punctuation">.</span>_<span class="token keyword">object</span> WindowSQLApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">val</span> TABLE_NAME <span class="token operator">=</span> <span class="token string">"access"</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    env<span class="token punctuation">.</span>setStreamTimeCharacteristic<span class="token punctuation">(</span>TimeCharacteristic<span class="token punctuation">.</span>EventTime<span class="token punctuation">)</span>    env<span class="token punctuation">.</span>setParallelism<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * TODO... 实现滚动窗口     *  窗口大小是10s     *  keyBy(user)     * 1000-9999 :  pk 205  xingxing 6     * 10000-19999: pk 45     */</span>    <span class="token keyword">val</span> input <span class="token operator">=</span> env<span class="token punctuation">.</span>fromElements<span class="token punctuation">(</span>      <span class="token string">"1000,pk,Spark,75"</span><span class="token punctuation">,</span>      <span class="token string">"2000,pk,Flink,65"</span><span class="token punctuation">,</span>      <span class="token string">"2000,xingxing,蜡烛,3"</span><span class="token punctuation">,</span>      <span class="token string">"3000,pk,CDH,65"</span><span class="token punctuation">,</span>      <span class="token string">"9999,xingxing,皮鞭,3"</span><span class="token punctuation">,</span>      <span class="token string">"19999,pk,Hive,45"</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> time <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toLong      <span class="token keyword">val</span> user <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> goods <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> money <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toDouble      <span class="token punctuation">(</span>time<span class="token punctuation">,</span>user<span class="token punctuation">,</span>goods<span class="token punctuation">,</span>money<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>assignTimestampsAndWatermarks<span class="token punctuation">(</span><span class="token keyword">new</span> BoundedOutOfOrdernessTimestampExtractor<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Long</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span>seconds<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">override</span> <span class="token keyword">def</span> extractTimestamp<span class="token punctuation">(</span>element<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Long</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Long</span> <span class="token operator">=</span> element<span class="token punctuation">.</span>_1    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> tableEnvironment <span class="token operator">=</span> StreamTableEnvironment<span class="token punctuation">.</span>create<span class="token punctuation">(</span>env<span class="token punctuation">)</span>    tableEnvironment<span class="token punctuation">.</span>createTemporaryView<span class="token punctuation">(</span>TABLE_NAME<span class="token punctuation">,</span> input<span class="token punctuation">,</span><span class="token string">'time, '</span>user<span class="token punctuation">,</span> <span class="token string">'goods, '</span>money<span class="token punctuation">,</span> <span class="token symbol">'ts</span><span class="token punctuation">.</span>rowtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    val resultTable = tableEnvironment.from(TABLE_NAME)</span><span class="token comment" spellcheck="true">//    resultTable.printSchema()</span><span class="token comment" spellcheck="true">//    resultTable.toAppendStream[Row].print()</span>    <span class="token keyword">val</span> resultTable <span class="token operator">=</span> tableEnvironment<span class="token punctuation">.</span>from<span class="token punctuation">(</span>TABLE_NAME<span class="token punctuation">)</span>        <span class="token punctuation">.</span>window<span class="token punctuation">(</span>Over partitionBy<span class="token punctuation">(</span><span class="token string">'user) orderBy('</span>ts<span class="token punctuation">)</span> as <span class="token symbol">'win</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'user, '</span>money<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>over<span class="token punctuation">(</span><span class="token symbol">'win</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    resultTable<span class="token punctuation">.</span>toRetractStream<span class="token punctuation">[</span>Row<span class="token punctuation">]</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token string">"API..."</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sql <span class="token operator">=</span>      s<span class="token string">"""        |select        |user, sum(money) over win        |from $TABLE_NAME        |window win as (        | partition by user        | order by ts        |)        |"""</span><span class="token punctuation">.</span>stripMargin    tableEnvironment<span class="token punctuation">.</span>sqlQuery<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span>toRetractStream<span class="token punctuation">[</span>Row<span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token string">"SQL..."</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> session<span class="token punctuation">(</span>tableEnvironment<span class="token operator">:</span>TableEnvironment<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> resultTable <span class="token operator">=</span> tableEnvironment<span class="token punctuation">.</span>from<span class="token punctuation">(</span>TABLE_NAME<span class="token punctuation">)</span>      <span class="token punctuation">.</span>window<span class="token punctuation">(</span>Session withGap <span class="token number">10</span><span class="token punctuation">.</span>seconds on <span class="token string">'ts as '</span>win<span class="token punctuation">)</span>      <span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span><span class="token string">'user, '</span>win<span class="token punctuation">)</span>      <span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'user, '</span>money<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>as<span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'win.start(), '</span>win<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    resultTable<span class="token punctuation">.</span>toRetractStream<span class="token punctuation">[</span>Row<span class="token punctuation">]</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token string">"API..."</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sql <span class="token operator">=</span>      s<span class="token string">"""         |         |select         |user, sum(money) as total,         |SESSION_START(ts, interval '10' second) as win_start,         |SESSION_END(ts, interval '10' second) as win_end         |from $TABLE_NAME         |group by         |SESSION(ts, interval '10' second), user         |"""</span><span class="token punctuation">.</span>stripMargin    tableEnvironment<span class="token punctuation">.</span>sqlQuery<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span>toRetractStream<span class="token punctuation">[</span>Row<span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token string">"SQL..."</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> slide<span class="token punctuation">(</span>tableEnvironment<span class="token operator">:</span>TableEnvironment<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> resultTable <span class="token operator">=</span> tableEnvironment<span class="token punctuation">.</span>from<span class="token punctuation">(</span>TABLE_NAME<span class="token punctuation">)</span>      <span class="token punctuation">.</span>window<span class="token punctuation">(</span>Slide over <span class="token number">10</span><span class="token punctuation">.</span>seconds<span class="token punctuation">(</span><span class="token punctuation">)</span> every <span class="token number">2</span><span class="token punctuation">.</span>seconds<span class="token punctuation">(</span><span class="token punctuation">)</span> on <span class="token string">'ts as '</span>win<span class="token punctuation">)</span>      <span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span><span class="token string">'user, '</span>win<span class="token punctuation">)</span>      <span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'user, '</span>money<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>as<span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'win.start(), '</span>win<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    resultTable<span class="token punctuation">.</span>toRetractStream<span class="token punctuation">[</span>Row<span class="token punctuation">]</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token string">"API..."</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sql <span class="token operator">=</span>      s<span class="token string">"""         |         |select         |user, sum(money) as total,         |HOP_START(ts, interval '2' second, interval '10' second) as win_start,         |HOP_END(ts, interval '2' second, interval '10' second) as win_end         |from $TABLE_NAME         |group by         |HOP(ts, interval '2' second, interval '10' second), user         |"""</span><span class="token punctuation">.</span>stripMargin    tableEnvironment<span class="token punctuation">.</span>sqlQuery<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span>toRetractStream<span class="token punctuation">[</span>Row<span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token string">"SQL..."</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> tumble<span class="token punctuation">(</span>tableEnvironment<span class="token operator">:</span>TableEnvironment<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> resultTable <span class="token operator">=</span> tableEnvironment<span class="token punctuation">.</span>from<span class="token punctuation">(</span>TABLE_NAME<span class="token punctuation">)</span>      <span class="token punctuation">.</span>window<span class="token punctuation">(</span>Tumble over <span class="token number">10</span><span class="token punctuation">.</span>seconds<span class="token punctuation">(</span><span class="token punctuation">)</span> on <span class="token string">'ts as '</span>win<span class="token punctuation">)</span>      <span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span><span class="token string">'user, '</span>win<span class="token punctuation">)</span>      <span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'user, '</span>money<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>as<span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'win.start(), '</span>win<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    resultTable<span class="token punctuation">.</span>toRetractStream<span class="token punctuation">[</span>Row<span class="token punctuation">]</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token string">"API..."</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * tumble_start(ts, interval '10' second) as win_start,     * tumble_end(ts, interval '10' second) as win_end     *     * ???     */</span>    <span class="token keyword">val</span> sql <span class="token operator">=</span>      s<span class="token string">"""         |         |select         |user, sum(money) as total         |from $TABLE_NAME         |group by         |tumble(ts, interval '10' second), user         |"""</span><span class="token punctuation">.</span>stripMargin    tableEnvironment<span class="token punctuation">.</span>sqlQuery<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span>toRetractStream<span class="token punctuation">[</span>Row<span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token string">"SQL..."</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink对接Kafka</title>
      <link href="2020/03/27/flink08/"/>
      <url>2020/03/27/flink08/</url>
      
        <content type="html"><![CDATA[<p>代码实现:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>source<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>restartstrategy<span class="token punctuation">.</span>RestartStrategies<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>SimpleStringSchema<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>state<span class="token punctuation">.</span>filesystem<span class="token punctuation">.</span>FsStateBackend<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>CheckpointConfig<span class="token punctuation">.</span>ExternalizedCheckpointCleanup<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>StreamExecutionEnvironment<span class="token punctuation">,</span> createTypeInformation<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>FlinkKafkaConsumer<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token keyword">object</span> KafkaStateApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment<span class="token comment" spellcheck="true">//    env.setMaxParallelism(1)</span>    env<span class="token punctuation">.</span>enableCheckpointing<span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 配置backend地址,可以使用hdfs路径</span>    env<span class="token punctuation">.</span>setStateBackend<span class="token punctuation">(</span><span class="token keyword">new</span> FsStateBackend<span class="token punctuation">(</span><span class="token string">"file:///E:/IDEASpeace/flink/backend"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 配置不自动删除checkpoint目录</span>    env<span class="token punctuation">.</span>getCheckpointConfig<span class="token punctuation">.</span>enableExternalizedCheckpoints<span class="token punctuation">(</span>ExternalizedCheckpointCleanup<span class="token punctuation">.</span>RETAIN_ON_CANCELLATION<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 配置重试策略</span>    env<span class="token punctuation">.</span>setRestartStrategy<span class="token punctuation">(</span>RestartStrategies<span class="token punctuation">.</span>fixedDelayRestart<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Time<span class="token punctuation">.</span>of<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> broker <span class="token operator">=</span> <span class="token string">"warehouse001:9092"</span>    <span class="token keyword">val</span> topic <span class="token operator">=</span> <span class="token string">"kafka11"</span>    <span class="token keyword">val</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> Properties<span class="token punctuation">(</span><span class="token punctuation">)</span>    properties<span class="token punctuation">.</span>setProperty<span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> broker<span class="token punctuation">)</span>    properties<span class="token punctuation">.</span>setProperty<span class="token punctuation">(</span><span class="token string">"group.id"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span>    properties<span class="token punctuation">.</span>setProperty<span class="token punctuation">(</span><span class="token string">"auto.offset.reset"</span><span class="token punctuation">,</span> <span class="token string">"earliest"</span><span class="token punctuation">)</span>    properties<span class="token punctuation">.</span>setProperty<span class="token punctuation">(</span><span class="token string">"enable.auto.commit"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 1. 不带savepoint 默认是特殊的topic的offset上进行消费     * 2. 带了savepoint 就是以savepoint所指定的路径的元数据进行消费     */</span>    <span class="token keyword">val</span> kafkaSource <span class="token operator">=</span> <span class="token keyword">new</span> FlinkKafkaConsumer<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token keyword">new</span> SimpleStringSchema<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// </span>    kafkaSource<span class="token punctuation">.</span>setCommitOffsetsOnCheckpoints<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> stream1 <span class="token operator">=</span> env<span class="token punctuation">.</span>addSource<span class="token punctuation">(</span>kafkaSource<span class="token punctuation">)</span>      <span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>keyBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>socketTextStream<span class="token punctuation">(</span><span class="token string">"warehouse001"</span><span class="token punctuation">,</span> <span class="token number">9528</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> RuntimeException<span class="token punctuation">(</span><span class="token string">"gg...."</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          x<span class="token punctuation">.</span>toLowerCase<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>keyBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"KafkaStateApp"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>提取Flink配置和afka配置到工具类:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>utils<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>restartstrategy<span class="token punctuation">.</span>RestartStrategies<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>SimpleStringSchema<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ParameterTool<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>state<span class="token punctuation">.</span>filesystem<span class="token punctuation">.</span>FsStateBackend<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>CheckpointingMode<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>CheckpointConfig<span class="token punctuation">.</span>ExternalizedCheckpointCleanup<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>FlinkKafkaConsumer<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>JavaConversions<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">object</span> FlinkKafkapackage com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>utils<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>restartstrategy<span class="token punctuation">.</span>RestartStrategies<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>SimpleStringSchema<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ParameterTool<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>state<span class="token punctuation">.</span>filesystem<span class="token punctuation">.</span>FsStateBackend<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>CheckpointingMode<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>CheckpointConfig<span class="token punctuation">.</span>ExternalizedCheckpointCleanup<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>FlinkKafkaConsumer<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>JavaConversions<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">object</span> FlinkKafkaUtils <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> env<span class="token operator">:</span> StreamExecutionEnvironment <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment  <span class="token keyword">def</span> createKafkaStream<span class="token punctuation">(</span>parameters<span class="token operator">:</span> ParameterTool<span class="token punctuation">)</span><span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    env<span class="token punctuation">.</span>setParallelism<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>getConfig<span class="token punctuation">.</span>setGlobalJobParameters<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 容错配置</span>    env<span class="token punctuation">.</span>enableCheckpointing<span class="token punctuation">(</span>parameters<span class="token punctuation">.</span>getLong<span class="token punctuation">(</span><span class="token string">"flink.check.point.interval"</span><span class="token punctuation">,</span> <span class="token number">5000L</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CheckpointingMode<span class="token punctuation">.</span>EXACTLY_ONCE<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 配置backend地址,可以使用hdfs路径</span>    env<span class="token punctuation">.</span>setStateBackend<span class="token punctuation">(</span><span class="token keyword">new</span> FsStateBackend<span class="token punctuation">(</span>parameters<span class="token punctuation">.</span>getRequired<span class="token punctuation">(</span><span class="token string">"flink.checkpoint.path"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 配置不自动删除checkpoint目录</span>    env<span class="token punctuation">.</span>getCheckpointConfig<span class="token punctuation">.</span>enableExternalizedCheckpoints<span class="token punctuation">(</span>ExternalizedCheckpointCleanup<span class="token punctuation">.</span>RETAIN_ON_CANCELLATION<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 配置重试策略</span>    env<span class="token punctuation">.</span>setRestartStrategy<span class="token punctuation">(</span>RestartStrategies<span class="token punctuation">.</span>fixedDelayRestart<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Time<span class="token punctuation">.</span>of<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// kafka配置</span>    <span class="token keyword">val</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> Properties<span class="token punctuation">(</span><span class="token punctuation">)</span>    properties<span class="token punctuation">.</span>setProperty<span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> parameters<span class="token punctuation">.</span>getRequired<span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    properties<span class="token punctuation">.</span>setProperty<span class="token punctuation">(</span><span class="token string">"group.id"</span><span class="token punctuation">,</span> parameters<span class="token punctuation">.</span>getRequired<span class="token punctuation">(</span><span class="token string">"group.id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    properties<span class="token punctuation">.</span>setProperty<span class="token punctuation">(</span><span class="token string">"auto.offset.reset"</span><span class="token punctuation">,</span> parameters<span class="token punctuation">.</span>getRequired<span class="token punctuation">(</span><span class="token string">"auto.offset.reset"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    properties<span class="token punctuation">.</span>setProperty<span class="token punctuation">(</span><span class="token string">"enable.auto.commit"</span><span class="token punctuation">,</span> parameters<span class="token punctuation">.</span>getRequired<span class="token punctuation">(</span><span class="token string">"enable.auto.commit"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> topics <span class="token operator">=</span> parameters<span class="token punctuation">.</span>getRequired<span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> kafkaSource <span class="token operator">=</span> <span class="token keyword">new</span> FlinkKafkaConsumer<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span>topics<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList<span class="token punctuation">,</span> <span class="token keyword">new</span> SimpleStringSchema<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span>    env<span class="token punctuation">.</span>addSource<span class="token punctuation">(</span>kafkaSource<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>properties:</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">flink.check.point.interval</span><span class="token punctuation">=</span><span class="token attr-value">5000</span><span class="token attr-name">flink.checkpoint.path</span><span class="token punctuation">=</span><span class="token attr-value">file:///E:/IDEASpeace/flink/backend</span><span class="token attr-name">bootstrap.servers</span><span class="token punctuation">=</span><span class="token attr-value">warehouse001:9092</span><span class="token attr-name">group.id</span><span class="token punctuation">=</span><span class="token attr-value">flink-kafka</span>auto.offset.resetenable.auto.commi<span class="token attr-name">topics</span><span class="token punctuation">=</span><span class="token attr-value">"kafka11"</span></code></pre><p>使用:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>source<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>FlinkKafkaUtils<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ParameterTool<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>TimeCharacteristic<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">object</span> FlinkKafkaRedis <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    env<span class="token punctuation">.</span>setMaxParallelism<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>setStreamTimeCharacteristic<span class="token punctuation">(</span>TimeCharacteristic<span class="token punctuation">.</span>EventTime<span class="token punctuation">)</span>    <span class="token keyword">val</span> parameters <span class="token operator">=</span> ParameterTool<span class="token punctuation">.</span>fromPropertiesFile<span class="token punctuation">(</span>args<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> stream <span class="token operator">=</span> FlinkKafkaUtils<span class="token punctuation">.</span>createKafkaStream<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> stream<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>keyBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink Checkponit</title>
      <link href="2020/03/25/flink07/"/>
      <url>2020/03/25/flink07/</url>
      
        <content type="html"><![CDATA[<p>官网:</p><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/dev/datastream/fault-tolerance/checkpointing/">https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/dev/datastream/fault-tolerance/checkpointing/</a></p><p>Checkpoint前提:</p><p>1.需要持久化的source,能够支持<strong>一定时间</strong>内的replay</p><p>2.state需要持久化的存储介质</p><p>在Flink中默认的checkpoint是disable,需要手动开启.</p><pre><code>def enableCheckpointing(interval : Long) : StreamExecutionEnvironment = &#123;  enableCheckpointing(interval, CheckpointingMode.EXACTLY_ONCE)&#125;</code></pre><pre><code>CheckpointingMode包含EXACTLY_ONCE(默认)和AT_LEAST_ONCE两种模式</code></pre><p>为了满足容错,必须要先开启checkpoint,默认有一个默认的重启策略(不重启).fixed-delay:每隔多少时间,重启多少次.</p><p>checkpoint是默认存储在jvm中的.</p><p>代码测试:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>checkpoint<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>restartstrategy<span class="token punctuation">.</span>RestartStrategies<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>createTypeInformation<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token keyword">object</span> CheckpointApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    <span class="token comment" spellcheck="true">// 开启checkpoint</span>    env<span class="token punctuation">.</span>enableCheckpointing<span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 配置重启次数,重启间隔时间</span><span class="token comment" spellcheck="true">//    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(</span><span class="token comment" spellcheck="true">//      3,</span><span class="token comment" spellcheck="true">//      Time.of(10,TimeUnit.SECONDS)</span><span class="token comment" spellcheck="true">//    ))</span>    <span class="token comment" spellcheck="true">/**     * 此时throw new RuntimeException("gg....")挂掉还会有保存的state     * 但是如果重启应用程序,state状态是不保存的,原因重启后不在同一个jvm里面     */</span>    <span class="token keyword">val</span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span>socketTextStream<span class="token punctuation">(</span><span class="token string">"warehouse001"</span><span class="token punctuation">,</span> <span class="token number">9528</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> RuntimeException<span class="token punctuation">(</span><span class="token string">"gg...."</span><span class="token punctuation">)</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         x<span class="token punctuation">.</span>toLowerCase<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>keyBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>      <span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    stream<span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>StateBackend是可插拔的组件</p><pre class=" language-scala"><code class="language-scala">FsStateBackendpublic <span class="token keyword">class</span> FsStateBackend <span class="token keyword">extends</span> AbstractFileStateBackend implements ConfigurableStateBackend <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// 默认5M</span>MemoryStateBackendpublic <span class="token keyword">class</span> MemoryStateBackend <span class="token keyword">extends</span> AbstractFileStateBackend        implements ConfigurableStateBackend <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// 这种需要添加依赖 依赖如下</span>RocksDBStateBackendpublic <span class="token keyword">class</span> RocksDBStateBackend <span class="token keyword">extends</span> AbstractManagedMemoryStateBackend        implements ConfigurableStateBackend <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-statebackend-rocksdb_$<span class="token entity" title="&#123;">&amp;#123;</span>scala.binary.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>flink.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><table><thead><tr><th align="center"></th><th align="center">state</th><th align="center">checkpoint存储路径</th><th align="center">场景</th></tr></thead><tbody><tr><td align="center">FsStateBackend</td><td align="center">TM</td><td align="center">JVM</td><td align="center">测试</td></tr><tr><td align="center">MemoryStateBackend</td><td align="center">TM</td><td align="center">FS</td><td align="center">测试/生产</td></tr><tr><td align="center">RocksDBStateBackend</td><td align="center">RocksDB</td><td align="center">HDFS</td><td align="center">生产</td></tr></tbody></table><p>代码配置:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> fsStateBackend <span class="token operator">=</span> <span class="token keyword">new</span> FsStateBackend<span class="token punctuation">(</span><span class="token string">"file:///E:/IDEASpeace/flink/backend"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>env<span class="token punctuation">.</span>setStateBackend<span class="token punctuation">(</span>fsStateBackend<span class="token punctuation">)</span></code></pre><p>当程序重启时,同样读不到state,原因;</p><pre><code>public enum ExternalizedCheckpointCleanup &#123;    DELETE_ON_CANCELLATION(true),    RETAIN_ON_CANCELLATION(false);&#125;</code></pre><p>这里默认是取消会删除checkpoint目录.</p><p>代码中需要设置如下才会保留cp目录:</p><pre class=" language-scala"><code class="language-scala">env<span class="token punctuation">.</span>getCheckpointConfig<span class="token punctuation">.</span>enableExternalizedCheckpoints<span class="token punctuation">(</span>ExternalizedCheckpointCleanup<span class="token punctuation">.</span>RETAIN_ON_CANCELLATION<span class="token punctuation">)</span></code></pre><p>也可以在配置文件中设置flink cp目录:</p><p>RockDB操作:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>rocksdb<span class="token punctuation">.</span>Options<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>rocksdb<span class="token punctuation">.</span>RocksDB<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>rocksdb<span class="token punctuation">.</span>RocksDBException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RocksDBApp</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RocksDB<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> RocksDBException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数据库配置</span>        Options options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        options<span class="token punctuation">.</span><span class="token function">setCreateIfMissing</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RocksDB rocksdb <span class="token operator">=</span> RocksDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token string">"rocksdb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token string">"12"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rocksdb<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"写入完成...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取数据:"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>rocksdb<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rocksdb<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        options<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>RocksDB代码配置:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> stateBackend <span class="token operator">=</span> <span class="token keyword">new</span> RocksDBStateBackend<span class="token punctuation">(</span><span class="token string">"hdfs://warehouse001:9000/flink/checkpoint/"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>stateBackend<span class="token punctuation">.</span>setDbStoragePath<span class="token punctuation">(</span><span class="token string">"~/tmp/flink/rocksdb"</span><span class="token punctuation">)</span></code></pre><p>也可以在配置文件中配置,具体配置参考:</p><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/dev/datastream/fault-tolerance/checkpointing/">https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/dev/datastream/fault-tolerance/checkpointing/</a></p><p>Checkpoint:</p><p>​    每个作业都是会产生一个新的Checkpoint目录</p><p>​    默认情况下:重启后原来老的checkpoint的state是没法关联的</p><p>​    UI:Savepoint设置你上次的chk-x</p><p>​    命令行: -s指定</p><p>Checkpoint VS Savepoint</p><p>​    checkpoint: 定时触发,用于保存state,过期的,在内部失败重启时使用.</p><p>​    savepoint:手工触发,一般是在升级Flink版本的时候使用</p><p>具体配置参考:</p><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/ops/state/savepoints/">Savepoints | Apache Flink</a></p>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink</title>
      <link href="2020/03/12/flink/"/>
      <url>2020/03/12/flink/</url>
      
        <content type="html"><![CDATA[<p>Flink项目创建:</p><p>命令:</p><pre><code>mvn archetype:generate \-DarchetypeGroupId=org.apache.flink \-DarchetypeArtifactId=flink-walkthrough-datastream-scala \-DarchetypeVersion=1.12.1 \-DgroupId=frauddetection \-DartifactId=frauddetection \-Dversion=0.1 \-Dpackage=spendreport \-DinteractiveMode=false</code></pre><p>在目录下git bash执行</p><h3 id="Flink-WC案例"><a href="#Flink-WC案例" class="headerlink" title="Flink WC案例"></a>Flink WC案例</h3><p>streaming wc案例:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>bykey<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token comment" spellcheck="true">/** * flink中并行度的问题 * 1) env * 2) source * 3) transformation * 4) sink */</span><span class="token keyword">object</span> StreamingWCApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取实时处理的上下文环境</span>    <span class="token keyword">val</span> environment <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    <span class="token comment" spellcheck="true">// env设置并行度</span>    StreamExecutionEnvironment<span class="token punctuation">.</span>setDefaultLocalParallelism<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 业务逻辑处理     * 2 获取数据源     * 3 transformation     * 4 sink     */</span>    <span class="token keyword">val</span> text <span class="token operator">=</span> environment<span class="token punctuation">.</span>socketTextStream<span class="token punctuation">(</span><span class="token string">"warehouse001"</span><span class="token punctuation">,</span> <span class="token number">9528</span><span class="token punctuation">)</span>    text<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>toLowerCase<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>keyBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// tuple(单词,1)</span>      <span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//flink中最简单的sink</span>      <span class="token punctuation">.</span>setParallelism<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// sink中设置并行度</span>    <span class="token comment" spellcheck="true">// 5 Trigger</span>    environment<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"StreamingWCApp"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>batch案例</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>bykey<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>ExecutionEnvironment<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">object</span> BatchWCApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> environment <span class="token operator">=</span> ExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    <span class="token keyword">val</span> text <span class="token operator">=</span> environment<span class="token punctuation">.</span>readTextFile<span class="token punctuation">(</span><span class="token string">"data/wc.data"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 业务逻辑处理</span>    text<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>toLowerCase<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// tuple(单词,1)</span>      <span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//flink中最简单的sink</span><span class="token comment" spellcheck="true">//    environment.execute("BatchWCApp") 批不需要execute</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>java wc案例:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>bykey<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>FlatMapFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>MapFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>typeinfo<span class="token punctuation">.</span>Types<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>KeySelector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStreamSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamingWCAppJava</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        StreamExecutionEnvironment environment <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataStreamSource<span class="token operator">&lt;</span>String<span class="token operator">></span> stream <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"warehouse001"</span><span class="token punctuation">,</span> <span class="token number">9528</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String line<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>String<span class="token operator">></span> outer<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>outer<span class="token operator">:</span><span class="token operator">:</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span><span class="token function">TUPLE</span><span class="token punctuation">(</span>Types<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span>Types<span class="token punctuation">.</span>INT<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> x<span class="token punctuation">.</span>f0<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        stream.flatMap(new FlatMapFunction&lt;String, String>() &amp;#123;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//            @Override</span><span class="token comment" spellcheck="true">//            public void flatMap(String value, Collector&lt;String> out) throws Exception &amp;#123;</span><span class="token comment" spellcheck="true">//                String[] splits = value.split(",");</span><span class="token comment" spellcheck="true">//                for (String split : splits) &amp;#123;</span><span class="token comment" spellcheck="true">//                    out.collect(split);</span><span class="token comment" spellcheck="true">//                &amp;#125;</span><span class="token comment" spellcheck="true">//            &amp;#125;</span><span class="token comment" spellcheck="true">//        &amp;#125;).map(new MapFunction&lt;String, Tuple2&lt;String, Integer>>() &amp;#123;</span><span class="token comment" spellcheck="true">//            @Override</span><span class="token comment" spellcheck="true">//            public Tuple2&lt;String, Integer> map(String value) throws Exception &amp;#123;</span><span class="token comment" spellcheck="true">//                return Tuple2.of(value,1);</span><span class="token comment" spellcheck="true">//            &amp;#125;</span><span class="token comment" spellcheck="true">//        &amp;#125;)</span>                <span class="token comment" spellcheck="true">//  .keyBy(0) // 过时的</span><span class="token comment" spellcheck="true">//                .keyBy(new KeySelector&lt;Tuple2&lt;String, Integer>, String>() &amp;#123;</span><span class="token comment" spellcheck="true">//                    @Override</span><span class="token comment" spellcheck="true">//                    public String getKey(Tuple2&lt;String, Integer> value) throws Exception &amp;#123;</span><span class="token comment" spellcheck="true">//                        return value.f0;</span><span class="token comment" spellcheck="true">//                    &amp;#125;</span><span class="token comment" spellcheck="true">//                &amp;#125;)</span><span class="token comment" spellcheck="true">//                .keyBy(x -> x.f0)</span><span class="token comment" spellcheck="true">//                .sum(1)</span><span class="token comment" spellcheck="true">//                .print();</span>        environment<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"StreamingWCAppJava"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="对接数据源"><a href="#对接数据源" class="headerlink" title="对接数据源"></a>对接数据源</h3><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>bykey<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Domain<span class="token punctuation">.</span>Access<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">object</span> ByKeyApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> environment <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    <span class="token keyword">val</span> stream <span class="token operator">=</span> environment<span class="token punctuation">.</span>readTextFile<span class="token punctuation">(</span><span class="token string">"data/access.log"</span><span class="token punctuation">)</span>    stream<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>      Access<span class="token punctuation">(</span>splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toLong<span class="token punctuation">,</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> splits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toDouble<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    environment<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"ByKeyApp"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>添加过滤条件:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>bykey<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Domain<span class="token punctuation">.</span>Access<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>udf<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Filter<span class="token punctuation">,</span> FilterV2<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>FilterFunction<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">object</span> ByKeyApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> environment <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    <span class="token keyword">val</span> stream <span class="token operator">=</span> environment<span class="token punctuation">.</span>readTextFile<span class="token punctuation">(</span><span class="token string">"data/access.log"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> accessStream <span class="token operator">=</span> stream<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>      Access<span class="token punctuation">(</span>splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toLong<span class="token punctuation">,</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> splits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toDouble<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    accessStream.filter(_.traffics > 4000).print()</span><span class="token comment" spellcheck="true">//    accessStream.filter(new FilterFunction[Access] &amp;#123;</span><span class="token comment" spellcheck="true">//      override def filter(t: Access): Boolean = t.traffics > 4000</span><span class="token comment" spellcheck="true">//    &amp;#125;)</span><span class="token comment" spellcheck="true">//    accessStream.filter(new Filter).print()</span>    accessStream<span class="token punctuation">.</span>filter<span class="token punctuation">(</span><span class="token keyword">new</span> FilterV2<span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    environment<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"ByKeyApp"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>udf<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Domain<span class="token punctuation">.</span>Access<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>FilterFunction<span class="token keyword">class</span> Filter <span class="token keyword">extends</span> FilterFunction<span class="token punctuation">[</span>Access<span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> filter<span class="token punctuation">(</span>t<span class="token operator">:</span> Access<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> t<span class="token punctuation">.</span>traffics <span class="token operator">></span> <span class="token number">4000</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>domain<span class="token keyword">object</span> Domain <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token keyword">class</span> Access<span class="token punctuation">(</span>time<span class="token operator">:</span><span class="token builtin">Long</span><span class="token punctuation">,</span> domain<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> traffics<span class="token operator">:</span><span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>RichFuncation:带生命周期的Function</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>bykey<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Domain<span class="token punctuation">.</span>Access<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>udf<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Filter<span class="token punctuation">,</span> FilterV2<span class="token punctuation">,</span> MyRichFilter<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>FilterFunction<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">object</span> ByKeyApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> environment <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    environment<span class="token punctuation">.</span>setParallelism<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> stream <span class="token operator">=</span> environment<span class="token punctuation">.</span>readTextFile<span class="token punctuation">(</span><span class="token string">"data/access.log"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> accessStream <span class="token operator">=</span> stream<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>      Access<span class="token punctuation">(</span>splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toLong<span class="token punctuation">,</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> splits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toDouble<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    accessStream.filter(_.traffics > 4000).print()</span><span class="token comment" spellcheck="true">//    accessStream.filter(new FilterFunction[Access] &amp;#123;</span><span class="token comment" spellcheck="true">//      override def filter(t: Access): Boolean = t.traffics > 4000</span><span class="token comment" spellcheck="true">//    &amp;#125;)</span><span class="token comment" spellcheck="true">//    accessStream.filter(new Filter).print()</span><span class="token comment" spellcheck="true">//    accessStream.filter(new FilterV2(5000)).print()</span>    accessStream<span class="token punctuation">.</span>filter<span class="token punctuation">(</span><span class="token keyword">new</span> MyRichFilter<span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 这里的输出结果是12个open,原因是我的机器有12个core     * 可以在env端设置并行度减少open~~~~~~~~~~~~~~~~~~~~MyRichFilter.open~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MyRichFilter.open~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MyRichFilter.open~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MyRichFilter.open~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MyRichFilter.open~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MyRichFilter.open~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MyRichFilter.open~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MyRichFilter.open~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MyRichFilter.open~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MyRichFilter.open~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MyRichFilter.open~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MyRichFilter.open~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MyRichFilter.filter~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MyRichFilter.filter~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MyRichFilter.filter~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MyRichFilter.filter~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MyRichFilter.filter~~~~~~~~~~~~~~~~~~~~~~~~~2> Access(202112120010,ruoze.ke.qq.com,6000.0)     */</span>    environment<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"ByKeyApp"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>udf<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Domain<span class="token punctuation">.</span>Access<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>RichFilterFunction<span class="token punctuation">,</span> RuntimeContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>Configuration<span class="token keyword">class</span> MyRichFilter<span class="token punctuation">(</span>traffics<span class="token operator">:</span><span class="token builtin">Double</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> RichFilterFunction<span class="token punctuation">[</span>Access<span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> open<span class="token punctuation">(</span>parameters<span class="token operator">:</span> Configuration<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~MyRichFilter.open~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> filter<span class="token punctuation">(</span>value<span class="token operator">:</span> Access<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~~~~~~MyRichFilter.filter~~~~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>    value<span class="token punctuation">.</span>traffics <span class="token operator">></span> traffics  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> getRuntimeContext<span class="token operator">:</span> RuntimeContext <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span>getRuntimeContext  <span class="token keyword">override</span> <span class="token keyword">def</span> close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>在WC的时候,也可以自定义WC类,在做业务逻辑的时候可以反射子段:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>bykey<span class="token keyword">case</span> <span class="token keyword">class</span> WC<span class="token punctuation">(</span>word<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> cnt<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// WC业务逻辑</span>text<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>toLowerCase<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> WC<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>keyBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>word<span class="token punctuation">)</span>  <span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token string">"cnt"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//flink中最简单的sink</span>  <span class="token punctuation">.</span>setParallelism<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// sink中设置并行度</span><span class="token comment" spellcheck="true">// 此时的运行结果是WC对象</span></code></pre><p>Collection数据源:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>source<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Domain<span class="token punctuation">.</span>Access<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token keyword">object</span> SourceApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> environment <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    <span class="token comment" spellcheck="true">/**     * fromCollection不能切分,所以是单并行度     */</span>    <span class="token keyword">val</span> stream <span class="token operator">=</span> environment<span class="token punctuation">.</span>fromCollection<span class="token punctuation">(</span>List<span class="token punctuation">(</span>      Access<span class="token punctuation">(</span><span class="token number">202112120010L</span><span class="token punctuation">,</span> <span class="token string">"blibli.com"</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      Access<span class="token punctuation">(</span><span class="token number">202112120010L</span><span class="token punctuation">,</span> <span class="token string">"blibli.ke.qq.com"</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      Access<span class="token punctuation">(</span><span class="token number">202112120010L</span><span class="token punctuation">,</span> <span class="token string">"github.com/apache"</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      Access<span class="token punctuation">(</span><span class="token number">202112120010L</span><span class="token punctuation">,</span> <span class="token string">"blibli.com"</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      Access<span class="token punctuation">(</span><span class="token number">202112120010L</span><span class="token punctuation">,</span> <span class="token string">"blibli.ke.qq.com"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>stream<span class="token punctuation">.</span>parallelism<span class="token punctuation">)</span>    <span class="token keyword">val</span> filterStream <span class="token operator">=</span> stream<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>traffics <span class="token operator">></span> <span class="token number">4000</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>filterStream<span class="token punctuation">.</span>parallelism<span class="token punctuation">)</span>    filterStream<span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token string">"source-from-collection"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      .setParallelism(1)  // 这里设置输出的并行度,1的话source-from-collection:1>  会变成source-from-collection></span>    <span class="token comment" spellcheck="true">/**     * 输出结果:112source-from-collection:6> Access(202112120010,blibli.ke.qq.com,6000.0)source-from-collection:7> Access(202112120010,github.com/apache,5000.0)     */</span>    environment<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SourceApp"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Socket数据源:</p><pre class=" language-scala"><code class="language-scala">    <span class="token comment" spellcheck="true">// socket也是不能切分的, 并行度也是1</span>    <span class="token keyword">val</span> stream <span class="token operator">=</span> environment<span class="token punctuation">.</span>socketTextStream<span class="token punctuation">(</span><span class="token string">"warehouse001"</span><span class="token punctuation">,</span> <span class="token number">9528</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>stream<span class="token punctuation">.</span>parallelism<span class="token punctuation">)</span>    <span class="token keyword">val</span> filterStream <span class="token operator">=</span> stream<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>trim <span class="token operator">!=</span> <span class="token string">"aa"</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>filterStream<span class="token punctuation">.</span>parallelism<span class="token punctuation">)</span>    filterStream<span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 输出结果为112     */</span></code></pre><p>Elements数据源:</p><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//    fromElements也是单并行度的</span>    <span class="token keyword">val</span> stream <span class="token operator">=</span> environment<span class="token punctuation">.</span>fromElements<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token number">3L</span><span class="token punctuation">,</span> <span class="token number">4D</span><span class="token punctuation">,</span> <span class="token number">5F</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>stream<span class="token punctuation">.</span>parallelism<span class="token punctuation">)</span>    <span class="token keyword">val</span> mapStream <span class="token operator">=</span> stream<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> x<span class="token punctuation">)</span>    println<span class="token punctuation">(</span>mapStream<span class="token punctuation">.</span>parallelism<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    mapStream.print()</span>    <span class="token comment" spellcheck="true">/**     * 输出结果为112     */</span></code></pre><p>fromParallelCollection数据源:</p><pre class=" language-scala"><code class="language-scala">    <span class="token comment" spellcheck="true">// fromParallelCollection是多并行度的</span>    <span class="token keyword">val</span> stream <span class="token operator">=</span> environment<span class="token punctuation">.</span>fromParallelCollection<span class="token punctuation">(</span><span class="token keyword">new</span> NumberSequenceIterator<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>stream<span class="token punctuation">.</span>parallelism<span class="token punctuation">)</span>    <span class="token keyword">val</span> filter <span class="token operator">=</span> stream<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>filter<span class="token punctuation">.</span>parallelism<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 这里的输出为:1212     */</span></code></pre><p>generateSequence数据源:</p><pre class=" language-scala"><code class="language-scala">    <span class="token comment" spellcheck="true">// generateSequence也是多并行度的</span>    <span class="token keyword">val</span> stream <span class="token operator">=</span> environment<span class="token punctuation">.</span>generateSequence<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>stream<span class="token punctuation">.</span>parallelism<span class="token punctuation">)</span>        <span class="token keyword">val</span> filter <span class="token operator">=</span> stream<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>        println<span class="token punctuation">(</span>filter<span class="token punctuation">.</span>parallelism<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 输出结果为:1212     */</span></code></pre><p>readTextFile数据源:</p><pre class=" language-scala"><code class="language-scala"> <span class="token comment" spellcheck="true">// readTextFile是多并行度的</span>    <span class="token keyword">val</span> stream <span class="token operator">=</span> environment<span class="token punctuation">.</span>readTextFile<span class="token punctuation">(</span><span class="token string">"data/access.log"</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>stream<span class="token punctuation">.</span>parallelism<span class="token punctuation">)</span>    stream<span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 输出结果为121> 202112120010,blibli.com,40003> 202112120010,blibli.ke.qq.com,100010> 202112120010,github.com/apache,50006> 202112120010,blibli.com,20008> 202112120010,blibli.ke.qq.com,6000     */</span></code></pre><p>自定义Source:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>source<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Domain<span class="token punctuation">.</span>Access<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>source<span class="token punctuation">.</span>SourceFunction<span class="token keyword">import</span> scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token comment" spellcheck="true">/** * 使用场景: 测试造数 */</span><span class="token keyword">class</span> AccessSource <span class="token keyword">extends</span> SourceFunction<span class="token punctuation">[</span>Access<span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> running <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> run<span class="token punctuation">(</span>ctx<span class="token operator">:</span> SourceFunction<span class="token punctuation">.</span>SourceContext<span class="token punctuation">[</span>Access<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> random <span class="token operator">=</span> <span class="token keyword">new</span> Random<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> domains <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token string">"blibli.com"</span><span class="token punctuation">,</span><span class="token string">"blibli.ke.qq.com"</span><span class="token punctuation">,</span><span class="token string">"github.com/apache"</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> ts <span class="token operator">=</span> System<span class="token punctuation">.</span>currentTimeMillis<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token number">1</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>collect<span class="token punctuation">(</span>Access<span class="token punctuation">(</span>ts<span class="token punctuation">,</span> domains<span class="token punctuation">(</span>random<span class="token punctuation">.</span>nextInt<span class="token punctuation">(</span>domains<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>nextInt<span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      Thread<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> cancel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    running <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> stream <span class="token operator">=</span> environment<span class="token punctuation">.</span>addSource<span class="token punctuation">(</span><span class="token keyword">new</span> AccessSource<span class="token punctuation">)</span>println<span class="token punctuation">(</span>stream<span class="token punctuation">.</span>parallelism<span class="token punctuation">)</span><span class="token keyword">val</span> filterStream <span class="token operator">=</span> stream<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>traffics <span class="token operator">></span> <span class="token number">200</span><span class="token punctuation">)</span>println<span class="token punctuation">(</span>filterStream<span class="token punctuation">.</span>parallelism<span class="token punctuation">)</span>filterStream<span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** * 这里并行度是1,不支持多并行 */</span></code></pre><p>原因SourceFunction是单并行度的,如果设置多并行度会报错</p><p>自定义ParallelSourceFunction数据源:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>source<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Domain<span class="token punctuation">.</span>Access<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>source<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>ParallelSourceFunction<span class="token punctuation">,</span> SourceFunction<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token comment" spellcheck="true">/** * 使用场景: 测试造数 */</span><span class="token keyword">class</span> AccessSourceV2 <span class="token keyword">extends</span> ParallelSourceFunction<span class="token punctuation">[</span>Access<span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> running <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> run<span class="token punctuation">(</span>ctx<span class="token operator">:</span> SourceFunction<span class="token punctuation">.</span>SourceContext<span class="token punctuation">[</span>Access<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> random <span class="token operator">=</span> <span class="token keyword">new</span> Random<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> domains <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token string">"blibli.com"</span><span class="token punctuation">,</span><span class="token string">"blibli.ke.qq.com"</span><span class="token punctuation">,</span><span class="token string">"github.com/apache"</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> ts <span class="token operator">=</span> System<span class="token punctuation">.</span>currentTimeMillis<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token number">1</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>collect<span class="token punctuation">(</span>Access<span class="token punctuation">(</span>ts<span class="token punctuation">,</span> domains<span class="token punctuation">(</span>random<span class="token punctuation">.</span>nextInt<span class="token punctuation">(</span>domains<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>nextInt<span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      Thread<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> cancel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    running <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> stream <span class="token operator">=</span> environment<span class="token punctuation">.</span>addSource<span class="token punctuation">(</span><span class="token keyword">new</span> AccessSourceV2<span class="token punctuation">)</span><span class="token punctuation">.</span>setParallelism<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>println<span class="token punctuation">(</span>stream<span class="token punctuation">.</span>parallelism<span class="token punctuation">)</span><span class="token keyword">val</span> filterStream <span class="token operator">=</span> stream<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>traffics <span class="token operator">></span> <span class="token number">200</span><span class="token punctuation">)</span>println<span class="token punctuation">(</span>filterStream<span class="token punctuation">.</span>parallelism<span class="token punctuation">)</span>filterStream<span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** * AccessSource是支持多并行度的 */</span></code></pre><p>RichParallelSourceFunction数据源:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>source<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Domain<span class="token punctuation">.</span>Access<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>Configuration<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>source<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>ParallelSourceFunction<span class="token punctuation">,</span> RichParallelSourceFunction<span class="token punctuation">,</span> SourceFunction<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token comment" spellcheck="true">/** * 使用场景: 测试造数 */</span><span class="token keyword">class</span> AccessSourceV3 <span class="token keyword">extends</span> RichParallelSourceFunction<span class="token punctuation">[</span>Access<span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> running <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> open<span class="token punctuation">(</span>parameters<span class="token operator">:</span> Configuration<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span><span class="token string">"=========AccessSourceV3 open invoked========"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> run<span class="token punctuation">(</span>ctx<span class="token operator">:</span> SourceFunction<span class="token punctuation">.</span>SourceContext<span class="token punctuation">[</span>Access<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>getRuntimeContext<span class="token punctuation">.</span>getIndexOfThisSubtask <span class="token operator">+</span> <span class="token string">"---run invoked---"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> random <span class="token operator">=</span> <span class="token keyword">new</span> Random<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> domains <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token string">"blibli.com"</span><span class="token punctuation">,</span><span class="token string">"blibli.ke.qq.com"</span><span class="token punctuation">,</span><span class="token string">"github.com/apache"</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> ts <span class="token operator">=</span> System<span class="token punctuation">.</span>currentTimeMillis<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token number">1</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>collect<span class="token punctuation">(</span>Access<span class="token punctuation">(</span>ts<span class="token punctuation">,</span> domains<span class="token punctuation">(</span>random<span class="token punctuation">.</span>nextInt<span class="token punctuation">(</span>domains<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>nextInt<span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      Thread<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> cancel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    running <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> stream <span class="token operator">=</span> environment<span class="token punctuation">.</span>addSource<span class="token punctuation">(</span><span class="token keyword">new</span> AccessSourceV3<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//.setParallelism(3)</span>println<span class="token punctuation">(</span>stream<span class="token punctuation">.</span>parallelism<span class="token punctuation">)</span><span class="token keyword">val</span> filterStream <span class="token operator">=</span> stream<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>traffics <span class="token operator">></span> <span class="token number">200</span><span class="token punctuation">)</span>println<span class="token punctuation">(</span>filterStream<span class="token punctuation">.</span>parallelism<span class="token punctuation">)</span>filterStream<span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>自定义MySQL数据源:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>source<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Domain<span class="token punctuation">.</span>Student<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>MySQLUtils<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>Configuration<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>source<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>RichSourceFunction<span class="token punctuation">,</span> SourceFunction<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Connection<span class="token punctuation">,</span> PreparedStatement<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> MySQLSource <span class="token keyword">extends</span> RichSourceFunction<span class="token punctuation">[</span>Student<span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> connection<span class="token operator">:</span>Connection <span class="token operator">=</span> _  <span class="token keyword">var</span> pstmt<span class="token operator">:</span>PreparedStatement <span class="token operator">=</span> _  <span class="token keyword">override</span> <span class="token keyword">def</span> open<span class="token punctuation">(</span>parameters<span class="token operator">:</span> Configuration<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    connection <span class="token operator">=</span> MySQLUtils<span class="token punctuation">.</span>getConnection<span class="token punctuation">(</span><span class="token punctuation">)</span>    pstmt <span class="token operator">=</span> connection<span class="token punctuation">.</span>prepareStatement<span class="token punctuation">(</span><span class="token string">"select * from student"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    MySQLUtils<span class="token punctuation">.</span>closeConnection<span class="token punctuation">(</span>connection<span class="token punctuation">,</span> pstmt<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> run<span class="token punctuation">(</span>ctx<span class="token operator">:</span> SourceFunction<span class="token punctuation">.</span>SourceContext<span class="token punctuation">[</span>Student<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span>executeQuery<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span>getInt<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> name <span class="token operator">=</span> rs<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> age <span class="token operator">=</span> rs<span class="token punctuation">.</span>getInt<span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span>      ctx<span class="token punctuation">.</span>collect<span class="token punctuation">(</span>Student<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> cancel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> stream <span class="token operator">=</span> environment<span class="token punctuation">.</span>addSource<span class="token punctuation">(</span><span class="token keyword">new</span> MySQLSource<span class="token punctuation">)</span>println<span class="token punctuation">(</span>stream<span class="token punctuation">.</span>parallelism<span class="token punctuation">)</span>stream<span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch</title>
      <link href="2020/03/12/es-bu-shu/"/>
      <url>2020/03/12/es-bu-shu/</url>
      
        <content type="html"><![CDATA[<p>主配置文件:elasticsearch.yml</p><pre><code>node.name: warehouse001path.data: /home/hadoop/data/elasticsearchpath.logs: /home/hadoop/log/elasticsearchnetwork.host: 0.0.0.0http.port: 9200cluster.initial_master_nodes: [&quot;warehouse001&quot;]http.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;</code></pre><p>修改jvm配置文件:jvm.options</p><pre><code>#默认1g-Xms256M-Xmx256M</code></pre><p>启动:</p><p>./bin/elasticsearch</p><p>杀进程:</p><p>pkill -F pid</p><p>可以在启动时指定节点信息</p><p>插件安装:</p><p><a href="https://github.com/mobz/elasticsearch-head">mobz/elasticsearch-head: A web front end for an elastic search cluster (github.com)</a></p><p>按步骤来即可</p><p>kibana安装</p><p>修改config/kibana.yml</p><pre><code>server.name: &quot;warehouse001&quot;elasticsearch.hosts: [&quot;http://warehouse001:9200&quot;]</code></pre><p>启动:</p><p>bin/kibana</p><p><img src="C:\Users\10090\Desktop\blogimg\image-20210529032452550.png" alt="image-20210529032452550"></p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink WaterMarker</title>
      <link href="2020/03/05/flink05/"/>
      <url>2020/03/05/flink05/</url>
      
        <content type="html"><![CDATA[<p>EventTime使用时必须要有一个带时间的字段.</p><p>​    如果window是5s,从数据产生到flink会有一个延迟.那么具体要等多久,这就需要watermark.</p><p>开启WM必须要配置</p><pre class=" language-scala"><code class="language-scala">env<span class="token punctuation">.</span>setStreamTimeCharacteristic<span class="token punctuation">(</span>TimeCharacteristic<span class="token punctuation">.</span>EventTime<span class="token punctuation">)</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>watermark<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>AssignerWithPeriodicWatermarks<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>function<span class="token punctuation">.</span>RichWindowFunction<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>watermark<span class="token punctuation">.</span>Watermark<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>assigners<span class="token punctuation">.</span>TumblingEventTimeWindows<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>windows<span class="token punctuation">.</span>TimeWindow<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Timestamp<span class="token comment" spellcheck="true">/** * window触发条件： * wm >= win_end * [)有数据 * * * 无序： * 1) 默认是丢弃的 * 2) OutputTag   ==> HBase Redis  修数， * 3) * */</span><span class="token keyword">object</span> WatermarkCaseApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> environment <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span>getExecutionEnvironment    environment<span class="token punctuation">.</span>setParallelism<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> MAX_ALLOWED_UNORDERED_TIME <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span>    environment<span class="token punctuation">.</span>socketTextStream<span class="token punctuation">(</span><span class="token string">"ruozedata001"</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>        XX<span class="token punctuation">(</span>splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toDouble<span class="token punctuation">,</span> splits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> splits<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toLong<span class="token punctuation">,</span> splits<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>assignTimestampsAndWatermarks<span class="token punctuation">(</span><span class="token keyword">new</span> MyAssignerWithPeriodicWatermarks<span class="token punctuation">(</span>MAX_ALLOWED_UNORDERED_TIME<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>keyBy<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>window<span class="token punctuation">(</span>TumblingEventTimeWindows<span class="token punctuation">.</span>of<span class="token punctuation">(</span>Time<span class="token punctuation">.</span>seconds<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3秒一个窗口</span>      <span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">new</span> MyRichWindowFunction<span class="token punctuation">)</span>      <span class="token punctuation">.</span>print    environment<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getSimpleName<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> MyRichWindowFunction <span class="token keyword">extends</span>  RichWindowFunction<span class="token punctuation">[</span>XX<span class="token punctuation">,</span><span class="token builtin">String</span><span class="token punctuation">,</span>Tuple<span class="token punctuation">,</span>TimeWindow<span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> apply<span class="token punctuation">(</span>key<span class="token operator">:</span> Tuple<span class="token punctuation">,</span> window<span class="token operator">:</span> TimeWindow<span class="token punctuation">,</span> input<span class="token operator">:</span> Iterable<span class="token punctuation">[</span>XX<span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token operator">:</span> Collector<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> id <span class="token operator">=</span> key<span class="token punctuation">.</span>getField<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> totalCnt <span class="token operator">=</span> input<span class="token punctuation">.</span>size    <span class="token keyword">var</span> totalTmp <span class="token operator">=</span> <span class="token number">0.0</span>    input<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>x <span class="token keyword">=></span> totalTmp <span class="token operator">=</span> totalTmp <span class="token operator">+</span> x<span class="token punctuation">.</span>temperature<span class="token punctuation">)</span>    <span class="token keyword">val</span> avgTmp <span class="token operator">=</span> totalTmp <span class="token operator">/</span> totalCnt    out<span class="token punctuation">.</span>collect<span class="token punctuation">(</span>s<span class="token string">"温度测量仪$&amp;#123;id&amp;#125;, 测量到的平均体温$&amp;#123;avgTmp&amp;#125;, 窗口开始时间$&amp;#123;new Timestamp(window.getStart)&amp;#125;, 窗口结束时间$&amp;#123;new Timestamp(window.getEnd)&amp;#125;"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> MyAssignerWithPeriodicWatermarks<span class="token punctuation">(</span>maxAllowedUnorderedTime<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> AssignerWithPeriodicWatermarks<span class="token punctuation">[</span>XX<span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">var</span> maxTimeStamp<span class="token operator">:</span> <span class="token builtin">Long</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> getCurrentWatermark<span class="token operator">:</span> Watermark <span class="token operator">=</span> <span class="token keyword">new</span> Watermark<span class="token punctuation">(</span>maxTimeStamp <span class="token operator">-</span> maxAllowedUnorderedTime<span class="token punctuation">)</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> extractTimestamp<span class="token punctuation">(</span>element<span class="token operator">:</span> XX<span class="token punctuation">,</span> previousElementTimestamp<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Long</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> nowTime <span class="token operator">=</span> element<span class="token punctuation">.</span>time <span class="token operator">*</span> <span class="token number">1000</span>    maxTimeStamp <span class="token operator">=</span> maxTimeStamp<span class="token punctuation">.</span>max<span class="token punctuation">(</span>nowTime<span class="token punctuation">)</span>    println<span class="token punctuation">(</span>s<span class="token string">"数据时间:$&amp;#123;new Timestamp(nowTime)&amp;#125;,当前窗口最大元素时间:$&amp;#123;new Timestamp(maxTimeStamp)&amp;#125;, 当前元素携带的WM的时间$&amp;#123;new Timestamp(getCurrentWatermark.getTimestamp)&amp;#125;"</span><span class="token punctuation">)</span>    nowTime  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token keyword">class</span> XX<span class="token punctuation">(</span>id<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span>temperature<span class="token operator">:</span><span class="token builtin">Double</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span>time<span class="token operator">:</span><span class="token builtin">Long</span><span class="token punctuation">,</span>dst<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark Sreaming</title>
      <link href="2019/12/25/sparkstreaming01/"/>
      <url>2019/12/25/sparkstreaming01/</url>
      
        <content type="html"><![CDATA[<p>重点:</p><p>​    状态</p><p>​    数据一致性</p><p>​    容错</p><p>​    对接kafka</p><p>Spark是批处理为主,Flink是流处理为主的.</p><p>简单的WC案例:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>sparkstreaming<span class="token punctuation">.</span>basic<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Seconds<span class="token punctuation">,</span> StreamingContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> StreamingSocketWCApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> ssc <span class="token operator">=</span> <span class="token keyword">new</span> StreamingContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">,</span> Seconds<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 1. 对接数据源     */</span>    <span class="token keyword">val</span> lines <span class="token operator">=</span> ssc<span class="token punctuation">.</span>socketTextStream<span class="token punctuation">(</span><span class="token string">"warehouse001"</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 2. 业务逻辑处理     */</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> lines<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 3. 输出     */</span>    result<span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>注意:</p><p>When running a Spark Streaming program locally, do not use “local” or “local[1]” as the master URL. Either of these means that only one thread will be used for running tasks locally. If you are using an input DStream based on a receiver (e.g. sockets, Kafka, etc.), then the single thread will be used to run the receiver, leaving no thread for processing the received data. Hence, when running locally, always use “local[<em>n</em>]” as the master URL, where <em>n</em> &gt; number of receivers to run.</p><p>这里就是说我们本地跑的时候local[n], n必须大于你的receivers的个数.否则你的task没有资源去跑.</p><p>SparkStreaming转SparkSQL WC案例:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>sparkstreaming<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Seconds<span class="token punctuation">,</span> StreamingContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> SparkSQLStreamingApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>    <span class="token keyword">val</span> ssc <span class="token operator">=</span> <span class="token keyword">new</span> StreamingContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">,</span> Seconds<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> lines <span class="token operator">=</span> ssc<span class="token punctuation">.</span>socketTextStream<span class="token punctuation">(</span><span class="token string">"warehouse001"</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> words <span class="token operator">=</span> lines<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    words<span class="token punctuation">.</span>foreachRDD<span class="token punctuation">(</span>rdd <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Get the singleton instance of SparkSession</span>      <span class="token keyword">val</span> spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>config<span class="token punctuation">(</span>rdd<span class="token punctuation">.</span>sparkContext<span class="token punctuation">.</span>getConf<span class="token punctuation">)</span><span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_      <span class="token comment" spellcheck="true">// Convert RDD[String] to DataFrame</span>      <span class="token keyword">val</span> wordsDataFrame <span class="token operator">=</span> rdd<span class="token punctuation">.</span>toDF<span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// Create a temporary view</span>      wordsDataFrame<span class="token punctuation">.</span>createOrReplaceTempView<span class="token punctuation">(</span><span class="token string">"words"</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// Do word count on DataFrame using SQL and print it</span>      <span class="token keyword">val</span> wordCountsDataFrame <span class="token operator">=</span>        spark<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"select word, count(*) as total from words group by word"</span><span class="token punctuation">)</span>      wordCountsDataFrame<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>批处理实现黑名单过滤:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>sparkstreaming<span class="token punctuation">.</span>basic<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token punctuation">.</span>ListBuffer<span class="token comment" spellcheck="true">/** * 黑名单列表: zhangsan      => (zhangsan,true) * 日志数据: * 20300101,zhangsan        => (zhangsan,20300101) * 20300101,lisi * * 实现: * 2. join  前提需要是KV类型 * 1. 广播 */</span><span class="token keyword">object</span> BlackApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 黑名单列表</span>    <span class="token keyword">val</span> black <span class="token operator">=</span> <span class="token keyword">new</span> ListBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    black<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> blackRDD <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>black<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 访问日志</span>    <span class="token keyword">val</span> access <span class="token operator">=</span> <span class="token keyword">new</span> ListBuffer<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    access<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"20300101,zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    access<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token string">"20300101,lisi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> accessRDD <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>access<span class="token punctuation">)</span>    accessRDD<span class="token punctuation">.</span>leftOuterJoin<span class="token punctuation">(</span>blackRDD<span class="token punctuation">)</span>      <span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>      <span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>使用流的方式实现:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>sparkstreaming<span class="token punctuation">.</span>basic<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Seconds<span class="token punctuation">,</span> StreamingContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> TransformApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>    <span class="token keyword">val</span> ssc <span class="token operator">=</span> <span class="token keyword">new</span> StreamingContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">,</span> Seconds<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> lines <span class="token operator">=</span> ssc<span class="token punctuation">.</span>socketTextStream<span class="token punctuation">(</span><span class="token string">"warehouse001"</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> words <span class="token operator">=</span> lines<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    words.transform()</span>    <span class="token keyword">val</span> black <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> blackRDD <span class="token operator">=</span> ssc<span class="token punctuation">.</span>sparkContext<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>black<span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    lines<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token punctuation">(</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span>rdd <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      rdd<span class="token punctuation">.</span>leftOuterJoin<span class="token punctuation">(</span>blackRDD<span class="token punctuation">)</span>        <span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>之前的各种操作都不会保存之前批次的状态,也就是结果不会累计.而累计就需要使用updateStateByKey.</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>sparkstreaming<span class="token punctuation">.</span>basic<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Seconds<span class="token punctuation">,</span> StreamingContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> UpdateStateByKeyApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>    <span class="token keyword">val</span> ssc <span class="token operator">=</span> <span class="token keyword">new</span> StreamingContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">,</span> Seconds<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 只有涉及state都需要设置checkpoint目录</span>    ssc<span class="token punctuation">.</span>checkpoint<span class="token punctuation">(</span><span class="token string">"chk"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> lines <span class="token operator">=</span> ssc<span class="token punctuation">.</span>socketTextStream<span class="token punctuation">(</span><span class="token string">"warehouse001"</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> words <span class="token operator">=</span> lines<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>updateStateByKey<span class="token punctuation">(</span>updateFunction<span class="token punctuation">)</span>      <span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> updateFunction<span class="token punctuation">(</span>newValues<span class="token operator">:</span>Seq<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> preValues<span class="token operator">:</span>Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> current <span class="token operator">=</span> newValues<span class="token punctuation">.</span>sum    <span class="token keyword">val</span> pre <span class="token operator">=</span> preValues<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    Some<span class="token punctuation">(</span>current <span class="token operator">+</span> pre<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>增量更新,只拿本批次变化的数据:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>sparkstreaming<span class="token punctuation">.</span>basic<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Seconds<span class="token punctuation">,</span> State<span class="token punctuation">,</span> StateSpec<span class="token punctuation">,</span> StreamingContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> MapWithStateApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>    <span class="token keyword">val</span> ssc <span class="token operator">=</span> <span class="token keyword">new</span> StreamingContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">,</span> Seconds<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 只有涉及state都需要设置checkpoint目录</span>    ssc<span class="token punctuation">.</span>checkpoint<span class="token punctuation">(</span><span class="token string">"chk"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> lines <span class="token operator">=</span> ssc<span class="token punctuation">.</span>socketTextStream<span class="token punctuation">(</span><span class="token string">"warehouse001"</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> words <span class="token operator">=</span> lines<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>mapWithState<span class="token punctuation">(</span>StateSpec<span class="token punctuation">.</span>function<span class="token punctuation">(</span>mappingFunction<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// (word,sum)更新回去</span>  <span class="token keyword">val</span> mappingFunction <span class="token operator">=</span> <span class="token punctuation">(</span>word<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> value<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> state<span class="token operator">:</span> State<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>isTimingOut<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span><span class="token string">"...isTimeOut..."</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> sum <span class="token operator">=</span> value<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> state<span class="token punctuation">.</span>getOption<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span>word<span class="token punctuation">,</span>sum<span class="token punctuation">)</span>      state<span class="token punctuation">.</span>update<span class="token punctuation">(</span>sum<span class="token punctuation">)</span>      tmp    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>之前的updateStateByKey如果程序重启数据则会重新计算,原因是没有读取checkpoint的目录,所以还需要修改:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>sparkstreaming<span class="token punctuation">.</span>basic<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Seconds<span class="token punctuation">,</span> StreamingContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> UpdateStateByKeyV2App <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> checkpointDir <span class="token operator">=</span> <span class="token string">"chk1"</span>    <span class="token keyword">def</span> functionToCreateContext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> StreamingContext <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>      <span class="token keyword">val</span> ssc <span class="token operator">=</span> <span class="token keyword">new</span> StreamingContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">,</span> Seconds<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 只有涉及state都需要设置checkpoint目录</span>      ssc<span class="token punctuation">.</span>checkpoint<span class="token punctuation">(</span>checkpointDir<span class="token punctuation">)</span>      <span class="token keyword">val</span> lines <span class="token operator">=</span> ssc<span class="token punctuation">.</span>socketTextStream<span class="token punctuation">(</span><span class="token string">"warehouse001"</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> words <span class="token operator">=</span> lines<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>updateStateByKey<span class="token punctuation">(</span>updateFunction<span class="token punctuation">)</span>        <span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>      ssc    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> ssc <span class="token operator">=</span> StreamingContext<span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span>checkpointDir<span class="token punctuation">,</span>functionToCreateContext _<span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> updateFunction<span class="token punctuation">(</span>newValues<span class="token operator">:</span>Seq<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> preValues<span class="token operator">:</span>Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> current <span class="token operator">=</span> newValues<span class="token punctuation">.</span>sum    <span class="token keyword">val</span> pre <span class="token operator">=</span> preValues<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    Some<span class="token punctuation">(</span>current <span class="token operator">+</span> pre<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark Sreaming对接kafka管理offset</title>
      <link href="2019/12/25/sparkstreaming02/"/>
      <url>2019/12/25/sparkstreaming02/</url>
      
        <content type="html"><![CDATA[<p>SparkStreaming对接kafka:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>sparkstreaming<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>offset<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>StringDeserializer<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>kafka010<span class="token punctuation">.</span>ConsumerStrategies<span class="token punctuation">.</span>Subscribe<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>kafka010<span class="token punctuation">.</span>LocationStrategies<span class="token punctuation">.</span>PreferConsistent<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>kafka010<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Seconds<span class="token punctuation">,</span> StreamingContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> OffSetApp01 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>      <span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"spark.serializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.spark.serializer.KryoSerializer"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> ssc <span class="token operator">=</span> <span class="token keyword">new</span> StreamingContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">,</span> Seconds<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> kafkaParams <span class="token operator">=</span> Map<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> Object<span class="token punctuation">]</span><span class="token punctuation">(</span>      <span class="token string">"bootstrap.servers"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"warehouse001:9092,warehouse001:9093,warehouse001:9094"</span><span class="token punctuation">,</span>      <span class="token string">"key.deserializer"</span> <span class="token operator">-</span><span class="token operator">></span> classOf<span class="token punctuation">[</span>StringDeserializer<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"value.deserializer"</span> <span class="token operator">-</span><span class="token operator">></span> classOf<span class="token punctuation">[</span>StringDeserializer<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"group.id"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"use_a_separate_group_id_for_each_stream"</span><span class="token punctuation">,</span>      <span class="token string">"auto.offset.reset"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"earliest"</span><span class="token punctuation">,</span>      <span class="token string">"enable.auto.commit"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token operator">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token builtin">Boolean</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">val</span> topics <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token string">"sparkstreaming"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> stream <span class="token operator">=</span> KafkaUtils<span class="token punctuation">.</span>createDirectStream<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span>      ssc<span class="token punctuation">,</span>      PreferConsistent<span class="token punctuation">,</span>      Subscribe<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span>topics<span class="token punctuation">,</span> kafkaParams<span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//stream.map(_.value()).print()</span>    stream<span class="token punctuation">.</span>foreachRDD<span class="token punctuation">(</span>rdd <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rdd<span class="token punctuation">.</span>isEmpty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * TODO 获取offset         *         * 你想要真正获取offset的话,这个RDD一定是KafkaRDD         * driver端执行          */</span>        <span class="token keyword">val</span> offsetRanges <span class="token operator">=</span> rdd<span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>HasOffsetRanges<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetRanges        offsetRanges<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          println<span class="token punctuation">(</span>s<span class="token string">"$&amp;#123;x.topic&amp;#125;, $&amp;#123;x.partition&amp;#125;, $&amp;#123;x.fromOffset&amp;#125;, $&amp;#123;x.untilOffset&amp;#125;"</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// TODO 业务逻辑 executor执行</span>        rdd<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// TODO 提交offset  commitAsync不能做到一次存储,会有一定的风险 driver端执行</span>        stream<span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>CanCommitOffsets<span class="token punctuation">]</span><span class="token punctuation">.</span>commitAsync<span class="token punctuation">(</span>offsetRanges<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println<span class="token punctuation">(</span><span class="token string">"该批次没有数据"</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>commitAsync这里是异步的,不能保证精准一次性消费.</p><p>创建Producer造数据:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>utils<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>KafkaProducer<span class="token punctuation">,</span> ProducerRecord<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token keyword">import</span> scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token keyword">object</span> KafkaDataGenerator <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>KafkaDataGenerator<span class="token punctuation">.</span>getClass<span class="token punctuation">)</span>    <span class="token keyword">val</span> props <span class="token operator">=</span> <span class="token keyword">new</span> Properties<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> <span class="token string">"warehouse001:9092, warehouse001:9093,warehouse001:9094"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"acks"</span><span class="token punctuation">,</span> <span class="token string">"all"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"key.serializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"value.serializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> KafkaProducer<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      Thread<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> word <span class="token operator">=</span> <span class="token builtin">String</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> Random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>nextInt<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toChar<span class="token punctuation">)</span>      <span class="token keyword">val</span> part <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">3</span>      logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"word:&amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> word<span class="token punctuation">)</span>      <span class="token keyword">val</span> record <span class="token operator">=</span> <span class="token keyword">new</span> ProducerRecord<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"sskafka"</span><span class="token punctuation">,</span> part<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> word<span class="token punctuation">)</span>      producer<span class="token punctuation">.</span>send<span class="token punctuation">(</span>record<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span><span class="token string">"producer send success!"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>设置checkpoint并进行优化:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>sparkstreaming<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>offset<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>StringDeserializer<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>kafka010<span class="token punctuation">.</span>ConsumerStrategies<span class="token punctuation">.</span>Subscribe<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>kafka010<span class="token punctuation">.</span>LocationStrategies<span class="token punctuation">.</span>PreferConsistent<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>kafka010<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Seconds<span class="token punctuation">,</span> StreamingContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> OffSetApp02 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> checkpointDir <span class="token operator">=</span> <span class="token string">"chk2"</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>      <span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"spark.serializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.spark.serializer.KryoSerializer"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> ssc <span class="token operator">=</span> <span class="token keyword">new</span> StreamingContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">,</span> Seconds<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>checkpoint<span class="token punctuation">(</span>checkpointDir<span class="token punctuation">)</span>    <span class="token keyword">val</span> kafkaParams <span class="token operator">=</span> Map<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> Object<span class="token punctuation">]</span><span class="token punctuation">(</span>      <span class="token string">"bootstrap.servers"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"warehouse001:9092"</span><span class="token punctuation">,</span>      <span class="token string">"key.deserializer"</span> <span class="token operator">-</span><span class="token operator">></span> classOf<span class="token punctuation">[</span>StringDeserializer<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"value.deserializer"</span> <span class="token operator">-</span><span class="token operator">></span> classOf<span class="token punctuation">[</span>StringDeserializer<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"group.id"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"use_a_separate_group_id_for_each_stream"</span><span class="token punctuation">,</span>      <span class="token string">"auto.offset.reset"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"earliest"</span><span class="token punctuation">,</span>      <span class="token string">"enable.auto.commit"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token operator">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token builtin">Boolean</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">val</span> topics <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token string">"sskafka"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> stream <span class="token operator">=</span> KafkaUtils<span class="token punctuation">.</span>createDirectStream<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span>      ssc<span class="token punctuation">,</span>      PreferConsistent<span class="token punctuation">,</span>      Subscribe<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span>topics<span class="token punctuation">,</span> kafkaParams<span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">var</span> offsetRange<span class="token operator">:</span>Array<span class="token punctuation">[</span>OffsetRange<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">val</span> transformDStream <span class="token operator">=</span> stream<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>rdd <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      offsetRange <span class="token operator">=</span> rdd<span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>HasOffsetRanges<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetRanges      offsetRange<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println<span class="token punctuation">(</span>s<span class="token string">"$&amp;#123;x.topic&amp;#125;, $&amp;#123;x.partition&amp;#125;, $&amp;#123;x.fromOffset&amp;#125;, $&amp;#123;x.untilOffset&amp;#125;"</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      rdd    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> transformDStream<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>updateStateByKey<span class="token punctuation">(</span>updateFunction<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//stream.map(_.value()).print()</span>    result<span class="token punctuation">.</span>foreachRDD<span class="token punctuation">(</span>rdd <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rdd<span class="token punctuation">.</span>isEmpty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO 业务逻辑 executor执行</span>        rdd<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// TODO 提交offset  commitAsync不能做到一次存储,会有一定的风险 driver端执行</span>        stream<span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>CanCommitOffsets<span class="token punctuation">]</span><span class="token punctuation">.</span>commitAsync<span class="token punctuation">(</span>offsetRange<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println<span class="token punctuation">(</span><span class="token string">"该批次没有数据"</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> updateFunction<span class="token punctuation">(</span>newValues<span class="token operator">:</span>Seq<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> preValues<span class="token operator">:</span>Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> current <span class="token operator">=</span> newValues<span class="token punctuation">.</span>sum    <span class="token keyword">val</span> pre <span class="token operator">=</span> preValues<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    Some<span class="token punctuation">(</span>current <span class="token operator">+</span> pre<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>对于业务逻辑的处理结果也分为两种:</p><ol><li>聚合: 数据可以拉取到driver,然后进行保存</li><li>非聚合: 数据量是巨大的,不能直接拉到driver.</li></ol><p>维护偏移量到MySQL,并业务结果输出MySQL并确保extactly Once:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>sparkstreaming<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>offset<span class="token keyword">import</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>MySQLUtils<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>TopicPartition<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>StringDeserializer<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>kafka010<span class="token punctuation">.</span>ConsumerStrategies<span class="token punctuation">.</span>Subscribe<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>kafka010<span class="token punctuation">.</span>LocationStrategies<span class="token punctuation">.</span>PreferConsistent<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>kafka010<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Seconds<span class="token punctuation">,</span> StreamingContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Connection<span class="token punctuation">,</span> PreparedStatement<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token keyword">object</span> OffSetApp03 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> checkpointDir <span class="token operator">=</span> <span class="token string">"chk2"</span>    <span class="token keyword">val</span> groupid <span class="token operator">=</span> <span class="token string">"ss_toMySQL"</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>      <span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"spark.serializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.spark.serializer.KryoSerializer"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> ssc <span class="token operator">=</span> <span class="token keyword">new</span> StreamingContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">,</span> Seconds<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>checkpoint<span class="token punctuation">(</span>checkpointDir<span class="token punctuation">)</span>    <span class="token keyword">val</span> kafkaParams <span class="token operator">=</span> Map<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> Object<span class="token punctuation">]</span><span class="token punctuation">(</span>      <span class="token string">"bootstrap.servers"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"warehouse001:9092, warehouse001:9093,warehouse001:9094"</span><span class="token punctuation">,</span>      <span class="token string">"key.deserializer"</span> <span class="token operator">-</span><span class="token operator">></span> classOf<span class="token punctuation">[</span>StringDeserializer<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"value.deserializer"</span> <span class="token operator">-</span><span class="token operator">></span> classOf<span class="token punctuation">[</span>StringDeserializer<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"group.id"</span> <span class="token operator">-</span><span class="token operator">></span> groupid<span class="token punctuation">,</span>      <span class="token string">"auto.offset.reset"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"earliest"</span><span class="token punctuation">,</span>      <span class="token string">"enable.auto.commit"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token operator">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token builtin">Boolean</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取MySQL中的offset</span>    <span class="token keyword">val</span> topic <span class="token operator">=</span> <span class="token string">"sskafka"</span>    <span class="token keyword">val</span> topics <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token string">"sskafka"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> offsets <span class="token operator">=</span> <span class="token keyword">new</span> mutable<span class="token punctuation">.</span>HashMap<span class="token punctuation">[</span>TopicPartition<span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    : collection.Map[TopicPartition, Long] = null</span>    <span class="token keyword">var</span> connection<span class="token operator">:</span>Connection <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">var</span> pstmt<span class="token operator">:</span>PreparedStatement <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      connection <span class="token operator">=</span> MySQLUtils<span class="token punctuation">.</span>getConnection<span class="token punctuation">(</span><span class="token punctuation">)</span>      pstmt <span class="token operator">=</span> connection<span class="token punctuation">.</span>prepareStatement<span class="token punctuation">(</span><span class="token string">"select * from offset_storage where groupid = ? and topic = ?"</span><span class="token punctuation">)</span>      pstmt<span class="token punctuation">.</span>setString<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> groupid<span class="token punctuation">)</span>      pstmt<span class="token punctuation">.</span>setString<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> topic<span class="token punctuation">)</span>      <span class="token keyword">val</span> rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span>executeQuery<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> topic <span class="token operator">=</span> rs<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> groupid <span class="token operator">=</span> rs<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token string">"groupid"</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> partitions <span class="token operator">=</span> rs<span class="token punctuation">.</span>getInt<span class="token punctuation">(</span><span class="token string">"partitions"</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> offset <span class="token operator">=</span> rs<span class="token punctuation">.</span>getLong<span class="token punctuation">(</span><span class="token string">"offset"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//        println(s"$topic, $groupid, $partitions, $offset")</span>        <span class="token keyword">val</span> topicPartition <span class="token operator">=</span> <span class="token keyword">new</span> TopicPartition<span class="token punctuation">(</span>topic<span class="token punctuation">,</span> partitions<span class="token punctuation">)</span>        offsets<span class="token punctuation">(</span>topicPartition<span class="token punctuation">)</span> <span class="token operator">=</span> offset      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> e<span class="token operator">:</span>Exception <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span>printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span>        connection<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> pstmt<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> connection<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> stream <span class="token operator">=</span> KafkaUtils<span class="token punctuation">.</span>createDirectStream<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span>      ssc<span class="token punctuation">,</span>      PreferConsistent<span class="token punctuation">,</span>      Subscribe<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span>topics<span class="token punctuation">,</span> kafkaParams<span class="token punctuation">,</span> offsets<span class="token punctuation">)</span>    <span class="token punctuation">)</span>    stream<span class="token punctuation">.</span>foreachRDD<span class="token punctuation">(</span>rdd <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rdd<span class="token punctuation">.</span>isEmpty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> offsetRanges <span class="token operator">=</span> rdd<span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>HasOffsetRanges<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetRanges        offsetRanges<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          println<span class="token punctuation">(</span>s<span class="token string">"$&amp;#123;x.topic&amp;#125;, $&amp;#123;x.partition&amp;#125;, $&amp;#123;x.fromOffset&amp;#125;, $&amp;#123;x.untilOffset&amp;#125;"</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 业务逻辑</span>        <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>        result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// commit offsets</span>        <span class="token keyword">var</span> connection<span class="token operator">:</span>Connection <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">var</span> pstm1<span class="token operator">:</span>PreparedStatement <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">var</span> pstm2<span class="token operator">:</span>PreparedStatement <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">val</span> groupid <span class="token operator">=</span> <span class="token string">"ss_toMySQL"</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          connection <span class="token operator">=</span> MySQLUtils<span class="token punctuation">.</span>getConnection<span class="token punctuation">(</span><span class="token punctuation">)</span>          connection<span class="token punctuation">.</span>setAutoCommit<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>          <span class="token keyword">val</span> sql <span class="token operator">=</span> <span class="token string">"insert into wc(word,cnt) values(?,?) on duplicate key update cnt = cnt + ?"</span>          pstm1 <span class="token operator">=</span> connection<span class="token punctuation">.</span>prepareStatement<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>ele <span class="token keyword">&lt;-</span> result<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pstm1<span class="token punctuation">.</span>setString<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>ele<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>            pstm1<span class="token punctuation">.</span>setInt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>ele<span class="token punctuation">.</span>_2<span class="token punctuation">)</span>            pstm1<span class="token punctuation">.</span>setInt<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>ele<span class="token punctuation">.</span>_2<span class="token punctuation">)</span>            pstm1<span class="token punctuation">.</span>addBatch<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          pstm1<span class="token punctuation">.</span>executeBatch<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">val</span> sql1 <span class="token operator">=</span> <span class="token string">"insert into offset_storage(topic,groupid,partitions,offset) values(?,?,?,?) on duplicate key update offset = ?"</span>          pstm2 <span class="token operator">=</span> connection<span class="token punctuation">.</span>prepareStatement<span class="token punctuation">(</span>sql1<span class="token punctuation">)</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>ele <span class="token keyword">&lt;-</span> offsetRanges<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pstm2<span class="token punctuation">.</span>setString<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>ele<span class="token punctuation">.</span>topic<span class="token punctuation">)</span>            pstm2<span class="token punctuation">.</span>setString<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>groupid<span class="token punctuation">)</span>            pstm2<span class="token punctuation">.</span>setInt<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>ele<span class="token punctuation">.</span>partition<span class="token punctuation">)</span>            pstm2<span class="token punctuation">.</span>setLong<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>ele<span class="token punctuation">.</span>untilOffset<span class="token punctuation">)</span>            pstm2<span class="token punctuation">.</span>setLong<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>ele<span class="token punctuation">.</span>untilOffset<span class="token punctuation">)</span>            pstm2<span class="token punctuation">.</span>addBatch<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          pstm2<span class="token punctuation">.</span>executeBatch<span class="token punctuation">(</span><span class="token punctuation">)</span>          connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> e<span class="token operator">:</span>Exception <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span>printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span>            connection<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> pstm1<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pstm1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> pstm2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pstm2<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> connection<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println<span class="token punctuation">(</span><span class="token string">"该批次没有数据"</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark Sreaming Structure</title>
      <link href="2019/12/25/sparkstreamingstruct01/"/>
      <url>2019/12/25/sparkstreamingstruct01/</url>
      
        <content type="html"><![CDATA[<p>WC案例:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sss<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>OutputMode<span class="token keyword">object</span> WCApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>appName<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>      <span class="token punctuation">.</span>config<span class="token punctuation">(</span><span class="token string">"spark.sql.shuffle.partitions"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>master<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_    <span class="token keyword">val</span> lines <span class="token operator">=</span> spark<span class="token punctuation">.</span>readStream<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"socket"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">,</span> <span class="token string">"warehouse001"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    val result = lines.as[String].flatMap(_.split(","))</span><span class="token comment" spellcheck="true">//      .groupBy("value")</span><span class="token comment" spellcheck="true">//      .count()</span>    <span class="token comment" spellcheck="true">// spark-sql操作</span>    lines<span class="token punctuation">.</span>as<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>createOrReplaceTempView<span class="token punctuation">(</span><span class="token string">"wc"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> spark<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"select value,count(1) from wc group by value"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * complete: 会把之前所有的数据都输出的     * Update: 只更新本次出现的     */</span>    result<span class="token punctuation">.</span>writeStream<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"console"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>outputMode<span class="token punctuation">(</span>OutputMode<span class="token punctuation">.</span>Complete<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      .outputMode("complete")</span>      <span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>不带聚合类操作outputMode(“apend”)是可以的,但是带聚合就会报错.</p><p>complete是不支持没有任何的聚合的场景.</p><p>update只更新本批次出现的数据,也就是增量数据.</p><p>综合来说update最常用.</p><p>SSS对接csv:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sss<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>OutputMode<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>types<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>IntegerType<span class="token punctuation">,</span> StringType<span class="token punctuation">,</span> StructType<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> SourceApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>appName<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>      <span class="token punctuation">.</span>config<span class="token punctuation">(</span><span class="token string">"spark.sql.shuffle.partitions"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>master<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_    <span class="token keyword">val</span> schema <span class="token operator">=</span> <span class="token keyword">new</span> StructType<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"deptno"</span><span class="token punctuation">,</span> IntegerType<span class="token punctuation">)</span>      <span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"dname"</span><span class="token punctuation">,</span> StringType<span class="token punctuation">)</span>      <span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"loc"</span><span class="token punctuation">,</span> StringType<span class="token punctuation">)</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> spark<span class="token punctuation">.</span>readStream<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"csv"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>schema<span class="token punctuation">(</span>schema<span class="token punctuation">)</span>      <span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span><span class="token string">"deptno"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>    result<span class="token punctuation">.</span>writeStream<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"console"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>outputMode<span class="token punctuation">(</span>OutputMode<span class="token punctuation">.</span>Update<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//      .outputMode("complete")</span>      <span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>window and watermark:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sss<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>window<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>OutputMode<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>types<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>IntegerType<span class="token punctuation">,</span> StringType<span class="token punctuation">,</span> StructType<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Timestamp<span class="token keyword">object</span> WindowApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>appName<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>      <span class="token punctuation">.</span>config<span class="token punctuation">(</span><span class="token string">"spark.sql.shuffle.partitions"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>master<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_    spark<span class="token punctuation">.</span>readStream<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"socket"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">,</span> <span class="token string">"warehouse001"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>as<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span>Timestamp<span class="token punctuation">.</span>valueOf<span class="token punctuation">(</span>splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toDF<span class="token punctuation">(</span><span class="token string">"ts"</span><span class="token punctuation">,</span> <span class="token string">"word"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>withWatermark<span class="token punctuation">(</span><span class="token string">"ts"</span><span class="token punctuation">,</span> <span class="token string">"10 minutes"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span>        window<span class="token punctuation">(</span>$<span class="token string">"ts"</span><span class="token punctuation">,</span> <span class="token string">"10 minutes"</span><span class="token punctuation">,</span> <span class="token string">"5 minutes"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        $<span class="token string">"word"</span>      <span class="token punctuation">)</span>      <span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token string">"window"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>writeStream<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"console"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      .outputMode(OutputMode.Update())</span>      <span class="token punctuation">.</span>outputMode<span class="token punctuation">(</span><span class="token string">"complete"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>watermark主要用来处理数据乱序的问题,数据延迟到达的情况.</p><p>watermark = max event time - late threshold.</p><p>join案例:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sss<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>window<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>OutputMode<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Timestamp<span class="token keyword">object</span> JoinApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>appName<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>      <span class="token punctuation">.</span>config<span class="token punctuation">(</span><span class="token string">"spark.sql.shuffle.partitions"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>master<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_    <span class="token keyword">val</span> staticDS <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"csv"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"inferSchema"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"data/csv/customer.csv"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>as<span class="token punctuation">[</span>Customer<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// a,1,100,10  第二个字段和customerId Join</span>    <span class="token keyword">val</span> streamDS <span class="token operator">=</span> spark<span class="token punctuation">.</span>readStream<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"socket"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">,</span> <span class="token string">"warehouse001"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>as<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>        Sales<span class="token punctuation">(</span>splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span>splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toInt<span class="token punctuation">,</span>splits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toInt<span class="token punctuation">,</span>splits<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toDouble<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    streamDS<span class="token punctuation">.</span>join<span class="token punctuation">(</span>staticDS<span class="token punctuation">,</span>Seq<span class="token punctuation">(</span><span class="token string">"customerId"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"left"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>writeStream<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"console"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>outputMode<span class="token punctuation">(</span>OutputMode<span class="token punctuation">.</span>Append<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      .outputMode("complete")</span>      <span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token keyword">class</span> Customer<span class="token punctuation">(</span>customerId<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> customerName<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token keyword">class</span> Sales<span class="token punctuation">(</span>itemId<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> customerId<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> amount<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> money<span class="token operator">:</span><span class="token builtin">Double</span><span class="token punctuation">)</span></code></pre><p>stream join stream:</p><pre><code>重点:1.数据需要临时存在某个地方2.需要window+watermark3.event time在同一个window里面才可以  延迟是要通过watermark来控制</code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">def</span> test02<span class="token punctuation">(</span>spark<span class="token operator">:</span> SparkSession<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_    <span class="token keyword">val</span> staticDS <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"csv"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"inferSchema"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"data/csv/customer.csv"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>as<span class="token punctuation">[</span>Customer<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">/**     * zhangsan,m,2030-11-09 20:00:00     * lisi,m,2030-11-09 20:01:00     * wangwu,m,2030-11-09 20:01:00     */</span>    <span class="token keyword">val</span> left <span class="token operator">=</span> spark<span class="token punctuation">.</span>readStream<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"socket"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">,</span> <span class="token string">"warehouse001"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>as<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span>splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toInt<span class="token punctuation">,</span> Timestamp<span class="token punctuation">.</span>valueOf<span class="token punctuation">(</span>splits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toDF<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> <span class="token string">"ts"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>withWatermark<span class="token punctuation">(</span><span class="token string">"ts"</span><span class="token punctuation">,</span> <span class="token string">"2 minutes"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * zhangsan,30,2030-11-09 20:00:00     * lisi,18,2030-11-09 20:00:00     * zhaoliu,50,2030-11-09 20:00:00     */</span>    <span class="token keyword">val</span> right <span class="token operator">=</span> spark<span class="token punctuation">.</span>readStream<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"socket"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">,</span> <span class="token string">"warehouse001"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token number">9528</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>as<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span>splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toInt<span class="token punctuation">,</span> Timestamp<span class="token punctuation">.</span>valueOf<span class="token punctuation">(</span>splits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toDF<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"ts"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>withWatermark<span class="token punctuation">(</span><span class="token string">"ts"</span><span class="token punctuation">,</span> <span class="token string">"2 minutes"</span><span class="token punctuation">)</span>    left<span class="token punctuation">.</span>join<span class="token punctuation">(</span>right<span class="token punctuation">,</span> Seq<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"left"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>writeStream<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"console"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>outputMode<span class="token punctuation">(</span>OutputMode<span class="token punctuation">.</span>Append<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//            .outputMode("complete")</span>      <span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>SSS sink案例:</p><p>json:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sss<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>OutputMode<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>types<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>IntegerType<span class="token punctuation">,</span> StringType<span class="token punctuation">,</span> StructType<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> SinkApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>appName<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>      <span class="token punctuation">.</span>config<span class="token punctuation">(</span><span class="token string">"spark.sql.shuffle.partitions"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>master<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>      test01<span class="token punctuation">(</span>spark<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> test01<span class="token punctuation">(</span>spark<span class="token operator">:</span>SparkSession<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_    <span class="token comment" spellcheck="true">/**     * zs,ls,ww     */</span>    spark<span class="token punctuation">.</span>readStream<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"socket"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">,</span> <span class="token string">"warehouse001"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>as<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span>      <span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token string">"hello ..."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>toDF<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"sayhello"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>writeStream      <span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">,</span> <span class="token string">"output/json"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"checkpointLocation"</span><span class="token punctuation">,</span><span class="token string">"chk1"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>memory:</p><pre class=" language-scala"><code class="language-scala"> <span class="token keyword">def</span> test02<span class="token punctuation">(</span>spark<span class="token operator">:</span>SparkSession<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_    <span class="token comment" spellcheck="true">/**     * zs,ls,ww     */</span>    <span class="token keyword">val</span> query <span class="token operator">=</span> spark<span class="token punctuation">.</span>readStream<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"socket"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">,</span> <span class="token string">"warehouse001"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>as<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span>      <span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>writeStream      <span class="token punctuation">.</span>outputMode<span class="token punctuation">(</span>OutputMode<span class="token punctuation">.</span>Complete<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"memory"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>queryName<span class="token punctuation">(</span><span class="token string">"memory_wc"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      while (true) &amp;#123;</span><span class="token comment" spellcheck="true">//        Thread.sleep(3000)</span><span class="token comment" spellcheck="true">//        spark.sql("select * from memory_wc")</span><span class="token comment" spellcheck="true">//      &amp;#125;</span>    <span class="token keyword">val</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> Timer<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> timerTask <span class="token operator">=</span> <span class="token keyword">new</span> TimerTask <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">override</span> <span class="token keyword">def</span> run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        spark<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"select * from memory_wc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    timer<span class="token punctuation">.</span>scheduleAtFixedRate<span class="token punctuation">(</span>timerTask<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>    query<span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>foreachBatch对接MySQL等:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">def</span> test04<span class="token punctuation">(</span>spark<span class="token operator">:</span>SparkSession<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_  <span class="token keyword">val</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> Properties<span class="token punctuation">(</span><span class="token punctuation">)</span>  properties<span class="token punctuation">.</span>setProperty<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span>  properties<span class="token punctuation">.</span>setProperty<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"ruozedata"</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> query <span class="token operator">=</span> spark<span class="token punctuation">.</span>readStream<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"socket"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">,</span> <span class="token string">"warehouse001"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>as<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span>    <span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>writeStream    <span class="token punctuation">.</span>outputMode<span class="token punctuation">(</span>OutputMode<span class="token punctuation">.</span>Update<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>foreachBatch<span class="token punctuation">(</span><span class="token punctuation">(</span>df<span class="token operator">:</span>DataFrame<span class="token punctuation">,</span> batchId<span class="token operator">:</span><span class="token builtin">Long</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>df<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1</span>        df<span class="token punctuation">.</span>write<span class="token punctuation">.</span>json<span class="token punctuation">(</span>s<span class="token string">"out/json/$batchId"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 2</span>        df<span class="token punctuation">.</span>write<span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token string">"overwrite"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>jdbc<span class="token punctuation">(</span><span class="token string">"jdbc:mysql://warehouse001:3306/test"</span><span class="token punctuation">,</span><span class="token string">"sss_wc"</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>sss对接kafka:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">def</span> test05<span class="token punctuation">(</span>spark<span class="token operator">:</span>SparkSession<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_  <span class="token keyword">val</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> Properties<span class="token punctuation">(</span><span class="token punctuation">)</span>  properties<span class="token punctuation">.</span>setProperty<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span>  properties<span class="token punctuation">.</span>setProperty<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"ruozedata"</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> query <span class="token operator">=</span> spark<span class="token punctuation">.</span>readStream<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"socket"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">,</span> <span class="token string">"warehouse001"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>as<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span>    <span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>map<span class="token punctuation">(</span>row <span class="token keyword">=></span> row<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> row<span class="token punctuation">.</span>getLong<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>writeStream    <span class="token punctuation">.</span>outputMode<span class="token punctuation">(</span>OutputMode<span class="token punctuation">.</span>Update<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"kafka"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"kafka.bootstrap.servers"</span><span class="token punctuation">,</span> <span class="token string">"warehouse001:9092,warehouse001:9093,warehouse001:9094"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">,</span> <span class="token string">"kafkasss"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"checkpointLocation"</span><span class="token punctuation">,</span><span class="token string">"chk3"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sparrk对接HBase</title>
      <link href="2019/12/21/spark-dui-jie-hbase/"/>
      <url>2019/12/21/spark-dui-jie-hbase/</url>
      
        <content type="html"><![CDATA[<p>关键类:<br>BaseRelation<br>RelationProvider</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>source<span class="token keyword">package</span> <span class="token keyword">object</span> hbase <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token keyword">class</span> SparkSchema<span class="token punctuation">(</span>fieldName<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> fieldType<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>source<span class="token punctuation">.</span>hbase<span class="token keyword">object</span> HBaseSourceUtils <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * @param sparkTableSchema (age int, name string, sex string)   * @return   */</span>  <span class="token keyword">def</span> extractSparkFields<span class="token punctuation">(</span>sparkTableSchema<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span>Array<span class="token punctuation">[</span>SparkSchema<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> columns <span class="token operator">=</span> sparkTableSchema<span class="token punctuation">.</span>trim<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dropRight<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> res<span class="token operator">:</span> Array<span class="token punctuation">[</span>SparkSchema<span class="token punctuation">]</span> <span class="token operator">=</span> columns<span class="token punctuation">.</span>map<span class="token punctuation">(</span>column <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> splits <span class="token operator">=</span> column<span class="token punctuation">.</span>trim<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>      SparkSchema<span class="token punctuation">(</span>splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    res  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>source<span class="token punctuation">.</span>hbase<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Result<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ImmutableBytesWritable<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>TableInputFormat<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Bytes<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>HBaseConfiguration<span class="token punctuation">,</span> HConstants<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logging<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>sources<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>BaseRelation<span class="token punctuation">,</span> TableScan<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>types<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>IntegerType<span class="token punctuation">,</span> StringType<span class="token punctuation">,</span> StructField<span class="token punctuation">,</span> StructType<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Row<span class="token punctuation">,</span> SQLContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token punctuation">.</span>ArrayBuffer<span class="token keyword">class</span> HbaseRelation <span class="token punctuation">(</span><span class="token keyword">val</span> sqlContext<span class="token operator">:</span>SQLContext<span class="token punctuation">,</span> <span class="token keyword">val</span> parameters<span class="token operator">:</span>Map<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">extends</span> BaseRelation <span class="token keyword">with</span>  TableScan <span class="token keyword">with</span> Logging<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> hbaseTable<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> parameters<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">"hbase.table.name"</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"hbase.table.name is required..."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> sparkTableSchema<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> parameters<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">"spark.table.schema"</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"spark.table.schema is required..."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> sparkField<span class="token operator">:</span> Array<span class="token punctuation">[</span>SparkSchema<span class="token punctuation">]</span> <span class="token operator">=</span> HBaseSourceUtils<span class="token punctuation">.</span>extractSparkFields<span class="token punctuation">(</span>sparkTableSchema<span class="token punctuation">)</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> schema<span class="token operator">:</span> StructType <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> fields <span class="token operator">=</span> sparkField<span class="token punctuation">.</span>map<span class="token punctuation">(</span>field <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> structField <span class="token operator">=</span> field<span class="token punctuation">.</span>fieldType<span class="token punctuation">.</span>toLowerCase <span class="token keyword">match</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"string"</span> <span class="token keyword">=></span> StructField<span class="token punctuation">(</span>field<span class="token punctuation">.</span>fieldName<span class="token punctuation">,</span> StringType<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token string">"int"</span> <span class="token keyword">=></span> StructField<span class="token punctuation">(</span>field<span class="token punctuation">.</span>fieldName<span class="token punctuation">,</span> IntegerType<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      structField    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> StructType<span class="token punctuation">(</span>fields<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> buildScan<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> RDD<span class="token punctuation">[</span>Row<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> configuration <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>    configuration<span class="token punctuation">.</span>set<span class="token punctuation">(</span>HConstants<span class="token punctuation">.</span>ZOOKEEPER_QUORUM<span class="token punctuation">,</span> <span class="token string">"warehouse001"</span><span class="token punctuation">)</span>    configuration<span class="token punctuation">.</span>set<span class="token punctuation">(</span>HConstants<span class="token punctuation">.</span>ZOOKEEPER_CLIENT_PORT<span class="token punctuation">,</span> <span class="token string">"2181"</span><span class="token punctuation">)</span>    configuration<span class="token punctuation">.</span>set<span class="token punctuation">(</span>TableInputFormat<span class="token punctuation">.</span>INPUT_TABLE<span class="token punctuation">,</span> hbaseTable<span class="token punctuation">)</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>sparkContext<span class="token punctuation">.</span>newAPIHadoopRDD<span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> classOf<span class="token punctuation">[</span>TableInputFormat<span class="token punctuation">]</span><span class="token punctuation">,</span> classOf<span class="token punctuation">[</span>ImmutableBytesWritable<span class="token punctuation">]</span><span class="token punctuation">,</span> classOf<span class="token punctuation">[</span>Result<span class="token punctuation">]</span><span class="token punctuation">)</span>    rdd<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>result <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> ArrayBuffer<span class="token punctuation">[</span><span class="token builtin">Any</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      sparkField<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>field <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span>fieldType<span class="token punctuation">.</span>toLowerCase <span class="token keyword">match</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token string">"string"</span> <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            buffer <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token builtin">String</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>getValue<span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span>field<span class="token punctuation">.</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token string">"int"</span> <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            buffer <span class="token operator">+=</span> Integer<span class="token punctuation">.</span>parseInt<span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token builtin">String</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>getValue<span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span>field<span class="token punctuation">.</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      Row<span class="token punctuation">.</span>fromSeq<span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Sparrk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sparrk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Phoenix</title>
      <link href="2019/12/12/phoenix/"/>
      <url>2019/12/12/phoenix/</url>
      
        <content type="html"><![CDATA[<p>OLTP 联机事务处理    关系型数据库    Oracle/MySQL</p><p>OLAP 联机分析处理</p><p>版本选择</p><p>apache-phoenix-4.14.0-cdh5.14.2-bin.tar.gz</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p> tar -zxvf apache-phoenix-4.14.0-cdh5.14.2-bin.tar.gz -C ../app/</p><p>cd ../app/phoenix</p><pre><code>-rw-rw-r-- 1 hadoop hadoop 171018736 Jun  5  2018 phoenix-4.14.0-cdh5.14.2-client.jar    //客户端-rw-rw-r-- 1 hadoop hadoop  77671902 Jun  5  2018 phoenix-4.14.0-cdh5.14.2-hive.jar-rw-rw-r-- 1 hadoop hadoop 117815157 Jun  5  2018 phoenix-4.14.0-cdh5.14.2-pig.jar-rw-rw-r-- 1 hadoop hadoop   7138744 Jun  5  2018 phoenix-4.14.0-cdh5.14.2-queryserver.jar-rw-rw-r-- 1 hadoop hadoop  39216559 Jun  5  2018 phoenix-4.14.0-cdh5.14.2-server.jar    //服务端,与hbase绑定-rw-rw-r-- 1 hadoop hadoop     86578 Jun  5  2018 phoenix-spark-4.14.0-cdh5.14.2.jar</code></pre><p>服务端jar放到hbase的lib包下</p><p>ln -s phoenix-4.14.0-cdh5.14.2-server.jar ../hbase/lib/</p><p>修改hbase-site.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.table.sanity.checks<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.regionserver.wal.codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>phoenix.schema.isNamespaceMappingEnabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>phoenix.schema.mapSysteamTablesToNamespace<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p>ln -s ../../hbase/conf/hbase-site.xml habse-site.xml</p><p>重启hbase.</p><p>删除phoenix/bin下的默认habse-site.xml</p><p>配置hbase的habse-site.xml指向phoenix </p><p>HDFS HA情况下:</p><p>软连接core-site.xml和hdfs-site.xml到bin目录下</p><p>python版本的话必须为2.7</p><p>启动:</p><p>[hadoop@warehouse001 bin]$ ./sqlline.py warehouse001:2181</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型:"></a>数据类型:</h3><pre><code>INTBIGINTFLOATDOUBLEVARCHARCHARTIMESTAMP</code></pre><p>上游CHAR/VARCHAR 长度50 =&gt; Phoenix VARCHAR翻倍 100</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h3><p>官网地址:<a href="http://phoenix.apache.org/language/index.html#create_schema">Grammar | Apache Phoenix</a></p><h4 id="创建shcema-相当于database"><a href="#创建shcema-相当于database" class="headerlink" title="创建shcema(相当于database)"></a>创建shcema(相当于database)</h4><p>CREATE SCHEMA IF NOT EXISTS my_schema<br>CREATE SCHEMA my_schema</p><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表:"></a>创建表:</h4><p>CREATE TABLE IF NOT EXISTS my_schema.my_table (<br>  org_id CHAR(15), entity_id CHAR(15), payload binary(1000),<br>  CONSTRAINT pk PRIMARY KEY (org_id, entity_id) )<br>  TTL=86400</p><p>支持upsert语法,不存在就insert,存在就update</p><h4 id="Upsert"><a href="#Upsert" class="headerlink" title="Upsert:"></a>Upsert:</h4><p>UPSERT INTO TEST VALUES(‘foo’,’bar’,3);<br>UPSERT INTO TEST(NAME,ID) VALUES(‘foo’,123);</p><p>UPSERT INTO test.targetTable(col1, col2) SELECT col3, col4 FROM test.sourceTable WHERE col5 &lt; 100<br>UPSERT INTO foo SELECT * FROM bar;</p><p>创建库表:<br>create schema test;<br>create table test.test (<br>id bigint not null primary key,<br>name varchar(255),<br>age integer<br>);<br>habse查看库:<br>list_namespace<br>hbase查看表:<br>list_namespace_tables ‘TEST’</p><p>插入数据:<br>upsert into test.test values(1,’pk’,18);<br>upsert into test.test values(2,’Jepson’,30);</p><p>创建索引:</p><p>CREATE INDEX test_idx ON test.test(name,age);</p><p>查看执行计划:</p><pre><code>0: jdbc:phoenix:warehouse001:2181&gt; explain select name from test.test where age = 30;+-------------------------------------------------------------------------+-----------------+----------------+--------------+|                                  PLAN                                   | EST_BYTES_READ  | EST_ROWS_READ  | EST_INFO_TS  |+-------------------------------------------------------------------------+-----------------+----------------+--------------+| CLIENT 1-CHUNK PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER TEST:TEST_IDX  | null            | null           | null         ||     SERVER FILTER BY FIRST KEY ONLY AND TO_INTEGER(&quot;AGE&quot;) = 30          | null            | null           | null         |+-------------------------------------------------------------------------+-----------------+----------------+--------------+</code></pre><pre><code>0: jdbc:phoenix:warehouse001:2181&gt; explain select age from test.test where name =&#39;pk&#39;;+---------------------------------------------------------------------------------+-----------------+----------------+--------------+|                                      PLAN                                       | EST_BYTES_READ  | EST_ROWS_READ  | EST_INFO_TS  |+---------------------------------------------------------------------------------+-----------------+----------------+--------------+| CLIENT 1-CHUNK PARALLEL 1-WAY ROUND ROBIN RANGE SCAN OVER TEST:TEST_IDX [&#39;pk&#39;]  | null            | null           | null         ||     SERVER FILTER BY FIRST KEY ONLY                                             | null            | null           | null         |+---------------------------------------------------------------------------------+-----------------+----------------+--------------+2 rows selected (0.037 seconds)</code></pre><p>这两个执行计划的区别,一个是full scan一个是range scan</p><p>原因是哪个索引在前,先执行.</p><p>Schema映射配置:</p><table><thead><tr><th><strong>Property</strong></th><th><strong>Description</strong></th><th><strong>Default</strong></th></tr></thead><tbody><tr><td>phoenix.schema.isNamespaceMappingEnabled</td><td>If it is enabled, then the tables created with schema will be mapped to namespace.This needs to be set at client and server both. if set once, should not be rollback. Old client will not work after this property is enabled.</td><td>false</td></tr><tr><td>phoenix.schema.mapSystemTablesToNamespace</td><td>Enabling this property will take affect when phoenix.connection.isNamespaceMappingEnabled is also set to true. If it is enabled, SYSTEM tables if present will automatically migrated to SYSTEM namespace. And If set to false , then system tables will be created in default namespace only. This needs to be set at client and server both.</td><td>true</td></tr></tbody></table><h3 id="盐表"><a href="#盐表" class="headerlink" title="盐表"></a>盐表</h3><p>CREATE TABLE table (a_key VARCHAR PRIMARY KEY, a_col VARCHAR) SALT_BUCKETS = 20;</p><p>SALT_BUCKETS : 1~256</p><p>regionserver有多少台就设置多少</p><p>好处:其实就是随机数,有助于数据均匀落在各个region上,从而提高写的性能.</p><p>缺点:查询性能降低</p><p>坑:SALT_BUCKETS 参数不能修改,只能删表重建 </p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="全局索引-重读轻写"><a href="#全局索引-重读轻写" class="headerlink" title="全局索引:重读轻写"></a>全局索引:重读轻写</h4><p>其实本质是一张表,对于使用该索引,在查询条件的字段如果不在索引表,就默认不走index,除非强制索引.</p><p>盐表 =&gt; index就是全局索引</p><p>创建全局索引:</p><pre><code>DROP INDEX testsalt_idx ON test.testsalt;CREATE INDEX testsalt_idx ON test.testsalt (name,address);</code></pre><pre><code>+---------+------------+------+| 0:NAME  | 0:ADDRESS  | :ID  |+---------+------------+------+| J       | 上海         | 2    || rz      | 北京         | 1    |+---------+------------+------+ 这里的0是默认列族</code></pre><p>explain select * from test.testsalt;</p><p>强制索引</p><p>explain select /<em>+ INDEX(TEST.TESTSALT TESTSALT_IDX)  \</em>/ *  from test.testsalt;</p><p>explain select ? from test.testsalt where name= xx;</p><p>当?不在索引字段时会全表扫描</p><p>总结:where条件全部是索引字段,select条件是全部索引字段,这种是最优的.where条件全部是索引字段,select条件不全部是索引字段,为了走索引,强制索引.</p><p>多看执行计划再做调优.</p><h4 id="本地索引-重写轻读"><a href="#本地索引-重写轻读" class="headerlink" title="本地索引:重写轻读"></a>本地索引:重写轻读</h4><p>创建本地索引:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test<span class="token punctuation">.</span>testlocal<span class="token punctuation">(</span>id <span class="token keyword">integer</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">,</span>age <span class="token keyword">integer</span><span class="token punctuation">,</span>address <span class="token keyword">varchar</span><span class="token punctuation">)</span>split <span class="token keyword">ON</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">LOCAL</span> <span class="token keyword">INDEX</span> testlocal_idx <span class="token keyword">ON</span> test<span class="token punctuation">.</span>testlocal <span class="token punctuation">(</span>name<span class="token punctuation">,</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>region = 3 + 1 </p><p>在hbase会多出一个cf</p><p>本质:是index数据和原始数据存储在同一个表里,对于本地索引,查询中无论使用hint强制指定或者查询列是否都在index表里,都默认使用索引表.</p><p>全表扫描:</p><p>explain select * from test.testlocal;</p><pre><code>+--------------------------------------------------------------------------+-----------------+----------------+--------------+|                                   PLAN                                   | EST_BYTES_READ  | EST_ROWS_READ  | EST_INFO_TS  |+--------------------------------------------------------------------------+-----------------+----------------+--------------+| CLIENT 4-CHUNK PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER TEST:TESTLOCAL  | null            | null           | null         |+--------------------------------------------------------------------------+-----------------+----------------+--------------+</code></pre><p>explain select /<em>+ INDEX(TEST.testlocal testlocal_IDX)  \</em>/ * from test.testlocal ;</p><pre><code>+--------------------------------------------------------------------------+-----------------+----------------+--------------+|                                   PLAN                                   | EST_BYTES_READ  | EST_ROWS_READ  | EST_INFO_TS  |+--------------------------------------------------------------------------+-----------------+----------------+--------------+| CLIENT 4-CHUNK PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER TEST:TESTLOCAL  | null            | null           | null         |+--------------------------------------------------------------------------+-----------------+----------------+--------------+</code></pre><p>加条件:</p><p>explain select name from test.testlocal where age = 18;</p><pre><code>+--------------------------------------------------------------------------+-----------------+----------------+--------------+|                                   PLAN                                   | EST_BYTES_READ  | EST_ROWS_READ  | EST_INFO_TS  |+--------------------------------------------------------------------------+-----------------+----------------+--------------+| CLIENT 4-CHUNK PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER TEST:TESTLOCAL  | null            | null           | null         ||     SERVER FILTER BY AGE = 18                                            | null            | null           | null         |+--------------------------------------------------------------------------+-----------------+----------------+--------------+</code></pre><p>这里是不走index的</p><p>explain select name,address from test.testlocal where age = 18;</p><p>总结:要有where条件,且字段不要以*</p><p>好处:写的性能高,无需写索引表,其实是实际上没有索引表.</p><p>坏处:在使用本地索引时,必须检查描所有的region的数据,因为无法先确定索引数据的准确区域位置,因此索引读的开销较大</p><p>两者对比之后,加入不清楚业务场景,建议使用盐表和全局索引.</p><p>1.盐表语法简单</p><p>2.写的性能没有读的高.</p><p><strong>全局是表 重读轻写,本地是CF 重写轻读</strong></p><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><p>本质:</p><p>原始列的数据也存在索引表,这样查询索引数据时,不需要去原始表查询,直接获取结果,节省开销.</p><p>好处:空间换时间,查询快</p><p>坏处:存储空间浪费</p><p>创建覆盖索引:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test<span class="token punctuation">.</span>testinclude<span class="token punctuation">(</span>id <span class="token keyword">integer</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">,</span>age <span class="token keyword">varchar</span><span class="token punctuation">,</span>address <span class="token keyword">varchar</span><span class="token punctuation">,</span>sal <span class="token keyword">integer</span><span class="token punctuation">)</span>split <span class="token keyword">ON</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UPSERT <span class="token keyword">INTO</span> TEST<span class="token punctuation">.</span>testinclude <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'rz'</span><span class="token punctuation">,</span><span class="token string">'18'</span><span class="token punctuation">,</span><span class="token string">'北京'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UPSERT <span class="token keyword">INTO</span> TEST<span class="token punctuation">.</span>testinclude <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'J'</span><span class="token punctuation">,</span><span class="token string">'30'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> testinclude_idx <span class="token keyword">ON</span> test<span class="token punctuation">.</span>testinclude<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> include<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>查看执行计划:</p><p>explain SELECT * FROM test.testinclude;</p><pre><code>+----------------------------------------------------------------------------+-----------------+----------------+--------------+|                                    PLAN                                    | EST_BYTES_READ  | EST_ROWS_READ  | EST_INFO_TS  |+----------------------------------------------------------------------------+-----------------+----------------+--------------+| CLIENT 4-CHUNK PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER TEST:TESTINCLUDE  | null            | null           | null         |+----------------------------------------------------------------------------+-----------------+----------------+--------------+</code></pre><p>explain select /*+ INDEX(TEST.testinclude testinclude_IDX)  */ * from test.testinclude ;</p><pre><code>+----------------------------------------------------------------------------+-----------------+----------------+--------------+|                                    PLAN                                    | EST_BYTES_READ  | EST_ROWS_READ  | EST_INFO_TS  |+----------------------------------------------------------------------------+-----------------+----------------+--------------+| CLIENT 4-CHUNK PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER TEST:TESTINCLUDE  | null            | null           | null         |+----------------------------------------------------------------------------+-----------------+----------------+--------------+</code></pre><p>这里都是走的全表扫描.</p><p> explain SELECT name FROM test.testinclude WHERE age= ‘18’;</p><pre><code>+--------------------------------------------------------------------------------+-----------------+----------------+--------------+|                                      PLAN                                      | EST_BYTES_READ  | EST_ROWS_READ  | EST_INFO_TS  |+--------------------------------------------------------------------------------+-----------------+----------------+--------------+| CLIENT 1-CHUNK PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER TEST:TESTINCLUDE_IDX  | null            | null           | null         ||     SERVER FILTER BY FIRST KEY ONLY AND &quot;AGE&quot; = &#39;18&#39;                           | null            | null           | null         |+--------------------------------------------------------------------------------+-----------------+----------------+--------------+</code></pre><p>这里是走的索引表.</p><p>explain select /*+ INDEX(TEST.testinclude testinclude_IDX)  */ sal from test.testinclude ;</p><pre><code>+----------------------------------------------------------------------------+-----------------+----------------+--------------+|                                    PLAN                                    | EST_BYTES_READ  | EST_ROWS_READ  | EST_INFO_TS  |+----------------------------------------------------------------------------+-----------------+----------------+--------------+| CLIENT 4-CHUNK PARALLEL 1-WAY ROUND ROBIN FULL SCAN OVER TEST:TESTINCLUDE  | null            | null           | null         |+----------------------------------------------------------------------------+-----------------+----------------+--------------+</code></pre><p>这里强制扫描不在索引字段的sal,依然走的是全表扫描</p><h4 id="函数索引"><a href="#函数索引" class="headerlink" title="函数索引"></a>函数索引</h4><hr><h4 id="可变索引"><a href="#可变索引" class="headerlink" title="可变索引"></a>可变索引</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test<span class="token punctuation">.</span>testimmu<span class="token punctuation">(</span>id <span class="token keyword">integer</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">,</span>age <span class="token keyword">integer</span><span class="token punctuation">,</span>address <span class="token keyword">varchar</span><span class="token punctuation">)</span>immutable_rows <span class="token operator">=</span> <span class="token boolean">TRUE</span> split <span class="token keyword">ON</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> testimmu_idx <span class="token keyword">ON</span> test<span class="token punctuation">.</span>testimmu<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> include<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>UPSERT <span class="token keyword">INTO</span> TEST<span class="token punctuation">.</span>testimmu <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'rz'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'北京'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UPSERT <span class="token keyword">INTO</span> TEST<span class="token punctuation">.</span>testimmu <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'J'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>基于表属性设置可变,index默认就是可变</p><h4 id="不可变索引"><a href="#不可变索引" class="headerlink" title="不可变索引"></a>不可变索引</h4><p>基于表属性设置不可变,index默认就是不可变的</p><p>append这种场景是业务表,比如log日志的</p><h4 id="异步索引"><a href="#异步索引" class="headerlink" title="异步索引"></a>异步索引</h4><h3 id="Phoenix编译"><a href="#Phoenix编译" class="headerlink" title="Phoenix编译"></a>Phoenix编译</h3><p>源码地址:</p><p><a href="https://archive.apache.org/dist/phoenix/apache-phoenix-4.14.0-cdh5.14.2/src/apache-phoenix-4.14.0-cdh5.14.2-src.tar.gz">https://archive.apache.org/dist/phoenix/apache-phoenix-4.14.0-cdh5.14.2/src/apache-phoenix-4.14.0-cdh5.14.2-src.tar.gz</a></p><p>解压到本地,解压目录git bash执行</p><pre><code>mvn clean package -DskipTests</code></pre><p><img src="C:\Users\10090\Desktop\blogimg\image-20210526175705465.png" alt="image-20210526175705465"></p><p>编译成功!</p><h3 id="Phoenix-JDBC"><a href="#Phoenix-JDBC" class="headerlink" title="Phoenix JDBC"></a>Phoenix JDBC</h3><p>pom.xml添加依赖</p><pre><code>&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.apache.phoenix&lt;/groupId&gt;        &lt;artifactId&gt;phoenix-client&lt;/artifactId&gt;        &lt;version&gt;4.14.0-cdh5.14.2&lt;/version&gt;        &lt;scope&gt;system&lt;/scope&gt;        &lt;systemPath&gt;你的本地路径/phoenix-4.14.0-cdh5.14.2-client.jar&lt;/systemPath&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.example&lt;/groupId&gt;        &lt;artifactId&gt;phoenix-jdbc&lt;/artifactId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>phoenix<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoenixJDBCJava</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"hbase.rpc.timeout"</span><span class="token punctuation">,</span><span class="token string">"600000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"hbase.client.scanner.timeout.period"</span><span class="token punctuation">,</span><span class="token string">"600000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"dfs.client.socket-timeout"</span><span class="token punctuation">,</span><span class="token string">"600000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"phoenix.query.keepAliveMs"</span><span class="token punctuation">,</span><span class="token string">"600000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"phoenix.query.timeoutMs"</span><span class="token punctuation">,</span><span class="token string">"3600000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.phoenix.jdbc.PhoenixDriver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:phoenix:warehouse001:2181"</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            conn.createStatement().execute("upsert into test.test values (3,'一姐', 18)");</span><span class="token comment" spellcheck="true">//            conn.commit();</span>            rs <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"select * from test.test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Phoenix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Phoenix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Azkaban部署及二次开发</title>
      <link href="2019/12/08/azkaban/"/>
      <url>2019/12/08/azkaban/</url>
      
        <content type="html"><![CDATA[<p>1.解压</p><p>tar -zxvf azkaban-3.90.0.tar.gz</p><p>2.打开gradle-wrapper.properties</p><p>cd /home/hadoop/sourcecode/azkaban-3.90.0/gradle/wrapper</p><p>下载:https://services.gradle.org/distributions/gradle-4.6-all.zip</p><p>上传到/home/hadoop/sourcecode/azkaban-3.90.0/gradle/wrapper目录</p><p>修改gradle-wrapper.properties:</p><pre><code>#distributionUrl=https\://services.gradle.org/distributions/gradle-4.6-all.zipdistributionUrl=gradle-4.6-all.zip# 因为每次都有下载,所以直接从外部下载下来,传上去,指定好路径</code></pre><p>编译:</p><pre><code>cd /home/hadoop/sourcecode/azkaban-3.90.0./gradlew installDist -x test</code></pre><p>安装包azkaban-solo-server版在</p><p>$ZKANBAN_HOME/azkaban-solo-server/build/distributions下</p><p>azkaban-web-server版在</p><p>$ZKANBAN_HOME/azkaban-web-server/build/distributions下</p><p>解压编译后的安装包</p><p>启动:</p><p>注意:一定要在$ZKANBAN_HOME目录下启动bin/start-solo.sh </p><p>登陆web,默认端口8081</p><p>用户名密码在conf下azkaban-users.xml</p><p><img src="C:\Users\10090\Desktop\blogimg\image-20210511175928581.png" alt="image-20210511175928581"></p><p>测试:</p><p>创建两个文件:</p><p>basic.flow</p><pre><code>nodes:  - name: jobA    type: command    config:      command: echo &quot;This is jobA.&quot;</code></pre><p>flow20.project</p><pre><code>azkaban-flow-version: 2.0</code></pre><p>把这两个文件压缩为zip格式,注意一定要是zip格式!</p><p>创建项目:</p><p><img src="C:\Users\10090\Desktop\blogimg\image-20210511180306927.png" alt="image-20210511180306927"></p><p>点击upload上传刚才的zip包</p><p><img src="C:\Users\10090\Desktop\blogimg\image-20210511180404351.png" alt="image-20210511180404351"></p><p>执行flow</p><p><img src="C:\Users\10090\Desktop\blogimg\image-20210511180450979.png" alt="image-20210511180450979"></p><p><img src="C:\Users\10090\Desktop\blogimg\image-20210511180546461.png" alt="image-20210511180546461"></p><p>执行日志:</p><p><img src="C:\Users\10090\Desktop\blogimg\image-20210511180617457.png" alt="image-20210511180617457"></p><p>依赖作业配置:</p><p>dependency.flow</p><pre><code>nodes:  - name: jobC    type: noop    # jobC depends on jobA and jobB    dependsOn:      - jobA      - jobB  - name: jobA    type: command    config:      command: echo &quot;This is an echoed jobA.&quot;  - name: jobB    type: command    config:      command: echo &quot;This is an echoed jobB.&quot;</code></pre><p><img src="C:\Users\10090\Desktop\blogimg\image-20210511183424967.png" alt="image-20210511183424967"></p><p>azkaban-exec-server部署,</p><p>首先在mysql创建数据库和权限:    </p><p>mysql&gt; CREATE DATABASE azkaban;</p><p>mysql&gt; CREATE USER ‘azkaban’@’%’ IDENTIFIED BY ‘xxxxxx’;</p><p>mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE ON azkaban.* to ‘azkaban’@’%’ WITH GRANT OPTION;  </p><p>解压</p><p>azkaban-exec-server-0.1.0-SNAPSHOT</p><p>azkaban-web-server-0.1.0-SNAPSHOT包</p><p>包路径在对应的distribute下</p><p>修改配置:</p><p>cd到解压好后的目录,</p><p>cd conf</p><p>修改azkaban.properties参数</p><pre><code>mysql.database=azkabanmysql.user=azkabanmysql.password=azkaban</code></pre><p>两个都要修改.</p>]]></content>
      
      
      <categories>
          
          <category> Azkaban </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Azkaban </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark源码分析</title>
      <link href="2019/12/05/spark-yuan-ma-fen-xi/"/>
      <url>2019/12/05/spark-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>Spark源码重点;</p><pre class=" language-scala"><code class="language-scala">SparkSubmit<span class="token punctuation">.</span>mian<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>​    <span class="token keyword">def</span> doSubmit<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> appArgs <span class="token operator">=</span> parseArguments<span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Populate `sparkProperties` map from properties file</span>              mergeDefaultSparkProperties<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// Remove keys that don't start with "spark." from `sparkProperties`.</span>              ignoreNonSparkProperties<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// Use `sparkProperties` map along with env vars to fill in any missing parameters</span>              loadEnvironmentArguments<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                action <span class="token operator">=</span> Option<span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span>SUBMIT<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> SparkSubmitAction<span class="token punctuation">.</span>SUBMIT <span class="token keyword">=></span> submit<span class="token punctuation">(</span>appArgs<span class="token punctuation">,</span> uninitLog<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                doRunMain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                     runMain<span class="token punctuation">(</span>args<span class="token punctuation">,</span> uninitLog<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// child class</span>                         <span class="token keyword">if</span> <span class="token punctuation">(</span>deployMode <span class="token operator">==</span> CLIENT<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                              childMainClass <span class="token operator">=</span> args<span class="token punctuation">.</span>mainClass                         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                         <span class="token keyword">if</span> <span class="token punctuation">(</span>isYarnCluster<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                              childMainClass <span class="token operator">=</span> <span class="token string">"org.apache.spark.deploy.yarn.YarnClusterApplication"</span>                            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                         mainClass <span class="token operator">=</span> Utils<span class="token punctuation">.</span>classForName<span class="token punctuation">(</span>childMainClass<span class="token punctuation">)</span>                         <span class="token keyword">val</span> app<span class="token operator">:</span> SparkApplication                         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>​    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flume自定义</title>
      <link href="2019/11/27/flume-zi-ding-yi-source/"/>
      <url>2019/11/27/flume-zi-ding-yi-source/</url>
      
        <content type="html"><![CDATA[<p>pom.xml添加Flume依赖</p><pre class=" language-xml"><code class="language-xml">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flume<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flume-ng-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>创建自定义类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>mydata<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>flume<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flume<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flume<span class="token punctuation">.</span>EventDeliveryException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flume<span class="token punctuation">.</span>PollableSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flume<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configurable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flume<span class="token punctuation">.</span>event<span class="token punctuation">.</span>SimpleEvent<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flume<span class="token punctuation">.</span>source<span class="token punctuation">.</span>AbstractSource<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 自定义Source * * 为event添加一个前缀和后缀 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSource</span> <span class="token keyword">implements</span> <span class="token class-name">Configurable</span><span class="token punctuation">,</span> PollableSource <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String prefix<span class="token punctuation">;</span>    String suffix<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 操作event     * @return     * @throws EventDeliveryException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Status <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> EventDeliveryException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Status status <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                SimpleEvent event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                event<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> suffix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">getChannelProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">processEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                status <span class="token operator">=</span> Status<span class="token punctuation">.</span>READY<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            status <span class="token operator">=</span> Status<span class="token punctuation">.</span>BACKOFF<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> status<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getBackOffSleepIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getMaxBackOffSleepInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 封装参数信息     * @param context     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        prefix <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"prefix"</span><span class="token punctuation">,</span><span class="token string">"rz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        suffix <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"suffix"</span><span class="token punctuation">,</span><span class="token string">"suf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>打包到服务器上.</p><p>上传在$FLUME_HOME/plugins.d/mysource/lib/目录下.</p><p>添加配置test.conf:</p><pre class=" language-conf"><code class="language-conf">a1.sources = r1a1.channels = c1a1.sinks = k1#define sourcesa1.sources.r1.type = com.mydata.bigdata.flume.MySourcea1.sources.r1.prefix = mydata-a1.sources.r1.suffix = suf#define channelsa1.channels.c1.type = memory#define sinka1.sinks.k1.type = logger#define channel to sink a1.sinks.k1.channel = c1a1.sources.r1.channels = c1</code></pre>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop离线数仓01</title>
      <link href="2019/11/21/hadoop-chi-xian-shu-cang-01/"/>
      <url>2019/11/21/hadoop-chi-xian-shu-cang-01/</url>
      
        <content type="html"><![CDATA[<p>数据:</p><p>​    日志数据</p><p>​    业务数据:数据库</p><p>流程:</p><p>LogServer ==&gt; Flume ==&gt; HDFS ==&gt; 离线</p><p>​                                      ==&gt; Kafka ==&gt; 流处理</p><p>服务器部署配置:</p><p>ngnix</p><p>项目路径:/home/hadoop/app/hadoop-dw</p><p>打包路径:/home/hadoop/app/hadoop-dw/lib</p><p>运行命令:</p><pre><code>nohup java -jar logserver-0.0.1.jar &amp;</code></pre><p>然后修改MockData的服务器地址</p><p>在$USER_HOME/app/log-gen/下存放ng日志</p><p>上传jar到lib下</p><p>bin下放命令脚本log.sh:</p><pre><code>nohup java -jar logserver-0.0.1.jar --server.port=16666 &amp;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot02</title>
      <link href="2019/10/23/springboot2/"/>
      <url>2019/10/23/springboot2/</url>
      
        <content type="html"><![CDATA[<h4 id="环境切换"><a href="#环境切换" class="headerlink" title="环境切换"></a>环境切换</h4><p>properties profile配置:</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#配置环境</span><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev</span></code></pre><p>或者在Edit Configuration里面配置</p><p>服务器jar包运行配置:</p><p>java -jar xxx.jar –spring.profiles.active=dev</p><p>yml profile配置:</p><pre class=" language-yml"><code class="language-yml">spring:  profiles:    active: dev---server:  port: 9998spring:  profiles:    dev---</code></pre><h3 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h3><p>Timer</p><p>Quartz</p><pre><code>SpringWebApplication主程序需加上@EnableScheduling</code></pre><h4 id="定时调度"><a href="#定时调度" class="headerlink" title="定时调度:"></a>定时调度:</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>scheduler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Scheduled<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    @Scheduled(fixedDelay = 2000)</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"*/2 * * * * *"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"定时执行任务...当前时间"</span><span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h4><pre><code>SpringWebApplication需加上@EnableAsync注解</code></pre><h4 id="Json格式"><a href="#Json格式" class="headerlink" title="Json格式"></a>Json格式</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>domain<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonFormat<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonIgnore<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonInclude<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonProperty<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 改为账号</span>    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">"account"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 隐藏密码</span>    <span class="token annotation punctuation">@JsonIgnore</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 为空的不展示</span>    <span class="token annotation punctuation">@JsonInclude</span><span class="token punctuation">(</span>JsonInclude<span class="token punctuation">.</span>Include<span class="token punctuation">.</span>NON_NULL<span class="token punctuation">)</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 格式化日期</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">,</span> locale <span class="token operator">=</span> <span class="token string">"zh"</span><span class="token punctuation">,</span> timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> phone<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPhone</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Date <span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> birthday<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBirthday</span><span class="token punctuation">(</span>Date birthday<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">People</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String password<span class="token punctuation">,</span> String phone<span class="token punctuation">,</span> Date birthday<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>People<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">methodController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/json"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> People <span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">"如花"</span><span class="token punctuation">,</span><span class="token string">"0000"</span><span class="token punctuation">,</span><span class="token string">"1338383783"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h4><pre><code>@GetMapping(value = &quot;/query&quot;)    public Object qurry(int from,int size) &#123;        params.clear();        params.put(&quot;from&quot;,from);        params.put(&quot;size&quot;,size);        return params;    &#125;</code></pre><p><img src="C:\Users\10090\Desktop\blogimg\image-20210426164641965.png" alt="image-20210426164641965"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/query2"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置默认值 也可以替换名称</span><span class="token keyword">public</span> Object <span class="token function">qurry2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"from"</span><span class="token punctuation">,</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> params<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/request"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置默认值 也可以替换名称</span><span class="token keyword">public</span> Object <span class="token function">request</span><span class="token punctuation">(</span>HttpServlet request<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> params<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h4><p>GET/POST的区别 </p><p>GET全部加在后面传,POST是放在Body中传的,而且GET安全性较差</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/post"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">login</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>操作MySQL数据库:</p><p>pom添加依赖:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>修改yml配置:</p><pre class=" language-yml"><code class="language-yml">  jpa:    hibernate:      ddl-auto: update    show-sql: true  datasource:      #注意这里username、password没有data，否则会报错    username: root    password: ruozedata    url: jdbc:mysql://warehouse001:3306/springboot    driver-class-name: com.mysql.cj.jdbc.Driver</code></pre><p>User类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>domain<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"myUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指定字段长度</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"last_name"</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> email<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmail</span><span class="token punctuation">(</span>String email<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String email<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>UserController类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>UserRepository<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    UserRepository userRepository<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    @GetMapping("/save")</span><span class="token comment" spellcheck="true">//    public User save(User user) &amp;#123;</span><span class="token comment" spellcheck="true">//        return userRepository.save(user);</span><span class="token comment" spellcheck="true">//    &amp;#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/&amp;#123;id&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">toIntExact</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="C:\Users\10090\Desktop\blogimg\image-20210427130510969.png" alt="image-20210427130510969"></p><p><img src="C:\Users\10090\Desktop\blogimg\image-20210427130521669.png" alt="image-20210427130521669"></p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot01</title>
      <link href="2019/10/21/springboot/"/>
      <url>2019/10/21/springboot/</url>
      
        <content type="html"><![CDATA[<h4 id="注释分析"><a href="#注释分析" class="headerlink" title="注释分析"></a>注释分析</h4><pre><code>@SpringBootApplication    @SpringBootConfiguration        @Configuration            @Component    //纳入Spring Boot管理    @EnableAutoConfiguration        @AutoConfigurationPackage            @Import(AutoConfigurationPackages.Registrar.class)                public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) &#123;                // 这里会去扫描本地的路径,如果不存在则会报错,如下图,所有的开发代码都必须在该目录下面            register(registry, new PackageImports(metadata).getPackageNames().toArray(new String[0]));        &#125;        @Import    @ComponentScan</code></pre><p><img src="https://i.loli.net/2021/04/25/GITDUyOWqVntMlr.png"></p><h4 id="热部署"><a href="#热部署" class="headerlink" title="热部署:"></a>热部署:</h4><p>pom.xml添加:</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>IDEA setting配置:</p><p><img src="C:\Users\10090\Desktop\blogimg\image-20210425203223983.png" alt="image-20210425203223983"></p><p>推荐使用application.yml</p><p>标记语言: k:(空格) v</p><h4 id="YML注入对象"><a href="#YML注入对象" class="headerlink" title="YML注入对象:"></a>YML注入对象:</h4><p>pom添加:</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--yml提醒 类开头需加  @Component                      @ConfigurationProperties(prefix = "student")--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>Student类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>domain<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"student"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> male<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> teachers<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> infos<span class="token punctuation">;</span>    <span class="token keyword">private</span> Grade grade<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Student&amp;#123;"</span> <span class="token operator">+</span>                <span class="token string">"id='"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", birthday="</span> <span class="token operator">+</span> birthday <span class="token operator">+</span>                <span class="token string">", male="</span> <span class="token operator">+</span> male <span class="token operator">+</span>                <span class="token string">", teachers="</span> <span class="token operator">+</span> teachers <span class="token operator">+</span>                <span class="token string">", infos="</span> <span class="token operator">+</span> infos <span class="token operator">+</span>                <span class="token string">", grade="</span> <span class="token operator">+</span> grade <span class="token operator">+</span>                <span class="token string">'&amp;#125;'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Date <span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> birthday<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBirthday</span><span class="token punctuation">(</span>Date birthday<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> male<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMale</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> male<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>male <span class="token operator">=</span> male<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getTeachers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> teachers<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTeachers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> teachers<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>teachers <span class="token operator">=</span> teachers<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">getInfos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> infos<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInfos</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> infos<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>infos <span class="token operator">=</span> infos<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Grade <span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> grade<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGrade</span><span class="token punctuation">(</span>Grade grade<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Grade类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>sparingweb<span class="token punctuation">.</span>domain<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"grade"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Grade</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Grade&amp;#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", desc='"</span> <span class="token operator">+</span> desc <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&amp;#125;'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDesc</span><span class="token punctuation">(</span>String desc<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>application.yml配置:</p><pre><code>server:  port: 9998  servlet:    context-path: /myWebstudent:  id: 1  name: Charlie  birthday: 1994/04/26  male: false  infos:    a: aa    b: bb  teachers:    - PK    - J  grade:    name: xxx    desc: aaaa</code></pre><p>Controller:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Student student<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"test:student"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出:</p><pre><code>Student&#123;id=&#39;1&#39;, name=&#39;Charlie&#39;, birthday=Tue Apr 26 00:00:00 CST 1994, male=false, teachers=[PK, J], infos=&#123;a=aa, b=bb&#125;, grade=Grade&#123;name=&#39;xxx&#39;, desc=&#39;aaaa&#39;&#125;&#125;</code></pre><h4 id="properties注入对象"><a href="#properties注入对象" class="headerlink" title="properties注入对象"></a>properties注入对象</h4><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">9999</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/hello</span><span class="token attr-name">spring.banner.location</span><span class="token punctuation">=</span><span class="token attr-value">banner.txt</span><span class="token attr-name">student.id</span><span class="token punctuation">=</span><span class="token attr-value">2</span><span class="token attr-name">student.name</span><span class="token punctuation">=</span><span class="token attr-value">Judy</span><span class="token attr-name">student.birthday</span><span class="token punctuation">=</span><span class="token attr-value">1999/04/26</span><span class="token attr-name">student.male</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">student.infos.a</span><span class="token punctuation">=</span><span class="token attr-value">aaa</span><span class="token attr-name">student.infos.b</span><span class="token punctuation">=</span><span class="token attr-value">bbbb</span><span class="token attr-name">student.teachers</span><span class="token punctuation">=</span><span class="token attr-value">teacher</span><span class="token attr-name">student.grade.name</span><span class="token punctuation">=</span><span class="token attr-value">二年级</span><span class="token attr-name">student.gade.desc</span><span class="token punctuation">=</span><span class="token attr-value">学习棒棒</span></code></pre><p>输出:</p><pre><code>Student&#123;id=&#39;2&#39;, name=&#39;Judy&#39;, birthday=Mon Apr 26 00:00:00 CST 1999, male=true, teachers=[teacher], infos=&#123;a=aaa, b=bbbb&#125;, grade=Grade&#123;name=&#39;ï¿½ï¿½ï¿½ê¼¶&#39;, desc=&#39;Ñ§Ï°ï¿½ï¿½ï¿½ï¿½&#39;&#125;&#125;</code></pre><p>这里properties会出现中文乱码现象</p><p>解决:</p><p>File-&gt;setting-&gt;Eidtor-&gt;File Encodeings- 字符全改为UTF-8</p><p>再去修改properties内容</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBase基础</title>
      <link href="2019/10/21/hbase/"/>
      <url>2019/10/21/hbase/</url>
      
        <content type="html"><![CDATA[<p>表的组成:</p><p>rowkey:是每一条数据的主键</p><p>column family:列簇,列族</p><p>column:是属于列簇,可以动态添加</p><p>version:版本 类型是long    默认是时间戳</p><p>value:数据</p><p>KV结构存储,K是rowkey,V是value</p><p>一行row数据是可以包含一个或者多个CF,但并不推荐一张表超过3个.</p><p>column是属于CF,一个CF可以包含一个或者多个column.</p><p>实际生产上,就一个默认的CF</p><p>region:是一段数据的集合,存储在hregionserver节点上.</p><p>数据模型-逻辑视图:</p><p><img src="https://i.loli.net/2021/04/18/1U4tZKQCir7nFRV.png">整个数据是由rowkey按字典顺序排序.</p><p>null值是不会存储的</p><p>会按照rk进行字典排序,在横向切割.切割的数据是存储在region里面.</p><p>数据模型-物理视图:</p><p><img src="https://i.loli.net/2021/04/18/bVdMDkEamui3vRP.png"></p><p>数据以K-V结构存储,每个K-V只存储一个单元格的数据</p><p>不同的CF数据是存储在不同的文件里.</p><p>region划分:</p><p><img src="https://i.loli.net/2021/04/18/rnLgtk6pPBZeoHN.png"></p><p>表按rowkey按范围划分为不同的region,region按照CF划分为不同的store,store包含memstore和storefile.</p><p>建表时默认是1个region,如果特意指定split key,就会有多个region,当数据存储超过阈值, 表会按水平方向分隔为2个region.可以认为region就是表的子表.不同的region被master会被分配给合适的rs节点管理.</p><p>一个rs节点管理多个region,一个region管理1个或多个CF.</p><p>数据模型-物理视图-多版本;</p><p><img src="https://i.loli.net/2021/04/18/GcYSjOVwFRzLIaq.png"></p><p>将row2的skuname从红心火龙果更新为白心火龙果.</p><p>底层是存储了两条数据,版本不一致.</p><p>HBase支持多版本特性,可以通过时间戳来实现.</p><p>put（相当于insert、updata）、delete都会产生一个新的cell，都拥有一个版本。</p><p>查询默认是返回数据的最新版本数据，可以通过指定版本号来获取旧的数据。</p><p>进入HBase：</p><pre><code> sh hbase shell</code></pre><p>常用命令:</p><pre><code>hbase(main):001:0&gt; helpHBase Shell, version 1.2.0-cdh5.16.2, rUnknown, Mon Jun  3 03:50:06 PDT 2019Type &#39;help &quot;COMMAND&quot;&#39;, (e.g. &#39;help &quot;get&quot;&#39; -- the quotes are necessary) for help on a specific command.Commands are grouped. Type &#39;help &quot;COMMAND_GROUP&quot;&#39;, (e.g. &#39;help &quot;general&quot;&#39;) for help on a command group.COMMAND GROUPS:  Group name: general  Commands: status, table_help, version, whoami  Group name: ddl  Commands: alter, alter_async, alter_status, create, describe, disable, disable_all, drop, drop_all, enable, enable_all, exists, get_table, is_disabled, is_enabled, list, locate_region, show_filters  Group name: namespace  Commands: alter_namespace, create_namespace, describe_namespace, drop_namespace, list_namespace, list_namespace_tables  Group name: dml  Commands: append, count, delete, deleteall, get, get_counter, get_splits, incr, put, scan, truncate, truncate_preserve  Group name: tools  Commands: assign, balance_switch, balancer, balancer_enabled, catalogjanitor_enabled, catalogjanitor_run, catalogjanitor_switch, close_region, compact, compact_mob, compact_rs, flush, is_in_maintenance_mode, major_compact, major_compact_mob, merge_region, move, normalize, normalizer_enabled, normalizer_switch, split, splitormerge_enabled, splitormerge_switch, trace, unassign, wal_roll, zk_dump  Group name: replication  Commands: add_peer, append_peer_tableCFs, disable_peer, disable_table_replication, enable_peer, enable_table_replication, get_peer_config, list_peer_configs, list_peers, list_replicated_tables, remove_peer, remove_peer_tableCFs, set_peer_tableCFs, show_peer_tableCFs, update_peer_config  Group name: snapshots  Commands: clone_snapshot, delete_all_snapshot, delete_snapshot, list_snapshots, restore_snapshot, snapshot  Group name: configuration  Commands: update_all_config, update_config  Group name: quotas  Commands: list_quotas, set_quota  Group name: security  Commands: grant, list_security_capabilities, revoke, user_permission  Group name: procedures  Commands: abort_procedure, list_procedures  Group name: visibility labels  Commands: add_labels, clear_auths, get_auths, list_labels, set_auths, set_visibility  Group name: rsgroup  Commands: add_rsgroup, balance_rsgroup, get_rsgroup, get_server_rsgroup, get_table_rsgroup, list_rsgroups, move_servers_rsgroup, move_tables_rsgroup, remove_rsgroupSHELL USAGE:Quote all names in HBase Shell such as table and column names.  Commas delimitcommand parameters.  Type &lt;RETURN&gt; after entering a command to run it.Dictionaries of configuration used in the creation and alteration of tables areRuby Hashes. They look like this:  &#123;&#39;key1&#39; =&gt; &#39;value1&#39;, &#39;key2&#39; =&gt; &#39;value2&#39;, ...&#125;and are opened and closed with curley-braces.  Key/values are delimited by the&#39;=&gt;&#39; character combination.  Usually keys are predefined constants such asNAME, VERSIONS, COMPRESSION, etc.  Constants do not need to be quoted.  Type&#39;Object.constants&#39; to see a (messy) list of all constants in the environment.If you are using binary keys or values and need to enter them in the shell, usedouble-quote&#39;d hexadecimal representation. For example:  hbase&gt; get &#39;t1&#39;, &quot;key\x03\x3f\xcd&quot;  hbase&gt; get &#39;t1&#39;, &quot;key\003\023\011&quot;  hbase&gt; put &#39;t1&#39;, &quot;test\xef\xff&quot;, &#39;f1:&#39;, &quot;\x01\x33\x40&quot;</code></pre><p>建表:</p><pre><code>Create a table with namespace=ns1 and table qualifier=t1  hbase&gt; create &#39;ns1:t1&#39;, &#123;NAME =&gt; &#39;f1&#39;, VERSIONS =&gt; 5&#125;Create a table with namespace=default and table qualifier=t1  hbase&gt; create &#39;t1&#39;, &#123;NAME =&gt; &#39;f1&#39;&#125;, &#123;NAME =&gt; &#39;f2&#39;&#125;, &#123;NAME =&gt; &#39;f3&#39;&#125;  hbase&gt; # The above in shorthand would be the following:  hbase&gt; create &#39;t1&#39;, &#39;f1&#39;, &#39;f2&#39;, &#39;f3&#39;  hbase&gt; create &#39;t1&#39;, &#123;NAME =&gt; &#39;f1&#39;, VERSIONS =&gt; 1, TTL =&gt; 2592000, BLOCKCACHE =&gt; true&#125;  hbase&gt; create &#39;t1&#39;, &#123;NAME =&gt; &#39;f1&#39;, CONFIGURATION =&gt; &#123;&#39;hbase.hstore.blockingStoreFiles&#39; =&gt; &#39;10&#39;&#125;&#125;  hbase&gt; create &#39;t1&#39;, &#123;NAME =&gt; &#39;f1&#39;, IS_MOB =&gt; true, MOB_THRESHOLD =&gt; 1000000, MOB_COMPACT_PARTITION_POLICY =&gt; &#39;weekly&#39;&#125;Table configuration options can be put at the end.Examples:  hbase&gt; create &#39;ns1:t1&#39;, &#39;f1&#39;, SPLITS =&gt; [&#39;10&#39;, &#39;20&#39;, &#39;30&#39;, &#39;40&#39;]  hbase&gt; create &#39;t1&#39;, &#39;f1&#39;, SPLITS =&gt; [&#39;10&#39;, &#39;20&#39;, &#39;30&#39;, &#39;40&#39;]  hbase&gt; create &#39;t1&#39;, &#39;f1&#39;, SPLITS_FILE =&gt; &#39;splits.txt&#39;, OWNER =&gt; &#39;johndoe&#39;  hbase&gt; create &#39;t1&#39;, &#123;NAME =&gt; &#39;f1&#39;, VERSIONS =&gt; 5&#125;, METADATA =&gt; &#123; &#39;mykey&#39; =&gt; &#39;myvalue&#39; &#125;  hbase&gt; # Optionally pre-split the table into NUMREGIONS, using  hbase&gt; # SPLITALGO (&quot;HexStringSplit&quot;, &quot;UniformSplit&quot; or classname)  hbase&gt; create &#39;t1&#39;, &#39;f1&#39;, &#123;NUMREGIONS =&gt; 15, SPLITALGO =&gt; &#39;HexStringSplit&#39;&#125;  hbase&gt; create &#39;t1&#39;, &#39;f1&#39;, &#123;NUMREGIONS =&gt; 15, SPLITALGO =&gt; &#39;HexStringSplit&#39;, REGION_REPLICATION =&gt; 2, CONFIGURATION =&gt; &#123;&#39;hbase.hregion.scan.loadColumnFamiliesOnDemand&#39; =&gt; &#39;true&#39;&#125;&#125;  hbase&gt; create &#39;t1&#39;, &#123;NAME =&gt; &#39;f1&#39;, DFS_REPLICATION =&gt; 1&#125;You can also keep around a reference to the created table:  hbase&gt; t1 = create &#39;t1&#39;, &#39;f1&#39;</code></pre><pre><code>create &#39;orderinfo&#39;,&#39;sku&#39;,&#39;order&#39;</code></pre><p>查看表信息:</p><pre><code>hbase(main):004:0&gt; describe &#39;orderinfo&#39;Table orderinfo is ENABLED                                                                                              orderinfo                                                                                                               COLUMN FAMILIES DESCRIPTION                                                                                             &#123;NAME =&gt; &#39;order&#39;, BLOOMFILTER =&gt; &#39;ROW&#39;, VERSIONS =&gt; &#39;1&#39;, IN_MEMORY =&gt; &#39;false&#39;, KEEP_DELETED_CELLS =&gt; &#39;FALSE&#39;, DATA_BLOCK_ENCODING =&gt; &#39;NONE&#39;, TTL =&gt; &#39;FOREVER&#39;, COMPRESSION =&gt; &#39;NONE&#39;, MIN_VERSIONS =&gt; &#39;0&#39;, BLOCKCACHE =&gt; &#39;true&#39;, BLOCKSIZE =&gt; &#39;65536&#39;, REPLICATION_SCOPE =&gt; &#39;0&#39;&#125;                                                                                        &#123;NAME =&gt; &#39;sku&#39;, BLOOMFILTER =&gt; &#39;ROW&#39;, VERSIONS =&gt; &#39;1&#39;, IN_MEMORY =&gt; &#39;false&#39;, KEEP_DELETED_CELLS =&gt; &#39;FALSE&#39;, DATA_BLOCK_ENCODING =&gt; &#39;NONE&#39;, TTL =&gt; &#39;FOREVER&#39;, COMPRESSION =&gt; &#39;NONE&#39;, MIN_VERSIONS =&gt; &#39;0&#39;, BLOCKCACHE =&gt; &#39;true&#39;, BLOCKSIZE =&gt; &#39;65536&#39;, REPLICATION_SCOPE =&gt; &#39;0&#39;&#125;</code></pre><p>插入数据</p><pre><code>put &#39;orderinfo&#39;,&#39;row1&#39;,&#39;sku:skuname&#39;,&#39;红心火龙果&#39;put &#39;orderinfo&#39;,&#39;row1&#39;,&#39;sku:skunum&#39;,&#39;24&#39;put &#39;orderinfo&#39;,&#39;row1&#39;,&#39;sku:skunum&#39;,&#39;15&#39;</code></pre><p>查看表:</p><pre><code>hbase(main):009:0&gt; scan &#39;orderinfo&#39;ROW                             COLUMN+CELL                                                                              row1                           column=sku:skuname, timestamp=1618720689465, value=\xE7\xBA\xA2\xE5\xBF\x83\xE7\x81\xAB\                                xE9\xBE\x99\xE6\x9E\x9C                                                                  row1                           column=sku:skunum, timestamp=1618720691177, value=15     </code></pre><p>更新数据:</p><pre><code>put &#39;orderinfo&#39;,&#39;row1&#39;,&#39;sku:skuname&#39;,&#39;friut&#39;hbase(main):011:0&gt; scan &#39;orderinfo&#39;ROW                             COLUMN+CELL                                                                              row1                           column=sku:skuname, timestamp=1618720848467, value=friut                                 row1                           column=sku:skunum, timestamp=1618720691177, value=15</code></pre><pre><code>get &#39;orderinfo&#39;,&#39;row1&#39;,&#123;COLUMN =&gt; &#39;sku:skuname&#39;&#125;</code></pre><p>删除:</p><pre><code>delete &#39;orderinfo&#39;,&#39;row1&#39;,&#39;sku:skuname&#39;</code></pre><p>删除表:</p><pre><code>hbase(main):017:0&gt; drop &#39;orderinfo&#39;ERROR: Table orderinfo is enabled. Disable it first.Drop the named table. Table must first be disabled:  hbase&gt; drop &#39;t1&#39;  hbase&gt; drop &#39;ns1:t1&#39;  需要先 disable表hbase(main):018:0&gt; disable &#39;orderinfo&#39;0 row(s) in 2.2550 secondshbase(main):019:0&gt; drop &#39;orderinfo&#39;0 row(s) in 1.2450 seconds</code></pre><p>多版本</p><pre><code>alter &#39;orderinfo&#39;,&#123;NAME =&gt; &#39;sku&#39;,VERSIONS =&gt; 3&#125;</code></pre><pre><code>hbase(main):023:0&gt; put &#39;orderinfo&#39;,&#39;row1&#39;,&#39;sku:skunum&#39;,&#39;24&#39;0 row(s) in 0.0070 secondshbase(main):024:0&gt; put &#39;orderinfo&#39;,&#39;row1&#39;,&#39;sku:skunum&#39;,&#39;15&#39;0 row(s) in 0.0070 seconds</code></pre><p>查看多个版本:</p><pre><code>get &#39;orderinfo&#39;,&#39;row1&#39;,&#123;COLUMN =&gt;&#39;sku:skunum&#39;,VERSIONS =&gt; 3&#125;</code></pre><p>表的组成:</p><p>rowkey:是每一条数据的主键</p><p>column family:列簇,列族</p><p>column:是属于列簇,可以动态添加</p><p>version:版本 类型是long    默认是时间戳</p><p>value:数据</p><p>KV结构存储,K是rowkey,V是value</p><p>一行row数据是可以包含一个或者多个CF,但并不推荐一张表超过3个.</p><p>column是属于CF,一个CF可以包含一个或者多个column.</p><p>实际生产上,就一个默认的CF</p><p>region:是一段数据的集合,存储在hregionserver节点上.</p><p>数据模型-逻辑视图:</p><p><img src="https://i.loli.net/2021/04/18/1U4tZKQCir7nFRV.png">整个数据是由rowkey按字典顺序排序.</p><p>null值是不会存储的</p><p>会按照rk进行字典排序,在横向切割.切割的数据是存储在region里面.</p><p>数据模型-物理视图:</p><p><img src="https://i.loli.net/2021/04/18/bVdMDkEamui3vRP.png"></p><p>数据以K-V结构存储,每个K-V只存储一个单元格的数据</p><p>不同的CF数据是存储在不同的文件里.</p><p>region划分:</p><p><img src="https://i.loli.net/2021/04/18/rnLgtk6pPBZeoHN.png"></p><p>表按rowkey按范围划分为不同的region,region按照CF划分为不同的store,store包含memstore和storefile.</p><p>建表时默认是1个region,如果特意指定split key,就会有多个region,当数据存储超过阈值, 表会按水平方向分隔为2个region.可以认为region就是表的子表.不同的region被master会被分配给合适的rs节点管理.</p><p>一个rs节点管理多个region,一个region管理1个或多个CF.</p><p>数据模型-物理视图-多版本;</p><p><img src="https://i.loli.net/2021/04/18/GcYSjOVwFRzLIaq.png"></p><p>将row2的skuname从红心火龙果更新为白心火龙果.</p><p>底层是存储了两条数据,版本不一致.</p><p>HBase支持多版本特性,可以通过时间戳来实现.</p><p>put（相当于insert、updata）、delete都会产生一个新的cell，都拥有一个版本。</p><p>查询默认是返回数据的最新版本数据，可以通过指定版本号来获取旧的数据。</p><p>进入HBase：</p><pre><code> sh hbase shell</code></pre><p>常用命令:</p><pre><code>hbase(main):001:0&gt; helpHBase Shell, version 1.2.0-cdh5.16.2, rUnknown, Mon Jun  3 03:50:06 PDT 2019Type &#39;help &quot;COMMAND&quot;&#39;, (e.g. &#39;help &quot;get&quot;&#39; -- the quotes are necessary) for help on a specific command.Commands are grouped. Type &#39;help &quot;COMMAND_GROUP&quot;&#39;, (e.g. &#39;help &quot;general&quot;&#39;) for help on a command group.COMMAND GROUPS:  Group name: general  Commands: status, table_help, version, whoami  Group name: ddl  Commands: alter, alter_async, alter_status, create, describe, disable, disable_all, drop, drop_all, enable, enable_all, exists, get_table, is_disabled, is_enabled, list, locate_region, show_filters  Group name: namespace  Commands: alter_namespace, create_namespace, describe_namespace, drop_namespace, list_namespace, list_namespace_tables  Group name: dml  Commands: append, count, delete, deleteall, get, get_counter, get_splits, incr, put, scan, truncate, truncate_preserve  Group name: tools  Commands: assign, balance_switch, balancer, balancer_enabled, catalogjanitor_enabled, catalogjanitor_run, catalogjanitor_switch, close_region, compact, compact_mob, compact_rs, flush, is_in_maintenance_mode, major_compact, major_compact_mob, merge_region, move, normalize, normalizer_enabled, normalizer_switch, split, splitormerge_enabled, splitormerge_switch, trace, unassign, wal_roll, zk_dump  Group name: replication  Commands: add_peer, append_peer_tableCFs, disable_peer, disable_table_replication, enable_peer, enable_table_replication, get_peer_config, list_peer_configs, list_peers, list_replicated_tables, remove_peer, remove_peer_tableCFs, set_peer_tableCFs, show_peer_tableCFs, update_peer_config  Group name: snapshots  Commands: clone_snapshot, delete_all_snapshot, delete_snapshot, list_snapshots, restore_snapshot, snapshot  Group name: configuration  Commands: update_all_config, update_config  Group name: quotas  Commands: list_quotas, set_quota  Group name: security  Commands: grant, list_security_capabilities, revoke, user_permission  Group name: procedures  Commands: abort_procedure, list_procedures  Group name: visibility labels  Commands: add_labels, clear_auths, get_auths, list_labels, set_auths, set_visibility  Group name: rsgroup  Commands: add_rsgroup, balance_rsgroup, get_rsgroup, get_server_rsgroup, get_table_rsgroup, list_rsgroups, move_servers_rsgroup, move_tables_rsgroup, remove_rsgroupSHELL USAGE:Quote all names in HBase Shell such as table and column names.  Commas delimitcommand parameters.  Type &lt;RETURN&gt; after entering a command to run it.Dictionaries of configuration used in the creation and alteration of tables areRuby Hashes. They look like this:  &#123;&#39;key1&#39; =&gt; &#39;value1&#39;, &#39;key2&#39; =&gt; &#39;value2&#39;, ...&#125;and are opened and closed with curley-braces.  Key/values are delimited by the&#39;=&gt;&#39; character combination.  Usually keys are predefined constants such asNAME, VERSIONS, COMPRESSION, etc.  Constants do not need to be quoted.  Type&#39;Object.constants&#39; to see a (messy) list of all constants in the environment.If you are using binary keys or values and need to enter them in the shell, usedouble-quote&#39;d hexadecimal representation. For example:  hbase&gt; get &#39;t1&#39;, &quot;key\x03\x3f\xcd&quot;  hbase&gt; get &#39;t1&#39;, &quot;key\003\023\011&quot;  hbase&gt; put &#39;t1&#39;, &quot;test\xef\xff&quot;, &#39;f1:&#39;, &quot;\x01\x33\x40&quot;</code></pre><p>建表:</p><pre><code>Create a table with namespace=ns1 and table qualifier=t1  hbase&gt; create &#39;ns1:t1&#39;, &#123;NAME =&gt; &#39;f1&#39;, VERSIONS =&gt; 5&#125;Create a table with namespace=default and table qualifier=t1  hbase&gt; create &#39;t1&#39;, &#123;NAME =&gt; &#39;f1&#39;&#125;, &#123;NAME =&gt; &#39;f2&#39;&#125;, &#123;NAME =&gt; &#39;f3&#39;&#125;  hbase&gt; # The above in shorthand would be the following:  hbase&gt; create &#39;t1&#39;, &#39;f1&#39;, &#39;f2&#39;, &#39;f3&#39;  hbase&gt; create &#39;t1&#39;, &#123;NAME =&gt; &#39;f1&#39;, VERSIONS =&gt; 1, TTL =&gt; 2592000, BLOCKCACHE =&gt; true&#125;  hbase&gt; create &#39;t1&#39;, &#123;NAME =&gt; &#39;f1&#39;, CONFIGURATION =&gt; &#123;&#39;hbase.hstore.blockingStoreFiles&#39; =&gt; &#39;10&#39;&#125;&#125;  hbase&gt; create &#39;t1&#39;, &#123;NAME =&gt; &#39;f1&#39;, IS_MOB =&gt; true, MOB_THRESHOLD =&gt; 1000000, MOB_COMPACT_PARTITION_POLICY =&gt; &#39;weekly&#39;&#125;Table configuration options can be put at the end.Examples:  hbase&gt; create &#39;ns1:t1&#39;, &#39;f1&#39;, SPLITS =&gt; [&#39;10&#39;, &#39;20&#39;, &#39;30&#39;, &#39;40&#39;]  hbase&gt; create &#39;t1&#39;, &#39;f1&#39;, SPLITS =&gt; [&#39;10&#39;, &#39;20&#39;, &#39;30&#39;, &#39;40&#39;]  hbase&gt; create &#39;t1&#39;, &#39;f1&#39;, SPLITS_FILE =&gt; &#39;splits.txt&#39;, OWNER =&gt; &#39;johndoe&#39;  hbase&gt; create &#39;t1&#39;, &#123;NAME =&gt; &#39;f1&#39;, VERSIONS =&gt; 5&#125;, METADATA =&gt; &#123; &#39;mykey&#39; =&gt; &#39;myvalue&#39; &#125;  hbase&gt; # Optionally pre-split the table into NUMREGIONS, using  hbase&gt; # SPLITALGO (&quot;HexStringSplit&quot;, &quot;UniformSplit&quot; or classname)  hbase&gt; create &#39;t1&#39;, &#39;f1&#39;, &#123;NUMREGIONS =&gt; 15, SPLITALGO =&gt; &#39;HexStringSplit&#39;&#125;  hbase&gt; create &#39;t1&#39;, &#39;f1&#39;, &#123;NUMREGIONS =&gt; 15, SPLITALGO =&gt; &#39;HexStringSplit&#39;, REGION_REPLICATION =&gt; 2, CONFIGURATION =&gt; &#123;&#39;hbase.hregion.scan.loadColumnFamiliesOnDemand&#39; =&gt; &#39;true&#39;&#125;&#125;  hbase&gt; create &#39;t1&#39;, &#123;NAME =&gt; &#39;f1&#39;, DFS_REPLICATION =&gt; 1&#125;You can also keep around a reference to the created table:  hbase&gt; t1 = create &#39;t1&#39;, &#39;f1&#39;</code></pre><pre><code>create &#39;orderinfo&#39;,&#39;sku&#39;,&#39;order&#39;</code></pre><p>查看表信息:</p><pre><code>hbase(main):004:0&gt; describe &#39;orderinfo&#39;Table orderinfo is ENABLED                                                                                              orderinfo                                                                                                               COLUMN FAMILIES DESCRIPTION                                                                                             &#123;NAME =&gt; &#39;order&#39;, BLOOMFILTER =&gt; &#39;ROW&#39;, VERSIONS =&gt; &#39;1&#39;, IN_MEMORY =&gt; &#39;false&#39;, KEEP_DELETED_CELLS =&gt; &#39;FALSE&#39;, DATA_BLOCK_ENCODING =&gt; &#39;NONE&#39;, TTL =&gt; &#39;FOREVER&#39;, COMPRESSION =&gt; &#39;NONE&#39;, MIN_VERSIONS =&gt; &#39;0&#39;, BLOCKCACHE =&gt; &#39;true&#39;, BLOCKSIZE =&gt; &#39;65536&#39;, REPLICATION_SCOPE =&gt; &#39;0&#39;&#125;                                                                                        &#123;NAME =&gt; &#39;sku&#39;, BLOOMFILTER =&gt; &#39;ROW&#39;, VERSIONS =&gt; &#39;1&#39;, IN_MEMORY =&gt; &#39;false&#39;, KEEP_DELETED_CELLS =&gt; &#39;FALSE&#39;, DATA_BLOCK_ENCODING =&gt; &#39;NONE&#39;, TTL =&gt; &#39;FOREVER&#39;, COMPRESSION =&gt; &#39;NONE&#39;, MIN_VERSIONS =&gt; &#39;0&#39;, BLOCKCACHE =&gt; &#39;true&#39;, BLOCKSIZE =&gt; &#39;65536&#39;, REPLICATION_SCOPE =&gt; &#39;0&#39;&#125;</code></pre><p>插入数据</p><pre><code>put &#39;orderinfo&#39;,&#39;row1&#39;,&#39;sku:skuname&#39;,&#39;红心火龙果&#39;put &#39;orderinfo&#39;,&#39;row1&#39;,&#39;sku:skunum&#39;,&#39;24&#39;put &#39;orderinfo&#39;,&#39;row1&#39;,&#39;sku:skunum&#39;,&#39;15&#39;</code></pre><p>查看表:</p><pre><code>hbase(main):009:0&gt; scan &#39;orderinfo&#39;ROW                             COLUMN+CELL                                                                              row1                           column=sku:skuname, timestamp=1618720689465, value=\xE7\xBA\xA2\xE5\xBF\x83\xE7\x81\xAB\                                xE9\xBE\x99\xE6\x9E\x9C                                                                  row1                           column=sku:skunum, timestamp=1618720691177, value=15     </code></pre><p>更新数据:</p><pre><code>put &#39;orderinfo&#39;,&#39;row1&#39;,&#39;sku:skuname&#39;,&#39;friut&#39;hbase(main):011:0&gt; scan &#39;orderinfo&#39;ROW                             COLUMN+CELL                                                                              row1                           column=sku:skuname, timestamp=1618720848467, value=friut                                 row1                           column=sku:skunum, timestamp=1618720691177, value=15</code></pre><pre><code>get &#39;orderinfo&#39;,&#39;row1&#39;,&#123;COLUMN =&gt; &#39;sku:skuname&#39;&#125;</code></pre><p>删除:</p><pre><code>delete &#39;orderinfo&#39;,&#39;row1&#39;,&#39;sku:skuname&#39;</code></pre><p>删除表:</p><pre><code>hbase(main):017:0&gt; drop &#39;orderinfo&#39;ERROR: Table orderinfo is enabled. Disable it first.Drop the named table. Table must first be disabled:  hbase&gt; drop &#39;t1&#39;  hbase&gt; drop &#39;ns1:t1&#39;  需要先 disable表hbase(main):018:0&gt; disable &#39;orderinfo&#39;0 row(s) in 2.2550 secondshbase(main):019:0&gt; drop &#39;orderinfo&#39;0 row(s) in 1.2450 seconds</code></pre><p>多版本</p><pre><code>alter &#39;orderinfo&#39;,&#123;NAME =&gt; &#39;sku&#39;,VERSIONS =&gt; 3&#125;</code></pre><pre><code>hbase(main):023:0&gt; put &#39;orderinfo&#39;,&#39;row1&#39;,&#39;sku:skunum&#39;,&#39;24&#39;0 row(s) in 0.0070 secondshbase(main):024:0&gt; put &#39;orderinfo&#39;,&#39;row1&#39;,&#39;sku:skunum&#39;,&#39;15&#39;0 row(s) in 0.0070 seconds</code></pre><p>查看多个版本:</p><pre><code>get &#39;orderinfo&#39;,&#39;row1&#39;,&#123;COLUMN =&gt;&#39;sku:skunum&#39;,VERSIONS =&gt; 3&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> HBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark查询Hive多分隔符问题</title>
      <link href="2019/10/12/spark-cha-xun-hive-duo-fen-ge-fu-wen-ti/"/>
      <url>2019/10/12/spark-cha-xun-hive-duo-fen-ge-fu-wen-ti/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_32854205/article/details/102956226">https://blog.csdn.net/qq_32854205/article/details/102956226</a></p>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ClickHouse</title>
      <link href="2019/09/15/clickhouse/"/>
      <url>2019/09/15/clickhouse/</url>
      
        <content type="html"><![CDATA[<p>启动:</p><pre><code>sudo service clickhouse-server start</code></pre><p>登陆客户端:</p><pre><code>clickhouse-client -m</code></pre><p>查看库:</p><pre><code>show database;</code></pre><p>查看当前是哪个数据库:</p><pre><code>select currentDatabase();</code></pre><p>创建库:</p><pre><code>create database test;</code></pre><p>使用库:</p><pre><code>use test;</code></pre><p>创建表:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">db</span><span class="token punctuation">.</span><span class="token punctuation">]</span>table_name <span class="token punctuation">[</span><span class="token keyword">ON</span> CLUSTER cluster<span class="token punctuation">]</span><span class="token punctuation">(</span>    name1 <span class="token punctuation">[</span>type1<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token boolean">NULL</span><span class="token operator">|</span><span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token operator">|</span>MATERIALIZED<span class="token operator">|</span>ALIAS expr1<span class="token punctuation">]</span> <span class="token punctuation">[</span>compression_codec<span class="token punctuation">]</span> <span class="token punctuation">[</span>TTL expr1<span class="token punctuation">]</span><span class="token punctuation">,</span>    name2 <span class="token punctuation">[</span>type2<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token boolean">NULL</span><span class="token operator">|</span><span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token operator">|</span>MATERIALIZED<span class="token operator">|</span>ALIAS expr2<span class="token punctuation">]</span> <span class="token punctuation">[</span>compression_codec<span class="token punctuation">]</span> <span class="token punctuation">[</span>TTL expr2<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">engine</span></code></pre><pre><code>create table user(id Int8,name String) ENGINE = TinyLog;</code></pre><p>插入数据:</p><pre><code>insert into table user values(1,&#39;zhangsan&#39;),(2,&#39;lisi&#39;);</code></pre><p>查询表数据:</p><pre><code>select * from user;</code></pre><p>Clickhouse路径:</p><pre><code>/etc/clickhouse-server[root@warehouse001 clickhouse-server]# lltotal 68dr-x------ 2 clickhouse clickhouse  4096 Jun  1 20:38 config.d-r-------- 1 clickhouse clickhouse 51618 May 29 23:08 config.xmldr-x------ 2 clickhouse clickhouse  4096 Jun  1 20:38 users.d-r-------- 1 clickhouse clickhouse  6053 May 29 23:08 users.xml[root@warehouse001 clickhouse-server]# </code></pre><p>数据存储路径:</p><pre><code>/var/lib/clickhouse/data</code></pre><p>修改用户配置/etc/clickhouse-server/users.xml:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>users</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hadoop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>000000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>networks</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ip</span><span class="token punctuation">></span></span>::/0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ip</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>networks</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>quota</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>quota</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hadoop</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>users</span><span class="token punctuation">></span></span></code></pre><p>修改端口/etc/clickhouse-server/config.xml:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tcp_port</span><span class="token punctuation">></span></span>9530<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tcp_port</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listen_host</span><span class="token punctuation">></span></span>::<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listen_host</span><span class="token punctuation">></span></span></code></pre><p>启动命令:</p><pre><code>clickhouse-client --host=warehouse001 --port=9530</code></pre><p>常用数据类型:</p><p>​    数值类型</p><p>​    字符串类型</p><p>​    日期时间类型</p><p>​    复杂/复合数据类型</p>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ClickHouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MaxWell</title>
      <link href="2019/08/12/maxwell/"/>
      <url>2019/08/12/maxwell/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> MaxWell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MaxWell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程</title>
      <link href="2019/08/12/bing-fa-bian-cheng/"/>
      <url>2019/08/12/bing-fa-bian-cheng/</url>
      
        <content type="html"><![CDATA[<p>Hadoop通信流程:</p><p>1.启动Hadoop的NN</p><p>2.启动Hadoop的DN</p><p>3.DN与NN建立连接,并返回资源信息</p><p>4.NN接收DN发送过来的信息,并记录下来</p><p>5.NN发送一个信息个DN:连接成功</p><p>6.DN定期发送心跳信息给NN(更新改DN的最后心跳时间)</p><p>7.NN定期检查DN的健康状态,挂掉就移除</p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NameNode源码解析</title>
      <link href="2019/05/31/hadoop-yuan-ma-jie-xi-01/"/>
      <url>2019/05/31/hadoop-yuan-ma-jie-xi-01/</url>
      
        <content type="html"><![CDATA[<p>NameNode的启动:</p><p> hadoop-daemon.sh调用:</p><pre class=" language-shell"><code class="language-shell"> echo starting $command, logging to $log    cd "$HADOOP_PREFIX"    case $command in      namenode|secondarynamenode|datanode|journalnode|dfs|dfsadmin|fsck|balancer|zkfc)        if [ -z "$HADOOP_HDFS_HOME" ]; then          hdfsScript="$HADOOP_PREFIX"/bin/hdfs        else          hdfsScript="$HADOOP_HDFS_HOME"/bin/hdfs        fi        nohup nice -n $HADOOP_NICENESS $hdfsScript --config $HADOOP_CONF_DIR $command "$@" > "$log" 2>&1 < /dev/null &      ;;</code></pre><pre><code> hadoop-daemon.sh start namenode</code></pre><p>NameNode职责:</p><p>NameNode.java</p><pre><code>* NameNode serves as both directory namespace manager and* &quot;inode table&quot; for the Hadoop DFS.  There is a single NameNode* running in any DFS deployment.  (Well, except when there* is a second backup/failover NameNode, or when using federated NameNodes.) * The NameNode controls two critical tables: *   1)  filename-&gt;blocksequence (namespace) 文件到块,上传到HDFS被分成N多个块,文件到block的映射 *   2)  block-&gt;machinelist (&quot;inodes&quot;) block到datanode的映射 * The first table is stored on disk and is very precious. * The second table is rebuilt every time the NameNode comes up. * &#39;NameNode&#39; refers to both this class as well as the &#39;NameNode server&#39;. * The &#39;FSNamesystem&#39; class actually performs most of the filesystem * management.  The majority of the &#39;NameNode&#39; class itself is concerned * with exposing the IPC interface and the HTTP server to the outside world, * plus some configuration management.</code></pre><p>NameNode</p><p>​    处理外部的远程 调用,HttpServer</p><p>FSNamesystem</p><p>​    执行文件系统管理</p><p>NameNode server</p><p>​    RPC请求相关的</p><p>​    mkdir/ls/…</p><p>name的创建:</p><pre><code>NameNode namenode = createNameNode(argv, null);if (namenode != null) &#123;  namenode.join();&#125;</code></pre><pre><code>StartupOption startOpt = parseArguments(argv);//  获取op信息switch (startOpt) &#123;      case FORMAT: &#123;        boolean aborted = format(conf, startOpt.getForceFormat(),            startOpt.getInteractiveFormat());        terminate(aborted ? 1 : 0);        return null; // avoid javac warning      &#125;      case GENCLUSTERID: &#123;        System.err.println(&quot;Generating new cluster id:&quot;);        System.out.println(NNStorage.newClusterID());        terminate(0);        return null;      &#125;      case FINALIZE: &#123;        System.err.println(&quot;Use of the argument &#39;&quot; + StartupOption.FINALIZE +            &quot;&#39; is no longer supported. To finalize an upgrade, start the NN &quot; +            &quot; and then run `hdfs dfsadmin -finalizeUpgrade&#39;&quot;);        terminate(1);        return null; // avoid javac warning      &#125;      case ROLLBACK: &#123;        boolean aborted = doRollback(conf, true);        terminate(aborted ? 1 : 0);        return null; // avoid warning      &#125;      case BOOTSTRAPSTANDBY: &#123;        String toolArgs[] = Arrays.copyOfRange(argv, 1, argv.length);        int rc = BootstrapStandby.run(toolArgs, conf);        terminate(rc);        return null; // avoid warning      &#125;      case INITIALIZESHAREDEDITS: &#123;        boolean aborted = initializeSharedEdits(conf,            startOpt.getForceFormat(),            startOpt.getInteractiveFormat());        terminate(aborted ? 1 : 0);        return null; // avoid warning      &#125;      case BACKUP:      case CHECKPOINT: &#123;        NamenodeRole role = startOpt.toNodeRole();        DefaultMetricsSystem.initialize(role.toString().replace(&quot; &quot;, &quot;&quot;));        return new BackupNode(conf, role);      &#125;      case RECOVER: &#123;        NameNode.doRecovery(startOpt, conf);        return null;      &#125;      case METADATAVERSION: &#123;        printMetadataVersion(conf);        terminate(0);        return null; // avoid javac warning      &#125;      case UPGRADEONLY: &#123;        DefaultMetricsSystem.initialize(&quot;NameNode&quot;);        new NameNode(conf);        terminate(0);        return null;      &#125;      default: &#123;        DefaultMetricsSystem.initialize(&quot;NameNode&quot;);        return new NameNode(conf);      &#125;</code></pre><p>NameNode的核心成员变量:</p><pre><code>FSNamesystem namesystem;</code></pre><pre><code>Configuration conf;</code></pre><pre><code>NamenodeRole role;</code></pre><pre><code>HAState state;</code></pre><pre><code>boolean haEnabled;</code></pre><pre><code>HAContext haContext;</code></pre><pre><code>NameNodeHttpServer httpServer;</code></pre><pre><code>NameNodeRpcServer rpcServer;</code></pre><p>启动HttpServer:</p><pre><code>startHttpServer(conf);</code></pre><p>加载Namesystem:</p><pre><code>loadNamesystem(conf);</code></pre><p>创建RpcServer:</p><pre><code>rpcServer = createRpcServer(conf);</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark-SQL 03</title>
      <link href="2019/05/31/spark-sql03/"/>
      <url>2019/05/31/spark-sql03/</url>
      
        <content type="html"><![CDATA[<p>数据源操作:</p><p>Json:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">def</span> json<span class="token punctuation">(</span>spark<span class="token operator">:</span>SparkSession<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_    <span class="token keyword">val</span> df <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"data/people.json"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    df.select("name","age")//.filter("id = 1").show()</span><span class="token comment" spellcheck="true">//      .filter('user === "tom")</span><span class="token comment" spellcheck="true">//    df.printSchema()</span><span class="token comment" spellcheck="true">//    df.show()</span>    <span class="token comment" spellcheck="true">/**    root       |-- age: long (nullable = true)       |-- info: struct (nullable = true)       |    |-- home: string (nullable = true)       |    |-- work: string (nullable = true)       |-- name: string (nullable = true)      +---+-------------------+-------+      |age|               info|   name|      +---+-------------------+-------+      | 30|&amp;#123;beijing, shanghai&amp;#125;|charlie|      +---+-------------------+-------+     */</span>    df<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'name, '</span>age<span class="token punctuation">,</span>$<span class="token string">"info.home"</span><span class="token punctuation">.</span>as<span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>write<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mode<span class="token punctuation">(</span>SaveMode<span class="token punctuation">.</span>Overwrite<span class="token punctuation">)</span>      <span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"out/info"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**    +-------+---+-------+    |   name|age|   home|    +-------+---+-------+    |charlie| 30|beijing|    +-------+---+-------+     */</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>CSV:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">def</span> csv<span class="token punctuation">(</span>spark<span class="token operator">:</span>SparkSession<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_    <span class="token keyword">val</span> df <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"csv"</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 带头信息</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">,</span><span class="token string">"true"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"sep"</span><span class="token punctuation">,</span><span class="token string">";"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"data/people.csv"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**    root       |-- name: string (nullable = true)       |-- age: string (nullable = true)       |-- job: string (nullable = true)      +-------+---+---------+      |   name|age|      job|      +-------+---+---------+      |   Judy| 27|Developer|      |Charlie| 18|Developer|      +-------+---+---------+     */</span>    df<span class="token punctuation">.</span>filter<span class="token punctuation">(</span><span class="token string">"name = 'Judy'"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>write      <span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"csv"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">,</span><span class="token string">"true"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"sep"</span><span class="token punctuation">,</span><span class="token string">";"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>mode<span class="token punctuation">(</span>SaveMode<span class="token punctuation">.</span>Overwrite<span class="token punctuation">)</span>      <span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"out/csv/"</span><span class="token punctuation">)</span>    df<span class="token punctuation">.</span>printSchema<span class="token punctuation">(</span><span class="token punctuation">)</span>    df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Parquet:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">def</span> parquet<span class="token punctuation">(</span>spark<span class="token operator">:</span>SparkSession<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_    <span class="token keyword">val</span> df <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"parquet"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"data/users.parquet"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    df.printSchema()</span><span class="token comment" spellcheck="true">//    df.show()</span>    df<span class="token punctuation">.</span>write      <span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>mode<span class="token punctuation">(</span>SaveMode<span class="token punctuation">.</span>Overwrite<span class="token punctuation">)</span>      <span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"out/parquet/"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>JDBC:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">def</span> jdbc<span class="token punctuation">(</span>spark<span class="token operator">:</span>SparkSession<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_    <span class="token keyword">val</span> df <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"jdbc"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span><span class="token string">"jdbc:mysql://warehouse001:3306/hive_metadata"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"ruozedata"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"dbtable"</span><span class="token punctuation">,</span><span class="token string">"TBLS"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>load    <span class="token comment" spellcheck="true">/**     * 保存数据到表中会自动创建表,但字段类型长度可能会有问题     */</span>    df<span class="token punctuation">.</span>filter<span class="token punctuation">(</span><span class="token symbol">'DB_ID</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>write      <span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"jdbc"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>mode<span class="token punctuation">(</span>SaveMode<span class="token punctuation">.</span>Overwrite<span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span><span class="token string">"jdbc:mysql://warehouse001:3306/hive_metadata"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"ruozedata"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"dbtable"</span><span class="token punctuation">,</span><span class="token string">"TBLS_BAK"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//        df.printSchema()</span><span class="token comment" spellcheck="true">//        df.show()</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>把JDBC参数改成配置文件:</p><p>1.在resource下面创建application.conf:</p><pre class=" language-conf"><code class="language-conf">db.default.driver = "com.mysql.jdbc.Driver"db.default.url = "jdbc:mysql://warehouse001:3306/hive_metadata"db.default.user = "root"db.default.password = "xxxx"</code></pre><p>2.在pom.xml中添加:</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.typesafe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>3.修改代码:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">def</span> jdbc2<span class="token punctuation">(</span>spark<span class="token operator">:</span>SparkSession<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_    <span class="token keyword">val</span> config <span class="token operator">=</span> ConfigFactory<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> url <span class="token operator">=</span> config<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token string">"db.default.url"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> user <span class="token operator">=</span> config<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token string">"db.default.user"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> password <span class="token operator">=</span> config<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token string">"db.default.password"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> table <span class="token operator">=</span> config<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token string">"db.default.source.table"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> df <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"jdbc"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"dbtable"</span><span class="token punctuation">,</span> table<span class="token punctuation">)</span>      <span class="token punctuation">.</span>load    df<span class="token punctuation">.</span>printSchema<span class="token punctuation">(</span><span class="token punctuation">)</span>    df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark-core core实现分组TopN</title>
      <link href="2019/05/31/spark-core-zeng-qiang.03/"/>
      <url>2019/05/31/spark-core-zeng-qiang.03/</url>
      
        <content type="html"><![CDATA[<p>测试数据:</p><pre class=" language-txt"><code class="language-txt">c1 1c2 1c3 3c1 1c1 1c3 1c3 1c2 2c2 2c1 2c1 3c2 2c4 2</code></pre><p>代码实现:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> topn<span class="token keyword">import</span> com<span class="token punctuation">.</span>myutils<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ContextUtils<span class="token keyword">import</span> com<span class="token punctuation">.</span>myutils<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ImplicitAspect<span class="token punctuation">.</span>rdd2RichRDD<span class="token keyword">object</span> TopNApp01 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> ContextUtils<span class="token punctuation">.</span>getSparkContext<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getSimpleName<span class="token punctuation">)</span>    <span class="token keyword">val</span> lines <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"data/group/test.txt"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      .foreach(println)</span>    lines<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> name <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> cnt <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span>      <span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>      <span class="token punctuation">.</span>flatMapValues<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里toList只适用于数据量小的场景</span>        x<span class="token punctuation">.</span>toList<span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span><span class="token operator">-</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span>          <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>_1<span class="token punctuation">.</span>_1<span class="token punctuation">,</span> x<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>take<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token punctuation">(</span>x<span class="token punctuation">.</span>_1<span class="token punctuation">,</span>x<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>_1<span class="token punctuation">,</span>x<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>_2<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>printInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> topn<span class="token keyword">import</span> com<span class="token punctuation">.</span>myutils<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ContextUtils<span class="token keyword">import</span> com<span class="token punctuation">.</span>myutils<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ImplicitAspect<span class="token punctuation">.</span>rdd2RichRDD<span class="token keyword">object</span> TopNApp01 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> ContextUtils<span class="token punctuation">.</span>getSparkContext<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getSimpleName<span class="token punctuation">)</span>    <span class="token keyword">val</span> lines <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"data/group/test.txt"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      .foreach(println)</span>    <span class="token keyword">val</span> process <span class="token operator">=</span> lines<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> name <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> cnt <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//  最基本的实现方式</span><span class="token comment" spellcheck="true">//      process.reduceByKey(_ + _)</span><span class="token comment" spellcheck="true">//      .groupBy(_._1._1)</span><span class="token comment" spellcheck="true">//      .flatMapValues(x => &amp;#123;</span><span class="token comment" spellcheck="true">//        // 这里toList只适用于数据量小的场景</span><span class="token comment" spellcheck="true">//        x.toList.sortBy(-_._2)</span><span class="token comment" spellcheck="true">//          .map(x => (x._1._1, x._2)).take(2)</span><span class="token comment" spellcheck="true">//      &amp;#125;).map(x => &amp;#123;</span><span class="token comment" spellcheck="true">//      (x._1,x._2._1,x._2._2)</span><span class="token comment" spellcheck="true">//    &amp;#125;)</span><span class="token comment" spellcheck="true">//      .printInfo()</span><span class="token comment" spellcheck="true">//    val c1 = process.filter(_._1._1 == "c1")</span><span class="token comment" spellcheck="true">//    c1.reduceByKey(_ + _).sortBy(-_._2).take(2).foreach(println)</span>    <span class="token comment" spellcheck="true">/**     * 这里出现了10个job,并且name是写死的     */</span><span class="token comment" spellcheck="true">//    val name = Array("c1","c2","c3","c4")</span><span class="token comment" spellcheck="true">//    name.map(x => &amp;#123;</span><span class="token comment" spellcheck="true">//      process.filter(_._1._1 == x).reduceByKey(_ + _).sortBy(-_._2).take(2).foreach(println)</span><span class="token comment" spellcheck="true">//    &amp;#125;)</span>    <span class="token comment" spellcheck="true">/**     * 这里报错     * org.apache.spark.SparkException: This RDD lacks a SparkContext. It could happen in the following cases:     * (1) RDD transformations and actions are NOT invoked by the driver, but inside of other transformations; for example, rdd1.map(x => rdd2.values.count() * x) is invalid because the values transformation and count action cannot be performed inside of the rdd1.map transformation. For more information, see SPARK-5063.     * (2) When a Spark Streaming job recovers from checkpoint, this exception will be hit if a reference to an RDD not defined by the streaming job is used in DStream operations. For more information, See SPARK-13758.     * 原因在name RDD里使用了process RDD,而RDD是不能嵌套的,所以这里对site做collect(),返回的是一个数组     */</span>    <span class="token comment" spellcheck="true">// 取出每个name</span><span class="token comment" spellcheck="true">//    val site = process.map(_._1._1).distinct()</span>    <span class="token comment" spellcheck="true">// 但是这里也起了10个job,也同样不行</span>    <span class="token keyword">val</span> site <span class="token operator">=</span> process<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">.</span>distinct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>    site<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            process<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">.</span>_1 <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span><span class="token operator">-</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">.</span>take<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    Thread<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> topn<span class="token keyword">import</span> com<span class="token punctuation">.</span>myutils<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ContextUtils<span class="token keyword">import</span> com<span class="token punctuation">.</span>myutils<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ImplicitAspect<span class="token punctuation">.</span>rdd2RichRDD<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>Partitioner<span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token keyword">object</span> TopNApp02 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> ContextUtils<span class="token punctuation">.</span>getSparkContext<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getSimpleName<span class="token punctuation">)</span>    <span class="token keyword">val</span> lines <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"data/group/test.txt"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      .foreach(println)</span>    <span class="token keyword">val</span> process <span class="token operator">=</span> lines<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> name <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> cnt <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 把每个name的数据放到同一个分区中去执行,但是partitionBy是走shuffle的,所以也需要优化     */</span><span class="token comment" spellcheck="true">//    val names = process.map(_._1._1).distinct().collect()</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    process.reduceByKey(_ + _).partitionBy(new NamePartitioner(names))//.printInfo</span><span class="token comment" spellcheck="true">//      .mapPartitions(x => &amp;#123;</span><span class="token comment" spellcheck="true">//        x.toList.sortBy(-_._2).take(2).iterator</span><span class="token comment" spellcheck="true">//      &amp;#125;).printInfo()</span>    <span class="token keyword">val</span> names <span class="token operator">=</span> process<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">.</span>distinct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// reduceByKey可以传partitioner,但是toList还需要优化</span>    process<span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span><span class="token keyword">new</span> NamePartitioner<span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">,</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span>      <span class="token punctuation">.</span>mapPartitions<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        x<span class="token punctuation">.</span>toList<span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span><span class="token operator">-</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">.</span>take<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iterator      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>printInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>    Thread<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> NamePartitioner<span class="token punctuation">(</span>names<span class="token operator">:</span>Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Partitioner <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">val</span> namesMap <span class="token operator">=</span> mutable<span class="token punctuation">.</span>HashMap<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">0</span> until<span class="token punctuation">(</span>names<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  把name放到Map中去</span>    namesMap<span class="token punctuation">(</span>names<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> i  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> numPartitions<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> names<span class="token punctuation">.</span>size  <span class="token keyword">override</span> <span class="token keyword">def</span> getPartition<span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里的key是process中返回的类型,所以类型是(String, String)</span>    <span class="token keyword">val</span> name <span class="token operator">=</span> key<span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_1    namesMap<span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> topn<span class="token keyword">import</span> com<span class="token punctuation">.</span>myutils<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ContextUtils<span class="token keyword">import</span> com<span class="token punctuation">.</span>myutils<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ImplicitAspect<span class="token punctuation">.</span>rdd2RichRDD<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>Partitioner<span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token keyword">object</span> TopNApp03 <span class="token keyword">extends</span> Serializable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> ContextUtils<span class="token punctuation">.</span>getSparkContext<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getSimpleName<span class="token punctuation">)</span>    <span class="token keyword">val</span> lines <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"data/group/test.txt"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      .foreach(println)</span>    <span class="token keyword">val</span> process <span class="token operator">=</span> lines<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> name <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> cnt <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    implicit object obj extends Ordering[((String, String), Int)] &amp;#123;</span><span class="token comment" spellcheck="true">//      override def compare(x: ((String, String), Int), y: ((String, String), Int)): Int = &amp;#123;</span><span class="token comment" spellcheck="true">//        y._2 - x._2</span><span class="token comment" spellcheck="true">//      &amp;#125;</span><span class="token comment" spellcheck="true">//    &amp;#125;</span>    <span class="token keyword">val</span> names <span class="token operator">=</span> process<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">.</span>distinct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>    process<span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span><span class="token keyword">new</span> NamePartitioner<span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">,</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span>      <span class="token punctuation">.</span>mapPartitions<span class="token punctuation">(</span>partition <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> treeSet <span class="token operator">=</span> <span class="token keyword">new</span> mutable<span class="token punctuation">.</span>TreeSet<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">.</span>on<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>X <span class="token keyword">=></span> <span class="token operator">-</span>X<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span>        partition<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          treeSet<span class="token punctuation">.</span>add<span class="token punctuation">(</span>x<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//把后进来的移除掉</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>treeSet<span class="token punctuation">.</span>size <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果进来相等的时候就会把两个都移掉</span>            treeSet<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>treeSet<span class="token punctuation">.</span>last<span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        treeSet<span class="token punctuation">.</span>iterator      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>printInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    Thread.sleep(Int.MaxValue)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> topn<span class="token keyword">import</span> com<span class="token punctuation">.</span>myutils<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ContextUtils<span class="token keyword">import</span> com<span class="token punctuation">.</span>myutils<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ImplicitAspect<span class="token punctuation">.</span>rdd2RichRDD<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>Partitioner<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>ShuffledRDD<span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token keyword">object</span> TopNApp04 <span class="token keyword">extends</span> Serializable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> ContextUtils<span class="token punctuation">.</span>getSparkContext<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getSimpleName<span class="token punctuation">)</span>    <span class="token keyword">val</span> lines <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"data/group/test.txt"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      .foreach(println)</span>    <span class="token keyword">val</span> process <span class="token operator">=</span> lines<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> name <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> cnt <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span>    <span class="token keyword">val</span> names <span class="token operator">=</span> process<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">.</span>distinct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> partitioner <span class="token operator">=</span> <span class="token keyword">new</span> NamePartitioner2<span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    implicit val ord = Ordering[Int].on[((String, String), Int)](X => -X._2)</span>    <span class="token keyword">implicit</span> <span class="token keyword">val</span> ord <span class="token operator">=</span> <span class="token keyword">new</span> Ordering<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">override</span> <span class="token keyword">def</span> compare<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> y<span class="token punctuation">.</span>_3<span class="token operator">-</span> x<span class="token punctuation">.</span>_3    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 使用repartitionAndSortWithinPartitions重新分区并在分区内部排序     * 但是底层是用的setKeyOrdering,是用key进行排序的,而我们是需要用value排序     */</span>    <span class="token comment" spellcheck="true">//  报错scala.Tuple3 cannot be cast to scala.Tuple2 原因是分区器是两个参数的,这里需要重新修改分区器</span><span class="token comment" spellcheck="true">//    process.map(x => ((x._1._1,x._1._2,x._2),null))</span><span class="token comment" spellcheck="true">//      .repartitionAndSortWithinPartitions(partitioner)</span><span class="token comment" spellcheck="true">//      .map(_._1)</span><span class="token comment" spellcheck="true">//      .printInfo()</span>    <span class="token comment" spellcheck="true">// 使用shuffleRDD方式</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> process<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>_1<span class="token punctuation">.</span>_1<span class="token punctuation">,</span> x<span class="token punctuation">.</span>_1<span class="token punctuation">.</span>_2<span class="token punctuation">,</span> x<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> ShuffledRDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Null<span class="token punctuation">,</span> Null<span class="token punctuation">]</span><span class="token punctuation">(</span>rdd<span class="token punctuation">,</span> partitioner<span class="token punctuation">)</span>      <span class="token punctuation">.</span>setKeyOrdering<span class="token punctuation">(</span>ord<span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> x<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>      <span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> x<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>take<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>x <span class="token keyword">=></span> x<span class="token punctuation">)</span>      <span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      .printInfo()</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> NamePartitioner2<span class="token punctuation">(</span>names<span class="token operator">:</span>Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Partitioner <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">val</span> namesMap <span class="token operator">=</span> mutable<span class="token punctuation">.</span>HashMap<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">0</span> until<span class="token punctuation">(</span>names<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  把name放到Map中去</span>    namesMap<span class="token punctuation">(</span>names<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> i  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> numPartitions<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> names<span class="token punctuation">.</span>size  <span class="token keyword">override</span> <span class="token keyword">def</span> getPartition<span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里的key是process中返回的类型,所以类型是(String, String)</span>    <span class="token keyword">val</span> name <span class="token operator">=</span> key<span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_1    namesMap<span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark-core class和case class实现排序</title>
      <link href="2019/05/31/spark-core-zeng-qiang-01/"/>
      <url>2019/05/31/spark-core-zeng-qiang-01/</url>
      
        <content type="html"><![CDATA[<pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> sort<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> SortApp01 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getSimpleName<span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token keyword">val</span> products <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token string">"皮鞭 20 10"</span><span class="token punctuation">,</span> <span class="token string">"蜡烛 20 1000"</span><span class="token punctuation">,</span> <span class="token string">"扑克牌 5 2000"</span><span class="token punctuation">,</span> <span class="token string">"电视机 17999 1000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    products<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> name <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> price <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toDouble      <span class="token keyword">val</span> amount <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toInt<span class="token comment" spellcheck="true">//      (name,price,amount)</span>      <span class="token keyword">new</span> Products<span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      ProductInfo(name, price, amount)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//.foreach(println)</span>      <span class="token comment" spellcheck="true">// 单个字段排序 这里出来的顺序不是排序的  原因是默认分区数然后foreach导致的</span><span class="token comment" spellcheck="true">//      .sortBy(_._2).foreach(println)</span>      <span class="token comment" spellcheck="true">// 多个字段排序 降序加-</span><span class="token comment" spellcheck="true">//      .sortBy(x => (x._2,x._3)).foreach(println)</span>      <span class="token comment" spellcheck="true">// 自定义类 按照amount排序</span>      <span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>x <span class="token keyword">=></span> x<span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 需要继承Ordered     case class底层重写了toSting方法</span>  <span class="token keyword">case</span> <span class="token keyword">class</span> ProductInfo<span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> price<span class="token operator">:</span><span class="token builtin">Double</span><span class="token punctuation">,</span> amount<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Ordered<span class="token punctuation">[</span>ProductInfo<span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">override</span> <span class="token keyword">def</span> toString<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> s<span class="token string">"$name,$price,$amount"</span>    <span class="token keyword">override</span> <span class="token keyword">def</span> compare<span class="token punctuation">(</span>that<span class="token operator">:</span> ProductInfo<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">-</span> that<span class="token punctuation">.</span>amount<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里需要实现Serializable,否则会报序列化异常</span>  <span class="token keyword">class</span> Products<span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token keyword">val</span> price<span class="token operator">:</span><span class="token builtin">Double</span><span class="token punctuation">,</span> <span class="token keyword">val</span> amount<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">extends</span> Ordered<span class="token punctuation">[</span>Products<span class="token punctuation">]</span> <span class="token keyword">with</span> Serializable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">override</span> <span class="token keyword">def</span> toString<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> s<span class="token string">"$name,$price,$amount"</span>    <span class="token keyword">override</span> <span class="token keyword">def</span> compare<span class="token punctuation">(</span>that<span class="token operator">:</span> Products<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">-</span> that<span class="token punctuation">.</span>amount<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>使用隐式转换实现多类排序问题:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> sort<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> SortApp02 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getSimpleName<span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token keyword">val</span> products <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token string">"皮鞭 20 10"</span><span class="token punctuation">,</span> <span class="token string">"蜡烛 20 1000"</span><span class="token punctuation">,</span> <span class="token string">"扑克牌 5 2000"</span><span class="token punctuation">,</span> <span class="token string">"电视机 17999 1000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> data <span class="token operator">=</span> products<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> name <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> price <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toDouble      <span class="token keyword">val</span> amount <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toInt<span class="token comment" spellcheck="true">//      new Products2(name, price, amount)</span>      <span class="token punctuation">(</span>name<span class="token punctuation">,</span>price<span class="token punctuation">,</span>amount<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//.sortBy(x => x).foreach(println)</span><span class="token comment" spellcheck="true">//    // 隐式转换方法</span><span class="token comment" spellcheck="true">//    implicit def product2Ordered(product:Products2):Ordered[Products2] =new Ordered[Products2] &amp;#123;</span><span class="token comment" spellcheck="true">//      override def compare(that: Products2): Int = -(product.amount -that.amount)</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    // 这里放上面不行  原因是作用域问题,sort必须在object之后使用</span><span class="token comment" spellcheck="true">//    implicit object Products2Ordering extends Ordering[Products2] &amp;#123;</span><span class="token comment" spellcheck="true">//      override def compare(x: Products2, y: Products2): Int = x.amount -y.amount</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    implicit val products2Ordering:Ordering[Products2] = new Ordering[Products2] &amp;#123;</span><span class="token comment" spellcheck="true">//      override def compare(x: Products2, y: Products2): Int = x.amount -y.amount</span><span class="token comment" spellcheck="true">//    &amp;#125;</span>    <span class="token comment" spellcheck="true">// 终极解决方案</span>    <span class="token keyword">implicit</span> <span class="token keyword">val</span> ord <span class="token operator">=</span> Ordering<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Double</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>on<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">Double</span><span class="token punctuation">,</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">.</span>_2<span class="token punctuation">,</span>x<span class="token punctuation">.</span>_3<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 价格降序库存升序</span>    data<span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>x <span class="token keyword">=></span> x<span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">class</span> Products2<span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token keyword">val</span> price<span class="token operator">:</span><span class="token builtin">Double</span><span class="token punctuation">,</span> <span class="token keyword">val</span> amount<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">extends</span> Serializable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">override</span> <span class="token keyword">def</span> toString<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> s<span class="token string">"$name,$price,$amount"</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark-core 对SparkContext的封装</title>
      <link href="2019/05/31/spark-core-zeng-qiang-02/"/>
      <url>2019/05/31/spark-core-zeng-qiang-02/</url>
      
        <content type="html"><![CDATA[<p>SparkContext对每个Spark应用程序开发都要使用所以对SparkContext进行封装:</p><p>添加Utils模块,并在这个模块的pom中添加spark和hadoop-client的依赖:</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-core_2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hadoop-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>添加完成后在maven中install一下.</p><p>在saprk-core module中添加utils的依赖:</p><pre class=" language-scala"><code class="language-scala">        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token comment" spellcheck="true">//    Util模块名称</span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>myUtils<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>test<span class="token punctuation">.</span>spark<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.10</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>完成后查看maven中core模块是否有Utils的依赖,有了的话就可以进行下一步开发了.</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>myutils<span class="token punctuation">.</span>utils<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 封装SparkContext */</span><span class="token keyword">object</span> ContextUtils <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> getSparkContext<span class="token punctuation">(</span>appName<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> master<span class="token operator">:</span><span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"local[2]"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span>master<span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span>appName<span class="token punctuation">)</span>    <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> getSparkContext<span class="token punctuation">(</span>sparkConf<span class="token operator">:</span> SparkConf<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> getSparkConf<span class="token punctuation">(</span>appName<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> master<span class="token operator">:</span><span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"local[2]"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span>appName<span class="token punctuation">)</span>      <span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span>master<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>因为每次本地开发打印总是需要foreach(println),所以对这一部分使用隐式转换来实现增强功能.</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>myutils<span class="token punctuation">.</span>utils<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token keyword">class</span> RichRDD<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">val</span> rdd <span class="token operator">:</span>RDD<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> printInfo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    rdd<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>myutils<span class="token punctuation">.</span>utils<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token keyword">object</span> ImplicitAspect <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">implicit</span> <span class="token keyword">def</span> rdd2RichRDD<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span>rdd<span class="token operator">:</span>RDD<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">new</span> RichRDD<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span>rdd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>调用测试:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">import</span> com<span class="token punctuation">.</span>myutils<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ContextUtils<span class="token comment" spellcheck="true">// 导入隐式转换</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>myutils<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ImplicitAspect<span class="token keyword">import</span> com<span class="token punctuation">.</span>myutils<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ImplicitAspect<span class="token punctuation">.</span>rdd2RichRDD<span class="token keyword">object</span> BasicApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> ContextUtils<span class="token punctuation">.</span>getSparkContext<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getSimpleName<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token string">"hive"</span><span class="token punctuation">,</span><span class="token string">"hive"</span><span class="token punctuation">,</span><span class="token string">"hive"</span><span class="token punctuation">,</span><span class="token string">"spark,spark"</span><span class="token punctuation">,</span><span class="token string">"scala"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>printInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark-core class和case class实现排序</title>
      <link href="2019/05/31/spark-core-zeng-qiang-04/"/>
      <url>2019/05/31/spark-core-zeng-qiang-04/</url>
      
        <content type="html"><![CDATA[<p>saprk-shell.sh</p><pre class=" language-shell"><code class="language-shell">case $变量名 in    模式1        命令1    ;;    模式2        命令2       ;;       *)           默认命令       ;;esac</code></pre><pre class=" language-shell"><code class="language-shell">#!/bin/bashread -p "press some key, then press return:" KEYcase $KEY in[a-z][A-Z]echo "It is a latter.";;[0-9])echo "It is a digit.";;*)echo "other."esac</code></pre><p>如果有HOME就可以获取相对路径</p><pre class=" language-shell"><code class="language-shell">HOME=`cd $(dirname "$0");pwd`echo "current path is :" $HOME</code></pre><pre class=" language-shell"><code class="language-shell">#判断长度是否为0if [ -z "$&#123;teacher&#125;"];then    echo "波多"else    echo $&#123;teacher&#125;fi-------------------------------------------------------------------------------# 这里是判断$&#123;SPARK_HOME&#125;if [ -z "$&#123;SPARK_HOME&#125;" ]; then  source "$(dirname "$0")"/find-spark-homefi</code></pre><pre class=" language-shell"><code class="language-shell">function main()&#123;    echo "input parms is:" $@&#125;#调用main "$@"</code></pre><p>saprk-shell ==&gt; spark-submit==&gt; spark-class </p><p>spark-class作业提交的命令</p><pre class=" language-shell"><code class="language-shell">build_command() &#123;  "$RUNNER" -Xmx128m $SPARK_LAUNCHER_OPTS -cp "$LAUNCH_CLASSPATH" org.apache.spark.launcher.Main "$@"  printf "%d\0" $?&#125;</code></pre><pre><code>#debug打印出saprk提交信息saprk-shell --verbose</code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark-core Spark内存</title>
      <link href="2019/05/31/spark-core-zeng-qiang-05/"/>
      <url>2019/05/31/spark-core-zeng-qiang-05/</url>
      
        <content type="html"><![CDATA[<p>Spark: Driver + Executors JVM进程的方式运行的</p><p>Driver:主控</p><p>​    SparkContext</p><p>​    Job</p><p>​    Task</p><p>​    调度到executor上去执行</p><p>Executor:</p><p>​    task真正运行在Executor上</p><p>​    和Driver是有通信的</p><p>堆内    堆外(SPARK-11389)</p><p>–executor-memory        默认1G</p><p>–executor-cores            默认yarn 1core</p><p>–num-executors            默认2</p><p>Spark官网内存调优:</p><p><a href="http://spark.apache.org/docs/latest/tuning.html#memory-management-overview">http://spark.apache.org/docs/latest/tuning.html#memory-management-overview</a></p><p>Spark内存分为execution and storage.</p><pre><code>MemoryManager</code></pre><pre><code>val MEMORY_STORAGE_FRACTION = ConfigBuilder(&quot;spark.memory.storageFraction&quot;)  .doc(&quot;Amount of storage memory immune to eviction, expressed as a fraction of the &quot; +    &quot;size of the region set aside by spark.memory.fraction. The higher this is, the &quot; +    &quot;less working memory may be available to execution and tasks may spill to disk more &quot; +    &quot;often. Leaving this at the default value is recommended. &quot;)  .version(&quot;1.6.0&quot;)  .doubleConf  .checkValue(v =&gt; v &gt;= 0.0 &amp;&amp; v &lt; 1.0, &quot;Storage fraction must be in [0,1)&quot;)  .createWithDefault(0.5)</code></pre><pre><code>val MEMORY_FRACTION = ConfigBuilder(&quot;spark.memory.fraction&quot;)  .doc(&quot;Fraction of (heap space - 300MB) used for execution and storage. The &quot; +    &quot;lower this is, the more frequently spills and cached data eviction occur. &quot; +    &quot;The purpose of this config is to set aside memory for internal metadata, &quot; +    &quot;user data structures, and imprecise size estimation in the case of sparse, &quot; +    &quot;unusually large records. Leaving this at the default value is recommended.  &quot;)  .version(&quot;1.6.0&quot;)  .doubleConf  .createWithDefault(0.6)</code></pre><pre><code>STORAGE_SAFETY_FRACTION = ConfigBuilder(&quot;spark.storage.safetyFraction&quot;)  .version(&quot;1.1.0&quot;)  .doubleConf  .createWithDefault(0.9)</code></pre><p>统一内存管理:</p><p>Execution和Storage是可以互相借用的</p><p>Execution可以剔除Storage已经占用的</p><pre><code>RESERVED_SYSTEM_MEMORY_BYTES    预留内存    300 * 1024 * 1024// 能用的内存-预留内存val usableMemory = systemMemory - reservedMemoryval memoryFraction = conf.get(config.MEMORY_FRACTION)    // 0.6    (usableMemory * memoryFraction).toLong    //这才是最终能用的最大内存</code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark-core 复杂算子</title>
      <link href="2019/05/31/spark-core-zeng-qiang-06/"/>
      <url>2019/05/31/spark-core-zeng-qiang-06/</url>
      
        <content type="html"><![CDATA[<pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> sort<span class="token keyword">import</span> com<span class="token punctuation">.</span>myutils<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ContextUtils<span class="token keyword">import</span> com<span class="token punctuation">.</span>myutils<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ImplicitAspect<span class="token punctuation">.</span>rdd2RichRDD<span class="token keyword">object</span> AdvanceApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> ContextUtils<span class="token punctuation">.</span>getSparkContext<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getSimpleName<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**      def aggregate[U: ClassTag]      (zeroValue: U)(seqOp: (U, T) => U, combOp: (U, U) => U): U      seqOp: func作用到每一个分区上面 分区内聚合      combOp: seqOp输出作为输入,全局聚合     */</span><span class="token comment" spellcheck="true">//    data.aggregate()</span>    <span class="token keyword">def</span> func1<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">=</span> x <span class="token operator">*</span> y    <span class="token keyword">def</span> func2<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token comment" spellcheck="true">//    val data = sc.parallelize(1 to 5, 1)</span><span class="token comment" spellcheck="true">//    val sum = data.aggregate(3)(func1, func2)</span><span class="token comment" spellcheck="true">//    println(sum)  // 363</span>    <span class="token keyword">val</span> data <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sum <span class="token operator">=</span> data<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span>func1<span class="token punctuation">,</span> func2<span class="token punctuation">)</span>    data<span class="token punctuation">.</span>mapPartitionsWithIndex<span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>partition<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      partition<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> s<span class="token string">"$index => $x"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>printInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>sum<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 10334</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>求和:</p><pre><code>val rdd = sc.parallelize(List(1 to 10: _*), 3)val sum = rdd.aggregate(0)(_ + _, _ + _)println(sum)</code></pre><p>分区内最大值,分区间求和:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">def</span> func1<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token operator">:</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> x<span class="token punctuation">.</span>max<span class="token punctuation">(</span>y<span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token keyword">def</span> func2<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token comment" spellcheck="true">// 求: 分区内最大值,分区间求和</span><span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> List<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> List<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>println<span class="token punctuation">(</span>rdd<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>func1<span class="token punctuation">,</span> func2<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-scala"><code class="language-scala"> <span class="token comment" spellcheck="true">//  求: key: max sum(max)</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>aggregateByKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>max<span class="token punctuation">(</span>_<span class="token punctuation">,</span> _<span class="token punctuation">)</span><span class="token punctuation">,</span> _ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">.</span>printInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>mapPartitionsWithIndex<span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>partition<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    partition<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> s<span class="token string">"$index ==> $x"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>printInfo<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>分组求和:</p><pre class=" language-scala"><code class="language-scala"> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"mouse"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"mouse"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//            .mapPartitionsWithIndex((index,partition) => &amp;#123;</span><span class="token comment" spellcheck="true">//              partition.map(x => s"$index ==> $x")</span><span class="token comment" spellcheck="true">//            &amp;#125;).printInfo()</span>      <span class="token punctuation">.</span>aggregateByKey<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">,</span> _ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">.</span>printInfo<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>foldByKey求和:</p><pre class=" language-scala"><code class="language-scala">sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>foldByKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">.</span>printInfo<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>combineByKey:</p><pre class=" language-scala"><code class="language-scala">sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      .mapPartitionsWithIndex((index,partition) => &amp;#123;</span><span class="token comment" spellcheck="true">//            partition.map(x => s"$index ==> $x")</span><span class="token comment" spellcheck="true">//          &amp;#125;).printInfo()</span>      <span class="token punctuation">.</span>combineByKey<span class="token punctuation">(</span>x <span class="token keyword">=></span> x<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> x<span class="token operator">+</span>y<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>printInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 求每个key的平均值 = key的总和 / key出现的次数</span>    sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">93</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//            .mapPartitionsWithIndex((index,partition) => &amp;#123;</span><span class="token comment" spellcheck="true">//                  partition.map(x => s"$index ==> $x")</span><span class="token comment" spellcheck="true">//                &amp;#125;).printInfo()</span>      <span class="token punctuation">.</span>combineByKey<span class="token punctuation">(</span>        <span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span>acc<span class="token operator">:</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token punctuation">(</span>acc<span class="token punctuation">.</span>_1 <span class="token operator">+</span> v<span class="token punctuation">,</span> acc<span class="token punctuation">.</span>_2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//分区内 (总和,次数)</span>          <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>_1 <span class="token operator">+</span> y<span class="token punctuation">.</span>_1<span class="token punctuation">,</span> x<span class="token punctuation">.</span>_2 <span class="token operator">+</span> y<span class="token punctuation">.</span>_2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 聚合 (总和,次数)</span>      <span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">.</span>_1 <span class="token operator">/</span> v<span class="token punctuation">.</span>_2<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span>printInfo<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这些ByKey类算子都是调用的combineByKeyWithClassTag</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">def</span> combineByKeyWithClassTag<span class="token punctuation">[</span>C<span class="token punctuation">]</span><span class="token punctuation">(</span>    createCombiner<span class="token operator">:</span> V <span class="token keyword">=></span> C<span class="token punctuation">,</span>    mergeValue<span class="token operator">:</span> <span class="token punctuation">(</span>C<span class="token punctuation">,</span> V<span class="token punctuation">)</span> <span class="token keyword">=></span> C<span class="token punctuation">,</span>    mergeCombiners<span class="token operator">:</span> <span class="token punctuation">(</span>C<span class="token punctuation">,</span> C<span class="token punctuation">)</span> <span class="token keyword">=></span> C<span class="token punctuation">,</span>    partitioner<span class="token operator">:</span> Partitioner<span class="token punctuation">,</span>    mapSideCombine<span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    serializer<span class="token operator">:</span> Serializer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">implicit</span> ct<span class="token operator">:</span> ClassTag<span class="token punctuation">[</span>C<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">]</span> </code></pre><pre class=" language-scala"><code class="language-scala">sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>combineByKeyWithClassTag<span class="token punctuation">(</span>x <span class="token keyword">=></span> x<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> x<span class="token operator">+</span>y<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> x<span class="token operator">+</span>y <span class="token punctuation">)</span>  <span class="token punctuation">.</span>printInfo<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark-core shuffle</title>
      <link href="2019/05/31/spark-core-zeng-qiang-07/"/>
      <url>2019/05/31/spark-core-zeng-qiang-07/</url>
      
        <content type="html"><![CDATA[<p>HashShuffleManager:</p><p>上游每个task要为下游每个task准备好数据</p><p><a href="https://tech.meituan.com/2016/05/12/spark-tuning-pro.html">https://tech.meituan.com/2016/05/12/spark-tuning-pro.html</a></p><h2 id="shuffle相关参数调优"><a href="#shuffle相关参数调优" class="headerlink" title="shuffle相关参数调优"></a>shuffle相关参数调优</h2><p>以下是Shffule过程中的一些主要参数，这里详细讲解了各个参数的功能、默认值以及基于实践经验给出的调优建议。</p><h3 id="spark-shuffle-file-buffer"><a href="#spark-shuffle-file-buffer" class="headerlink" title="spark.shuffle.file.buffer"></a>spark.shuffle.file.buffer</h3><ul><li>默认值：32k</li><li>参数说明：该参数用于设置shuffle write task的BufferedOutputStream的buffer缓冲大小。将数据写到磁盘文件之前，会先写入buffer缓冲中，待缓冲写满之后，才会溢写到磁盘。</li><li>调优建议：如果作业可用的内存资源较为充足的话，可以适当增加这个参数的大小（比如64k），从而减少shuffle write过程中溢写磁盘文件的次数，也就可以减少磁盘IO次数，进而提升性能。在实践中发现，合理调节该参数，性能会有1%~5%的提升。</li></ul><h3 id="spark-reducer-maxSizeInFlight"><a href="#spark-reducer-maxSizeInFlight" class="headerlink" title="spark.reducer.maxSizeInFlight"></a>spark.reducer.maxSizeInFlight</h3><ul><li>默认值：48m</li><li>参数说明：该参数用于设置shuffle read task的buffer缓冲大小，而这个buffer缓冲决定了每次能够拉取多少数据。</li><li>调优建议：如果作业可用的内存资源较为充足的话，可以适当增加这个参数的大小（比如96m），从而减少拉取数据的次数，也就可以减少网络传输的次数，进而提升性能。在实践中发现，合理调节该参数，性能会有1%~5%的提升。</li></ul><h3 id="spark-shuffle-io-maxRetries"><a href="#spark-shuffle-io-maxRetries" class="headerlink" title="spark.shuffle.io.maxRetries"></a>spark.shuffle.io.maxRetries</h3><ul><li>默认值：3</li><li>参数说明：shuffle read task从shuffle write task所在节点拉取属于自己的数据时，如果因为网络异常导致拉取失败，是会自动进行重试的。该参数就代表了可以重试的最大次数。如果在指定次数之内拉取还是没有成功，就可能会导致作业执行失败。</li><li>调优建议：对于那些包含了特别耗时的shuffle操作的作业，建议增加重试最大次数（比如60次），以避免由于JVM的full gc或者网络不稳定等因素导致的数据拉取失败。在实践中发现，对于针对超大数据量（数十亿~上百亿）的shuffle过程，调节该参数可以大幅度提升稳定性。</li></ul><h3 id="spark-shuffle-io-retryWait"><a href="#spark-shuffle-io-retryWait" class="headerlink" title="spark.shuffle.io.retryWait"></a>spark.shuffle.io.retryWait</h3><ul><li>默认值：5s</li><li>参数说明：具体解释同上，该参数代表了每次重试拉取数据的等待间隔，默认是5s。</li><li>调优建议：建议加大间隔时长（比如60s），以增加shuffle操作的稳定性。</li></ul><h3 id="spark-shuffle-memoryFraction"><a href="#spark-shuffle-memoryFraction" class="headerlink" title="spark.shuffle.memoryFraction"></a>spark.shuffle.memoryFraction</h3><ul><li>默认值：0.2</li><li>参数说明：该参数代表了Executor内存中，分配给shuffle read task进行聚合操作的内存比例，默认是20%。</li><li>调优建议：在资源参数调优中讲解过这个参数。如果内存充足，而且很少使用持久化操作，建议调高这个比例，给shuffle read的聚合操作更多内存，以避免由于内存不足导致聚合过程中频繁读写磁盘。在实践中发现，合理调节该参数可以将性能提升10%左右。</li></ul><h3 id="spark-shuffle-manager"><a href="#spark-shuffle-manager" class="headerlink" title="spark.shuffle.manager"></a>spark.shuffle.manager</h3><ul><li>默认值：sort</li><li>参数说明：该参数用于设置ShuffleManager的类型。Spark 1.5以后，有三个可选项：hash、sort和tungsten-sort。HashShuffleManager是Spark 1.2以前的默认选项，但是Spark 1.2以及之后的版本默认都是SortShuffleManager了。tungsten-sort与sort类似，但是使用了tungsten计划中的堆外内存管理机制，内存使用效率更高。</li><li>调优建议：由于SortShuffleManager默认会对数据进行排序，因此如果你的业务逻辑中需要该排序机制的话，则使用默认的SortShuffleManager就可以；而如果你的业务逻辑不需要对数据进行排序，那么建议参考后面的几个参数调优，通过bypass机制或优化的HashShuffleManager来避免排序操作，同时提供较好的磁盘读写性能。这里要注意的是，tungsten-sort要慎用，因为之前发现了一些相应的bug。</li></ul><h3 id="spark-shuffle-sort-bypassMergeThreshold"><a href="#spark-shuffle-sort-bypassMergeThreshold" class="headerlink" title="spark.shuffle.sort.bypassMergeThreshold"></a>spark.shuffle.sort.bypassMergeThreshold</h3><ul><li>默认值：200</li><li>参数说明：当ShuffleManager为SortShuffleManager时，如果shuffle read task的数量小于这个阈值（默认是200），则shuffle write过程中不会进行排序操作，而是直接按照未经优化的HashShuffleManager的方式去写数据，但是最后会将每个task产生的所有临时磁盘文件都合并成一个文件，并会创建单独的索引文件。</li><li>调优建议：当你使用SortShuffleManager时，如果的确不需要排序操作，那么建议将这个参数调大一些，大于shuffle read task的数量。那么此时就会自动启用bypass机制，map-side就不会进行排序了，减少了排序的性能开销。但是这种方式下，依然会产生大量的磁盘文件，因此shuffle write性能有待提高。</li></ul><h3 id="spark-shuffle-consolidateFiles"><a href="#spark-shuffle-consolidateFiles" class="headerlink" title="spark.shuffle.consolidateFiles"></a>spark.shuffle.consolidateFiles</h3><ul><li>默认值：false</li><li>参数说明：如果使用HashShuffleManager，该参数有效。如果设置为true，那么就会开启consolidate机制，会大幅度合并shuffle write的输出文件，对于shuffle read task数量特别多的情况下，这种方法可以极大地减少磁盘IO开销，提升性能。</li><li>调优建议：如果的确不需要SortShuffleManager的排序机制，那么除了使用bypass机制，还可以尝试将spark.shffle.manager参数手动指定为hash，使用HashShuffleManager，同时开启consolidate机制。在实践中尝试过，发现其性能比开启了bypass机制的SortShuffleManager要高出10%~30%。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spark性能调优</title>
      <link href="2019/05/31/spark-core-zeng-qiang-08/"/>
      <url>2019/05/31/spark-core-zeng-qiang-08/</url>
      
        <content type="html"><![CDATA[<h3 id="1-避免创建重复的RDD"><a href="#1-避免创建重复的RDD" class="headerlink" title="1.避免创建重复的RDD"></a>1.避免创建重复的RDD</h3><p>对于同一份数据，只应该创建一个RDD，不能创建多个RDD来代表同一份数据。</p><pre><code>// 需要对名为“hello.txt”的HDFS文件进行一次map操作，再进行一次reduce操作。也就是说，需要对一份数据执行两次算子操作。// 错误的做法：对于同一份数据执行多次算子操作时，创建多个RDD。// 这里执行了两次textFile方法，针对同一个HDFS文件，创建了两个RDD出来，然后分别对每个RDD都执行了一个算子操作。// 这种情况下，Spark需要从HDFS上两次加载hello.txt文件的内容，并创建两个单独的RDD；第二次加载HDFS文件以及创建RDD的性能开销，很明显是白白浪费掉的。val rdd1 = sc.textFile(&quot;hdfs://192.168.0.1:9000/hello.txt&quot;)rdd1.map(...)val rdd2 = sc.textFile(&quot;hdfs://192.168.0.1:9000/hello.txt&quot;)rdd2.reduce(...)// 正确的用法：对于一份数据执行多次算子操作时，只使用一个RDD。// 这种写法很明显比上一种写法要好多了，因为我们对于同一份数据只创建了一个RDD，然后对这一个RDD执行了多次算子操作。// 但是要注意到这里为止优化还没有结束，由于rdd1被执行了两次算子操作，第二次执行reduce操作的时候，还会再次从源头处重新计算一次rdd1的数据，因此还是会有重复计算的性能开销。// 要彻底解决这个问题，必须结合“原则三：对多次使用的RDD进行持久化”，才能保证一个RDD被多次使用时只被计算一次。val rdd1 = sc.textFile(&quot;hdfs://192.168.0.1:9000/hello.txt&quot;)rdd1.map(...)rdd1.reduce(...)</code></pre><h3 id="2-尽可能复用同一个RDD"><a href="#2-尽可能复用同一个RDD" class="headerlink" title="2.尽可能复用同一个RDD"></a>2.尽可能复用同一个RDD</h3><p>除了要避免在开发过程中对一份完全相同的数据创建多个RDD之外，在对不同的数据执行算子操作时还要尽可能地复用一个RDD。比如说，有一个RDD的数据格式是key-value类型的，另一个是单value类型的，这两个RDD的value数据是完全一样的。那么此时我们可以只使用key-value类型的那个RDD，因为其中已经包含了另一个的数据。对于类似这种多个RDD的数据有重叠或者包含的情况，我们应该尽量复用一个RDD，这样可以尽可能地减少RDD的数量，从而尽可能减少算子执行的次数。</p><pre><code>// 错误的做法。// 有一个&lt;Long, String&gt;格式的RDD，即rdd1。// 接着由于业务需要，对rdd1执行了一个map操作，创建了一个rdd2，而rdd2中的数据仅仅是rdd1中的value值而已，也就是说，rdd2是rdd1的子集。JavaPairRDD&lt;Long, String&gt; rdd1 = ...JavaRDD&lt;String&gt; rdd2 = rdd1.map(...)// 分别对rdd1和rdd2执行了不同的算子操作。rdd1.reduceByKey(...)rdd2.map(...)// 正确的做法。// 上面这个case中，其实rdd1和rdd2的区别无非就是数据格式不同而已，rdd2的数据完全就是rdd1的子集而已，却创建了两个rdd，并对两个rdd都执行了一次算子操作。// 此时会因为对rdd1执行map算子来创建rdd2，而多执行一次算子操作，进而增加性能开销。// 其实在这种情况下完全可以复用同一个RDD。// 我们可以使用rdd1，既做reduceByKey操作，也做map操作。// 在进行第二个map操作时，只使用每个数据的tuple._2，也就是rdd1中的value值，即可。JavaPairRDD&lt;Long, String&gt; rdd1 = ...rdd1.reduceByKey(...)rdd1.map(tuple._2...)// 第二种方式相较于第一种方式而言，很明显减少了一次rdd2的计算开销。// 但是到这里为止，优化还没有结束，对rdd1我们还是执行了两次算子操作，rdd1实际上还是会被计算两次。// 因此还需要配合“原则三：对多次使用的RDD进行持久化”进行使用，才能保证一个RDD被多次使用时只被计算一次。</code></pre><h3 id="3-对多次使用的RDD进行持久化"><a href="#3-对多次使用的RDD进行持久化" class="headerlink" title="3.对多次使用的RDD进行持久化"></a>3.对多次使用的RDD进行持久化</h3><p>Spark中对于一个RDD执行多次算子的默认原理是这样的：每次你对一个RDD执行一个算子操作时，都会重新从源头处计算一遍，计算出那个RDD来，然后再对这个RDD执行你的算子操作。这种方式的性能是很差的。</p><p>对多次使用的RDD进行持久化。此时Spark就会根据你的持久化策略，将RDD中的数据保存到内存或者磁盘中。以后每次对这个RDD进行算子操作时，都会直接从内存或磁盘中提取持久化的RDD数据，然后执行算子，而不会从源头处重新计算一遍这个RDD，再执行算子操作。</p><pre><code>// 如果要对一个RDD进行持久化，只要对这个RDD调用cache()和persist()即可。// 正确的做法。// cache()方法表示：使用非序列化的方式将RDD中的数据全部尝试持久化到内存中。// 此时再对rdd1执行两次算子操作时，只有在第一次执行map算子时，才会将这个rdd1从源头处计算一次。// 第二次执行reduce算子时，就会直接从内存中提取数据进行计算，不会重复计算一个rdd。val rdd1 = sc.textFile(&quot;hdfs://192.168.0.1:9000/hello.txt&quot;).cache()rdd1.map(...)rdd1.reduce(...)// persist()方法表示：手动选择持久化级别，并使用指定的方式进行持久化。// 比如说，StorageLevel.MEMORY_AND_DISK_SER表示，内存充足时优先持久化到内存中，内存不充足时持久化到磁盘文件中。// 而且其中的_SER后缀表示，使用序列化的方式来保存RDD数据，此时RDD中的每个partition都会序列化成一个大的字节数组，然后再持久化到内存或磁盘中。// 序列化的方式可以减少持久化的数据对内存/磁盘的占用量，进而避免内存被持久化数据占用过多，从而发生频繁GC。val rdd1 = sc.textFile(&quot;hdfs://192.168.0.1:9000/hello.txt&quot;).persist(StorageLevel.MEMORY_AND_DISK_SER)rdd1.map(...)rdd1.reduce(...)</code></pre><h3 id="4-尽量避免使用shuffle算子的使用"><a href="#4-尽量避免使用shuffle算子的使用" class="headerlink" title="4.尽量避免使用shuffle算子的使用"></a>4.尽量避免使用shuffle算子的使用</h3><p>如果有可能的话，要尽量避免使用shuffle类算子。因为Spark作业运行过程中，最消耗性能的地方就是shuffle过程。shuffle过程，简单来说，就是将分布在集群中多个节点上的同一个key，拉取到同一个节点上，进行聚合或join等操作。比如reduceByKey、join等算子，都会触发shuffle操作。</p><p>shuffle过程中，各个节点上的相同key都会先写入本地磁盘文件中，然后其他节点需要通过网络传输拉取各个节点上的磁盘文件中的相同key。而且相同key都拉取到同一个节点进行聚合操作时，还有可能会因为一个节点上处理的key过多，导致内存不够存放，进而溢写到磁盘文件中。因此在shuffle过程中，可能会发生大量的磁盘文件读写的IO操作，以及数据的网络传输操作。磁盘IO和网络数据传输也是shuffle性能较差的主要原因。</p><p>因此在我们的开发过程中，能避免则尽可能避免使用reduceByKey、join、distinct、repartition等会进行shuffle的算子，尽量使用map类的非shuffle算子。这样的话，没有shuffle操作或者仅有较少shuffle操作的Spark作业，可以大大减少性能开销</p><pre><code>// 传统的join操作会导致shuffle操作。// 因为两个RDD中，相同的key都需要通过网络拉取到一个节点上，由一个task进行join操作。val rdd3 = rdd1.join(rdd2)// Broadcast+map的join操作，不会导致shuffle操作。// 使用Broadcast将一个数据量较小的RDD作为广播变量。val rdd2Data = rdd2.collect()val rdd2DataBroadcast = sc.broadcast(rdd2Data)// 在rdd1.map算子中，可以从rdd2DataBroadcast中，获取rdd2的所有数据。// 然后进行遍历，如果发现rdd2中某条数据的key与rdd1的当前数据的key是相同的，那么就判定可以进行join。// 此时就可以根据自己需要的方式，将rdd1当前数据与rdd2中可以连接的数据，拼接在一起（String或Tuple）。val rdd3 = rdd1.map(rdd2DataBroadcast...)// 注意，以上操作，建议仅仅在rdd2的数据量比较少（比如几百M，或者一两G）的情况下使用。// 因为每个Executor的内存中，都会驻留一份rdd2的全量数据。</code></pre><p>但是,注意BroadCast只适用于一个RDD较小的情况.</p><h3 id="5-使用map-side预聚合的suffle操作"><a href="#5-使用map-side预聚合的suffle操作" class="headerlink" title="5.使用map-side预聚合的suffle操作"></a>5.使用map-side预聚合的suffle操作</h3><p>如果因为业务需要，一定要使用shuffle操作，无法用map类的算子来替代，那么尽量使用可以map-side预聚合的算子。</p><p>所谓的map-side预聚合，说的是在每个节点本地对相同的key进行一次聚合操作，类似于MapReduce中的本地combiner。map-side预聚合之后，每个节点本地就只会有一条相同的key，因为多条相同的key都被聚合起来了。其他节点在拉取所有节点上的相同key时，就会大大减少需要拉取的数据数量，从而也就减少了磁盘IO以及网络传输开销。通常来说，在可能的情况下，建议使用reduceByKey或者aggregateByKey算子来替代掉groupByKey算子。因为reduceByKey和aggregateByKey算子都会使用用户自定义的函数对每个节点本地的相同key进行预聚合。而groupByKey算子是不会进行预聚合的，全量的数据会在集群的各个节点之间分发和传输，性能相对来说比较差。</p><p>比如如下两幅图，就是典型的例子，分别基于reduceByKey和groupByKey进行单词计数。其中第一张图是groupByKey的原理图，可以看到，没有进行任何本地聚合时，所有数据都会在集群节点之间传输；第二张图是reduceByKey的原理图，可以看到，每个节点本地的相同key数据，都进行了预聚合，然后才传输到其他节点上进行全局聚合。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/5ebe0848.png" alt="img"></p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/a6c7d4c4.png" alt="img"></p><h3 id="6：使用高性能的算子"><a href="#6：使用高性能的算子" class="headerlink" title="6：使用高性能的算子"></a>6：使用高性能的算子</h3><p>除了shuffle相关的算子有优化原则之外，其他的算子也都有着相应的优化原则。</p><h4 id="6-1-使用reduceByKey-aggregateByKey替代groupByKey"><a href="#6-1-使用reduceByKey-aggregateByKey替代groupByKey" class="headerlink" title="6.1 使用reduceByKey/aggregateByKey替代groupByKey"></a>6.1 使用reduceByKey/aggregateByKey替代groupByKey</h4><p>详情见“使用map-side预聚合的shuffle操作”。</p><h4 id="6-2-使用mapPartitions替代普通map"><a href="#6-2-使用mapPartitions替代普通map" class="headerlink" title="6.2 使用mapPartitions替代普通map"></a>6.2 使用mapPartitions替代普通map</h4><p>mapPartitions类的算子，一次函数调用会处理一个partition所有的数据，而不是一次函数调用处理一条，性能相对来说会高一些。但是有的时候，使用mapPartitions会出现OOM（内存溢出）的问题。因为单次函数调用就要处理掉一个partition所有的数据，如果内存不够，垃圾回收时是无法回收掉太多对象的，很可能出现OOM异常。所以使用这类操作时要慎重！</p><h4 id="6-3-使用foreachPartitions替代foreach"><a href="#6-3-使用foreachPartitions替代foreach" class="headerlink" title="6.3 使用foreachPartitions替代foreach"></a>6.3 使用foreachPartitions替代foreach</h4><p>原理类似于“使用mapPartitions替代map”，也是一次函数调用处理一个partition的所有数据，而不是一次函数调用处理一条数据。在实践中发现，foreachPartitions类的算子，对性能的提升还是很有帮助的。比如在foreach函数中，将RDD中所有数据写MySQL，那么如果是普通的foreach算子，就会一条数据一条数据地写，每次函数调用可能就会创建一个数据库连接，此时就势必会频繁地创建和销毁数据库连接，性能是非常低下；但是如果用foreachPartitions算子一次性处理一个partition的数据，那么对于每个partition，只要创建一个数据库连接即可，然后执行批量插入操作，此时性能是比较高的。实践中发现，对于1万条左右的数据量写MySQL，性能可以提升30%以上。</p><p>写出到外部数据中尽量使用foreachPartitions.</p><h4 id="6-4-使用filter之后进行-操作"><a href="#6-4-使用filter之后进行-操作" class="headerlink" title="6.4 使用filter之后进行 操作"></a>6.4 使用filter之后进行 操作</h4><p>通常对一个RDD执行filter算子过滤掉RDD中较多数据后（比如30%以上的数据），建议使用coalesce算子，手动减少RDD的partition数量，将RDD中的数据压缩到更少的partition中去。因为filter之后，RDD的每个partition中都会有很多数据被过滤掉，此时如果照常进行后续的计算，其实每个task处理的partition中的数据量并不是很多，有一点资源浪费，而且此时处理的task越多，可能速度反而越慢。因此用coalesce减少partition数量，将RDD中的数据压缩到更少的partition之后，只要使用更少的task即可处理完所有的partition。在某些场景下，对于性能的提升会有一定的帮助。</p><h4 id="6-5-使用repartitionAndSortWithinPartitions替代repartition与sort类操作"><a href="#6-5-使用repartitionAndSortWithinPartitions替代repartition与sort类操作" class="headerlink" title="6.5 使用repartitionAndSortWithinPartitions替代repartition与sort类操作"></a>6.5 使用repartitionAndSortWithinPartitions替代repartition与sort类操作</h4><p>repartitionAndSortWithinPartitions是Spark官网推荐的一个算子，官方建议，如果需要在repartition重分区之后，还要进行排序，建议直接使用repartitionAndSortWithinPartitions算子。因为该算子可以一边进行重分区的shuffle操作，一边进行排序。shuffle与sort两个操作同时进行，比先shuffle再sort来说，性能可能是要高的。</p><h3 id="7-广播大变量"><a href="#7-广播大变量" class="headerlink" title="7.广播大变量"></a>7.广播大变量</h3><p>有时在开发过程中，会遇到需要在算子函数中使用外部变量的场景（尤其是大变量，比如100M以上的大集合），那么此时就应该使用Spark的广播（Broadcast）功能来提升性能。</p><p>在算子函数中使用到外部变量时，默认情况下，Spark会将该变量复制多个副本，通过网络传输到task中，此时每个task都有一个变量副本。如果变量本身比较大的话（比如100M，甚至1G），那么大量的变量副本在网络中传输的性能开销，以及在各个节点的Executor中占用过多内存导致的频繁GC，都会极大地影响性能。</p><p>因此对于上述情况，如果使用的外部变量比较大，建议使用Spark的广播功能，对该变量进行广播。广播后的变量，会保证每个Executor的内存中，只驻留一份变量副本，而Executor中的task执行时共享该Executor中的那份变量副本。这样的话，可以大大减少变量副本的数量，从而减少网络传输的性能开销，并减少对Executor内存的占用开销，降低GC的频率。</p><pre><code>// 以下代码在算子函数中，使用了外部的变量。// 此时没有做任何特殊操作，每个task都会有一份list1的副本。val list1 = ...rdd1.map(list1...)// 以下代码将list1封装成了Broadcast类型的广播变量。// 在算子函数中，使用广播变量时，首先会判断当前task所在Executor内存中，是否有变量副本。// 如果有则直接使用；如果没有则从Driver或者其他Executor节点上远程拉取一份放到本地Executor内存中。// 每个Executor内存中，就只会驻留一份广播变量副本。val list1 = ...val list1Broadcast = sc.broadcast(list1)rdd1.map(list1Broadcast...)</code></pre><h3 id="8-使用Kryo优化序列化性能"><a href="#8-使用Kryo优化序列化性能" class="headerlink" title="8.使用Kryo优化序列化性能"></a>8.使用Kryo优化序列化性能</h3><p>在Spark中，主要有三个地方涉及到了序列化： * 在算子函数中使用到外部变量时，该变量会被序列化后进行网络传输（见“7：广播大变量”中的讲解）。 * 将自定义的类型作为RDD的泛型类型时（比如JavaRDD，Student是自定义类型），所有自定义类型对象，都会进行序列化。因此这种情况下，也要求自定义的类必须实现Serializable接口。 * 使用可序列化的持久化策略时（比如MEMORY_ONLY_SER），Spark会将RDD中的每个partition都序列化成一个大的字节数组。</p><p>对于这三种出现序列化的地方，我们都可以通过使用Kryo序列化类库，来优化序列化和反序列化的性能。Spark默认使用的是Java的序列化机制，也就是ObjectOutputStream/ObjectInputStream API来进行序列化和反序列化。但是Spark同时支持使用Kryo序列化库，Kryo序列化类库的性能比Java序列化类库的性能要高很多。官方介绍，Kryo序列化机制比Java序列化机制，性能高10倍左右。Spark之所以默认没有使用Kryo作为序列化类库，是因为Kryo要求最好要注册所有需要进行序列化的自定义类型，因此对于开发者来说，这种方式比较麻烦。</p><p>以下是使用Kryo的代码示例，我们只要设置序列化类，再注册要序列化的自定义类型即可（比如算子函数中使用到的外部变量类型、作为RDD泛型类型的自定义类型等）：</p><pre><code>// 创建SparkConf对象。val conf = new SparkConf().setMaster(...).setAppName(...)// 设置序列化器为KryoSerializer。conf.set(&quot;spark.serializer&quot;, &quot;org.apache.spark.serializer.KryoSerializer&quot;)// 注册要序列化的自定义类型。conf.registerKryoClasses(Array(classOf[MyClass1], classOf[MyClass2]))</code></pre><p>注意:这里一定要注册,否则效果不明显.</p><h3 id="9-优化数据结构"><a href="#9-优化数据结构" class="headerlink" title="9.优化数据结构"></a>9.优化数据结构</h3><p>Java中，有三种类型比较耗费内存： * 对象，每个Java对象都有对象头、引用等额外的信息，因此比较占用内存空间。 * 字符串，每个字符串内部都有一个字符数组以及长度等额外信息。 * 集合类型，比如HashMap、LinkedList等，因为集合类型内部通常会使用一些内部类来封装集合元素，比如Map.Entry。</p><p>因此Spark官方建议，在Spark编码实现中，特别是对于算子函数中的代码，尽量不要使用上述三种数据结构，尽量使用字符串替代对象，使用原始类型（比如Int、Long）替代字符串，使用数组替代集合类型，这样尽可能地减少内存占用，从而降低GC频率，提升性能。</p><p>但是在笔者的编码实践中发现，要做到该原则其实并不容易。因为我们同时要考虑到代码的可维护性，如果一个代码中，完全没有任何对象抽象，全部是字符串拼接的方式，那么对于后续的代码维护和修改，无疑是一场巨大的灾难。同理，如果所有操作都基于数组实现，而不使用HashMap、LinkedList等集合类型，那么对于我们的编码难度以及代码可维护性，也是一个极大的挑战。因此笔者建议，在可能以及合适的情况下，使用占用内存较少的数据结构，但是前提是要保证代码的可维护性。</p><p>摘自:<a href="https://tech.meituan.com/2016/04/29/spark-tuning-basic.html">https://tech.meituan.com/2016/04/29/spark-tuning-basic.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark-SQL 02</title>
      <link href="2019/05/28/spark-sql02/"/>
      <url>2019/05/28/spark-sql02/</url>
      
        <content type="html"><![CDATA[<p>RDD与DataFrame互相转换:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>spark<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token keyword">object</span> DFRDDApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>master<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_      <span class="token comment" spellcheck="true">// 转换为RDD</span>      <span class="token keyword">val</span> data <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContext<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"data/DF/people.txt"</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 转换为DF</span>      <span class="token keyword">val</span> DF <span class="token operator">=</span> data<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> name <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim        <span class="token keyword">val</span> age <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toInt        People<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toDF<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      DF.printSchema()</span><span class="token comment" spellcheck="true">//      DF.show()</span>      <span class="token comment" spellcheck="true">// DF转RDD</span>      DF<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> x<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 直接对DF进行map操作</span>      DF<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> x<span class="token punctuation">.</span>getAs<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>      spark<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token keyword">class</span> People <span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">def</span> test01<span class="token punctuation">(</span>spark<span class="token operator">:</span>SparkSession<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_    <span class="token keyword">val</span> rddRow <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContext<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"data/DF/people.txt"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> Row<span class="token punctuation">(</span>x<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> x<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toInt<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     val struct =   StructType(     StructField("a", IntegerType, true) ::     StructField("b", LongType, false) ::     StructField("c", BooleanType, false) :: Nil)     */</span>    <span class="token keyword">val</span> schame <span class="token operator">=</span> StructType<span class="token punctuation">(</span>Array<span class="token punctuation">(</span>      StructField<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> StringType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      StructField<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> IntegerType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> df <span class="token operator">=</span> spark<span class="token punctuation">.</span>createDataFrame<span class="token punctuation">(</span>rddRow<span class="token punctuation">,</span> schame<span class="token punctuation">)</span>    df<span class="token punctuation">.</span>printSchema<span class="token punctuation">(</span><span class="token punctuation">)</span>    df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala">  <span class="token keyword">def</span> test02<span class="token punctuation">(</span>spark<span class="token operator">:</span>SparkSession<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_    <span class="token keyword">val</span> student <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContext<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"data/student.data"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\\|"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> Student<span class="token punctuation">(</span>x<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> x<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> x<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> x<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toDF<span class="token punctuation">(</span><span class="token punctuation">)</span>    student<span class="token punctuation">.</span>printSchema<span class="token punctuation">(</span><span class="token punctuation">)</span>    student<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>    student<span class="token punctuation">.</span>take<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    student<span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>    student<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show    student<span class="token punctuation">.</span>filter<span class="token punctuation">(</span><span class="token string">"id > 20"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span><span class="token string">"name = '' or name = 'NULL'"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show    student<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    student<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token string">'name, '</span>id<span class="token punctuation">.</span>desc<span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    student<span class="token punctuation">.</span>orderBy<span class="token punctuation">(</span><span class="token string">'name, '</span>id<span class="token punctuation">.</span>desc<span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    student<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'id, '</span>name <span class="token punctuation">,</span> <span class="token symbol">'phone</span><span class="token punctuation">.</span>as<span class="token punctuation">(</span><span class="token string">"telephone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    student.withColumnRenamed()</span>    <span class="token keyword">val</span> s1 <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContext<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"data/student.data"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\\|"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> Student<span class="token punctuation">(</span>x<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> x<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> x<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> x<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toDF<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> s2 <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContext<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"data/student.data"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\\|"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> Student<span class="token punctuation">(</span>x<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> x<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> x<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> x<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toDF<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 默认全连接</span>    s1<span class="token punctuation">.</span>join<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    s1<span class="token punctuation">.</span>join<span class="token punctuation">(</span>s2<span class="token punctuation">,</span> s1<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> s2<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// show只显示前20行,并且会截取 可以加参数行数和false</span><span class="token comment" spellcheck="true">//    student.show(330, false)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token keyword">class</span> People <span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token keyword">class</span> Student<span class="token punctuation">(</span>id<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> phone<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> email<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span></code></pre><p>数据源操作:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>source<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Dataset<span class="token punctuation">,</span> SaveMode<span class="token punctuation">,</span> SparkSession<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> DataSourceApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>master<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_    <span class="token keyword">val</span> df1 <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"data/DF/people.txt"</span><span class="token punctuation">)</span>    df1<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> df2 <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token string">"data/DF/people.txt"</span><span class="token punctuation">)</span>    df2<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> ds<span class="token operator">:</span> Dataset<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"data/DF/people.txt"</span><span class="token punctuation">)</span>    ds<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> mapDF <span class="token operator">=</span> df1<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>      <span class="token punctuation">(</span>splits<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">,</span> splits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toDF<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span>    mapDF<span class="token punctuation">.</span>write<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>mode<span class="token punctuation">(</span>SaveMode<span class="token punctuation">.</span>Overwrite<span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"compress"</span><span class="token punctuation">,</span> <span class="token string">"gzip"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"out"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * Exception in thread "main" org.apache.spark.sql.AnalysisException: Text data source supports only a single column, and you have 2 columns.     */</span>    <span class="token comment" spellcheck="true">// TODO ==> 自定义实现多列输出</span>    spark<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark-SQL 01</title>
      <link href="2019/05/25/spark-sql01/"/>
      <url>2019/05/25/spark-sql01/</url>
      
        <content type="html"><![CDATA[<p>创建软连接:</p><p>ln -s $HIVE_HOME/conf/hive-site.xml hive-site.xml</p><p>启动spark-shell:</p><pre><code>spark-shell --jars $HIVE_HOME/lib/mysql-connector-java-5.1.47.jar</code></pre><p>DataFrame=DataSet[Row]</p><p>DataSet</p><p>DataFrame基本API:</p><pre><code>val df = spark.read.json(&quot;file:///home/hadoop/app/spark-3.1.1-bin-hadoop2.7/examples/src/main/resources/people.json&quot;)</code></pre><p>scala&gt; df.show<br>+—-+——-+<br>| age|   name|<br>+—-+——-+<br>|null|Michael|<br>|  30|   Andy|<br>|  19| Justin|<br>+—-+——-+</p><p>查看schema信息:</p><p>scala&gt; df.printSchema()<br>root<br> |– age: long (nullable = true)<br> |– name: string (nullable = true)</p><p>查看内容:</p><p>scala&gt; df.select(“name”).show<br>+——-+<br>|   name|<br>+——-+<br>|Michael|<br>|   Andy|<br>| Justin|<br>+——-+</p><p>scala&gt; df.select(‘name,’age+1).show<br>+——-+———+<br>|   name|(age + 1)|<br>+——-+———+<br>|Michael|     null|<br>|   Andy|       31|<br>| Justin|       20|<br>+——-+———+</p><p>scala&gt; df.createOrReplaceTempView(“people”)</p><p>scala&gt; spark.sql(“select * from people”).show<br>+—-+——-+<br>| age|   name|<br>+—-+——-+<br>|null|Michael|<br>|  30|   Andy|<br>|  19| Justin|<br>+—-+——-+</p><p>scala&gt; df.createGlobalTempView(“g_people”)</p><p>scala&gt; spark.sql(“SELECT * FROM global_temp.g_people”).show()<br>+—-+——-+<br>| age|   name|<br>+—-+——-+<br>|null|Michael|<br>|  30|   Andy|<br>|  19| Justin|<br>+—-+——-+</p><p>可以直接解析json格式.</p><p>DataSet基本API操作:</p><p>DataSet是强类型的,需要带类型.</p><pre><code>scala&gt; case class Person(name: String, age: Long)defined class Personscala&gt; val caseClassDS = Seq(Person(&quot;Andy&quot;, 32)).toDS()caseClassDS: org.apache.spark.sql.Dataset[Person] = [name: string, age: bigint]scala&gt; caseClassDS.show()+----+---+|name|age|+----+---+|Andy| 32|+----+---+scala&gt; val peopleDS = spark.read.json(path).as[Person]peopleDS: org.apache.spark.sql.Dataset[Person] = [age: bigint, name: string]scala&gt; peopleDS.map(_.name)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark-core 09</title>
      <link href="2019/05/22/spark-core09/"/>
      <url>2019/05/22/spark-core09/</url>
      
        <content type="html"><![CDATA[<h3 id="配置Spark日志节点"><a href="#配置Spark日志节点" class="headerlink" title="配置Spark日志节点"></a>配置Spark日志节点</h3><p>1.修改spark-defaults.conf配置</p><pre class=" language-conf"><code class="language-conf">spark.eventLog.enabled           truespark.eventLog.dir               hdfs://warehouse001:9000/directory</code></pre><p>2.修改spark-env.sh配置</p><pre><code>export SPARK_HISTORY_OPTS=&quot;-Dspark.history.fs.Directory=hdfs://warehouse001:9000/directory -Dspark.history.ui.port=7777 -Dspark.history.fs.logDirectory=hdfs://warehouse001:9000/directory&quot;</code></pre><p>3.启动日志节点</p><p>sh start-history-server.sh</p><p>4.启动spark-sehll</p><p>5.查看日志</p><p><a href="http://warehouse001:7777/">http://warehouse001:7777/</a></p><h3 id="Spark-on-YARN"><a href="#Spark-on-YARN" class="headerlink" title="Spark on YARN"></a>Spark on YARN</h3><p>1.修改spark-env.sh配置</p><pre><code>export HADOOP_CONF_DIR=$&#123;HADOOP_HOME&#125;/etc/hadoop</code></pre><p>2.启动spark on yarn</p><pre><code>spark-shell --master yarn</code></pre><p>3.测试</p><pre><code>spark-submit --class org.apache.spark.examples.SparkPi \    --master yarn \    --queue thequeue \    $&#123;SPARK_HOME&#125;/examples/jars/spark-examples*.jar \    2</code></pre><p>结果: </p><p>Pi is roughly 3.1362556812784064</p>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark-core 08</title>
      <link href="2019/05/20/spark-core08/"/>
      <url>2019/05/20/spark-core08/</url>
      
        <content type="html"><![CDATA[<h3 id="共享变量"><a href="#共享变量" class="headerlink" title="共享变量"></a>共享变量</h3><p>accumulators:计数器</p><p>broadcast:广播变量    只读的</p><h4 id="计数器"><a href="#计数器" class="headerlink" title="计数器:"></a>计数器:</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>day08<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> AccumulatorApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"AccumulatorApp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 获取数组里的值的个数,并乘以100     */</span><span class="token comment" spellcheck="true">//    // acc在driver端运行 executor端调用 所以后面是拿不到acc的值的</span><span class="token comment" spellcheck="true">//    var acc = 0</span><span class="token comment" spellcheck="true">//    val rdd = sc.makeRDD(1 to 10, 2)</span><span class="token comment" spellcheck="true">//    val rdd2 = rdd.map(x => &amp;#123;</span><span class="token comment" spellcheck="true">//      if (x % 2 == 0) &amp;#123;</span><span class="token comment" spellcheck="true">//        acc += 1</span><span class="token comment" spellcheck="true">//        x * 100</span><span class="token comment" spellcheck="true">//      &amp;#125;</span><span class="token comment" spellcheck="true">//    &amp;#125;)</span>    <span class="token comment" spellcheck="true">/**     * 使用计数器     */</span><span class="token comment" spellcheck="true">//    val acc = sc.longAccumulator("cnts")</span><span class="token comment" spellcheck="true">//      val rdd = sc.makeRDD(1 to 10, 2)</span><span class="token comment" spellcheck="true">//      val rdd2 = rdd.map(x => &amp;#123;</span><span class="token comment" spellcheck="true">//        if (x % 2 == 0) &amp;#123;</span><span class="token comment" spellcheck="true">//          acc.add(1L)</span><span class="token comment" spellcheck="true">//          x * 100</span><span class="token comment" spellcheck="true">//        &amp;#125;</span><span class="token comment" spellcheck="true">//      &amp;#125;)</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    // 这里没有action,算子是不执行的</span><span class="token comment" spellcheck="true">//    println("-----" + acc.value)</span><span class="token comment" spellcheck="true">//    rdd2.foreach(println)</span><span class="token comment" spellcheck="true">//    println("------" + acc.value)</span>    <span class="token comment" spellcheck="true">/**     * 计数器 每触发一次再调用,就会累加     * 解决方法:     * 1.放到cache中(偷懒的方法)     * 2.调整代码顺序     */</span><span class="token comment" spellcheck="true">//    val acc = sc.longAccumulator("cnts")</span><span class="token comment" spellcheck="true">//    val rdd = sc.parallelize(List(("zhangsan", 30), ("lisi", 80), ("wangwu", 20)))</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    val rdd2 = rdd.map(x => &amp;#123;</span><span class="token comment" spellcheck="true">//      if (x._2 > 60) &amp;#123;</span><span class="token comment" spellcheck="true">//        acc.add(1)</span><span class="token comment" spellcheck="true">//      &amp;#125;</span><span class="token comment" spellcheck="true">//    &amp;#125;)</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    println("触发action之前的值: " + acc.value)</span><span class="token comment" spellcheck="true">//    println(rdd2.count())</span><span class="token comment" spellcheck="true">//    println("触发action之后的值: " + acc.value)</span><span class="token comment" spellcheck="true">//    println(rdd2.count())</span><span class="token comment" spellcheck="true">//    println("触发action之后的值: " + acc.value)</span><span class="token comment" spellcheck="true">//    println(rdd2.count())</span><span class="token comment" spellcheck="true">//    println("触发action之后的值: " + acc.value)</span><span class="token comment" spellcheck="true">//    println(rdd2.count())</span><span class="token comment" spellcheck="true">//    println("触发action之后的值: " + acc.value)</span>    <span class="token keyword">case</span> <span class="token keyword">class</span> User<span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> phone<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> users <span class="token operator">=</span> Array<span class="token punctuation">(</span>      User<span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"138123455678"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      User<span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token string">"138123450000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      User<span class="token punctuation">(</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span><span class="token string">"138123451111"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      User<span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">,</span><span class="token string">"138123450221"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 算出手机尾号后三位重复的个数     */</span>    <span class="token keyword">val</span> acc <span class="token operator">=</span> sc<span class="token punctuation">.</span>collectionAccumulator<span class="token punctuation">[</span>User<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"手机尾号后三位相同的"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>users<span class="token punctuation">)</span>    rdd<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>user <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> phone <span class="token operator">=</span> user<span class="token punctuation">.</span>phone<span class="token punctuation">.</span>reverse      <span class="token keyword">if</span> <span class="token punctuation">(</span>phone<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> phone<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> phone<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> phone<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> acc<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>acc<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>自定义Int计数器:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>day08<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>util<span class="token punctuation">.</span>AccumulatorV2<span class="token keyword">class</span> MyAccumulator <span class="token keyword">extends</span>  AccumulatorV2<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">var</span> _count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> isZero<span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> _count <span class="token operator">==</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">// 把当前的累计复制给一个新的累加器</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AccumulatorV2<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> newAcc <span class="token operator">=</span> <span class="token keyword">new</span> MyAccumulator    newAcc<span class="token punctuation">.</span>_count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_count    newAcc  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    _count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 分区内累加</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> add<span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> _count <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true">// 分区间累加</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> merge<span class="token punctuation">(</span>other<span class="token operator">:</span> AccumulatorV2<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> other <span class="token keyword">match</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> o<span class="token operator">:</span> MyAccumulator <span class="token keyword">=></span>      _count <span class="token operator">+=</span> o<span class="token punctuation">.</span>_count    <span class="token keyword">case</span> _ <span class="token keyword">=></span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> UnsupportedOperationException<span class="token punctuation">(</span>        s<span class="token string">"Cannot merge $&amp;#123;this.getClass.getName&amp;#125; with $&amp;#123;other.getClass.getName&amp;#125;"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> value<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> _count<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>使用自定义计数器:</p><pre class=" language-scala"><code class="language-scala">    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">10</span><span class="token operator">:</span> _<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> acc <span class="token operator">=</span> <span class="token keyword">new</span> MyAccumulator    <span class="token comment" spellcheck="true">//注册计数器</span>    sc<span class="token punctuation">.</span>register<span class="token punctuation">(</span>acc<span class="token punctuation">)</span>    rdd<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      acc<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      x    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    println<span class="token punctuation">(</span>acc<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>自定义多个内容的计数器:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>util<span class="token punctuation">.</span>AccumulatorV2<span class="token comment" spellcheck="true">/** * 计数器求sum count avg */</span><span class="token keyword">class</span> SumAvgCount <span class="token keyword">extends</span> AccumulatorV2<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">,</span> Map<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Any</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">var</span> map <span class="token operator">=</span> Map<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Any</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> isZero<span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> map<span class="token punctuation">.</span>isEmpty  <span class="token keyword">override</span> <span class="token keyword">def</span> copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AccumulatorV2<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">,</span> Map<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Any</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span><span class="token string">"-------copy-------"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> newAcc <span class="token operator">=</span> <span class="token keyword">new</span> SumAvgCount    newAcc<span class="token punctuation">.</span>map <span class="token operator">=</span> map    newAcc  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span><span class="token string">"-------reset-------"</span><span class="token punctuation">)</span>    Map<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Any</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> add<span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span><span class="token string">"-------add-------"</span><span class="token punctuation">)</span>    map <span class="token operator">+=</span> <span class="token string">"sum"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">"sum"</span><span class="token punctuation">,</span> <span class="token number">0D</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">)</span>    map <span class="token operator">+=</span> <span class="token string">"count"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span><span class="token builtin">Long</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> merge<span class="token punctuation">(</span>other<span class="token operator">:</span> AccumulatorV2<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">,</span> Map<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Any</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span><span class="token string">"-------merge-------"</span><span class="token punctuation">)</span>    other <span class="token keyword">match</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> o<span class="token operator">:</span>SumAvgCount <span class="token keyword">=></span>        map <span class="token operator">+=</span> <span class="token string">"sum"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">"sum"</span><span class="token punctuation">,</span> <span class="token number">0D</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">]</span> <span class="token operator">+</span> o<span class="token punctuation">.</span>map<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">"sum"</span><span class="token punctuation">,</span> <span class="token number">0D</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        map <span class="token operator">+=</span> <span class="token string">"count"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span><span class="token builtin">Long</span><span class="token punctuation">]</span> <span class="token operator">+</span> o<span class="token punctuation">.</span>map<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span><span class="token builtin">Long</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">case</span> _ <span class="token keyword">=></span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> UnsupportedOperationException<span class="token punctuation">(</span>          s<span class="token string">"Cannot merge $&amp;#123;this.getClass.getName&amp;#125; with $&amp;#123;other.getClass.getName&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> value<span class="token operator">:</span> Map<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Any</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span><span class="token string">"-------value-------"</span><span class="token punctuation">)</span>    map <span class="token operator">+=</span> <span class="token string">"avg"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">"sum"</span><span class="token punctuation">,</span><span class="token number">0D</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">]</span> <span class="token operator">/</span> map<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span><span class="token builtin">Long</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    map  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>调用:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">10</span><span class="token operator">:</span> _<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> acc <span class="token operator">=</span> <span class="token keyword">new</span> SumAvgCount    sc<span class="token punctuation">.</span>register<span class="token punctuation">(</span>acc<span class="token punctuation">)</span>    rdd<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>x <span class="token keyword">=></span> acc<span class="token punctuation">.</span>add<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>acc<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**    生命周期:    -------copy-------    -------reset-------    -------copy-------    -------reset-------    -------copy-------    -------reset-------    -------copy-------    -------reset-------    -------add-------    -------add-------    -------add-------    -------add-------    -------add-------    -------add-------    -------add-------    -------add-------    -------add-------    -------add-------    -------merge-------    -------value-------    Map(sum -> 55.0, count -> 10, avg -> 5.5)     */</span></code></pre><h4 id="广播变量"><a href="#广播变量" class="headerlink" title="广播变量"></a>广播变量</h4><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>day08<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 需求: * table1 * id   name * 110 zhangsan * 222 lisi * * table2 * id   school  sid * 110 school1  1 * * 结果 * id name school */</span><span class="token keyword">object</span> BroadCastApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"BroadCastApp"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    val people_info = sc.parallelize(List(("110", "zhangsan"), ("222", "lisi")))</span><span class="token comment" spellcheck="true">//      .map(x => (x._1, x))</span>    <span class="token keyword">val</span> school <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"110"</span><span class="token punctuation">,</span> <span class="token string">"school1"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">,</span> <span class="token string">"school2"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>_1<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 普通方式     */</span><span class="token comment" spellcheck="true">//    people_info.join(school)</span><span class="token comment" spellcheck="true">//      .map(x => &amp;#123;</span><span class="token comment" spellcheck="true">//        x._1 + "," + x._2._1._2 + "," +x._2._2._2</span><span class="token comment" spellcheck="true">//      &amp;#125;).foreach(println)</span>    <span class="token comment" spellcheck="true">/**     * 广播变量     * 没有shuffle,相当于MR的map side join     */</span>    <span class="token keyword">val</span> people_info <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"110"</span><span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"222"</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>_1<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>collectAsMap<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> peopleBroadcast <span class="token operator">=</span> sc<span class="token punctuation">.</span>broadcast<span class="token punctuation">(</span>people_info<span class="token punctuation">)</span>    school<span class="token punctuation">.</span>mapPartitions<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> bc <span class="token operator">=</span> peopleBroadcast<span class="token punctuation">.</span>value      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">&lt;-</span> x <span class="token keyword">if</span> bc<span class="token punctuation">.</span>contains<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">yield</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> bc<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span>_2<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>案例:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>day08<span class="token keyword">import</span> Utils<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Connection<span class="token punctuation">,</span> PreparedStatement<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 报错:   org.apache.spark.SparkException: This RDD lacks a SparkContext. It could happen in the following cases:  (1) RDD transformations and actions are NOT invoked by the driver, but inside of other transformations; for example, rdd1.map(x => rdd2.values.count() * x) is invalid because the values transformation and count action cannot be performed inside of the rdd1.map transformation. For more information, see SPARK-5063.  (2) When a Spark Streaming job recovers from checkpoint, this exception will be hit if a reference to an RDD not defined by the streaming job is used in DStream operations. For more information, See SPARK-13758. 原因: 在RDD1里对RDD2进行操作,也就是不能嵌套 */</span><span class="token keyword">object</span> LogApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"LogApp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token keyword">val</span> ip <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"data/logs/ip.txt"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> logs <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"data/logs/access.log"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> ipRuleRDD <span class="token operator">=</span> ip<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> splits <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\\|"</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> startIp <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toLong      <span class="token keyword">val</span> stopIp <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toLong      <span class="token keyword">val</span> province <span class="token operator">=</span> splits<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>      <span class="token punctuation">(</span>startIp<span class="token punctuation">,</span> stopIp<span class="token punctuation">,</span> province<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 在这里action  这种场景只适合小数据量,数据量大时不能使用collect</span>      <span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 广播变量</span>    <span class="token keyword">val</span> bc <span class="token operator">=</span> sc<span class="token punctuation">.</span>broadcast<span class="token punctuation">(</span>ipRuleRDD<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 计数器</span>    <span class="token keyword">val</span> cnts <span class="token operator">=</span> sc<span class="token punctuation">.</span>longAccumulator<span class="token punctuation">(</span><span class="token string">"totals"</span><span class="token punctuation">)</span>    logs<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> lines <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\\|"</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> ip <span class="token operator">=</span> lines<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim      <span class="token keyword">val</span> ipBc <span class="token operator">=</span> bc<span class="token punctuation">.</span>value      <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关键字段加判断</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> ipLong <span class="token operator">=</span> IPUtils<span class="token punctuation">.</span>ip2Long<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//报错位置</span><span class="token comment" spellcheck="true">//      val province = IPUtils.binarySearch(ipLong, ipRuleRDD.collect())</span>      <span class="token keyword">val</span> province <span class="token operator">=</span> IPUtils<span class="token punctuation">.</span>binarySearch<span class="token punctuation">(</span>ipLong<span class="token punctuation">,</span> ipBc<span class="token punctuation">)</span>      cnts<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span>      <span class="token punctuation">(</span>province<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      .foreach(println)</span>      <span class="token punctuation">.</span>foreachPartition<span class="token punctuation">(</span>partition <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> connection<span class="token operator">:</span> Connection <span class="token operator">=</span> <span class="token keyword">null</span>         <span class="token keyword">var</span> pstmt<span class="token operator">:</span>PreparedStatement <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          connection <span class="token operator">=</span> MySQLUtils<span class="token punctuation">.</span>getConnection<span class="token punctuation">(</span><span class="token punctuation">)</span>          connection<span class="token punctuation">.</span>setAutoCommit<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>          <span class="token keyword">val</span> sql <span class="token operator">=</span> <span class="token string">"insert into ip_stat(province, cnt) values(?,?)"</span>          pstmt <span class="token operator">=</span> connection<span class="token punctuation">.</span>prepareStatement<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 一条一条插入</span>          partition<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pstmt<span class="token punctuation">.</span>setString<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>            pstmt<span class="token punctuation">.</span>setInt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>_2<span class="token punctuation">)</span>            pstmt<span class="token punctuation">.</span>addBatch<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>          pstmt<span class="token punctuation">.</span>executeBatch<span class="token punctuation">(</span><span class="token punctuation">)</span>          connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">case</span>  e<span class="token operator">:</span>Exception <span class="token keyword">=></span> e<span class="token punctuation">.</span>printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span>            connection<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> pstmt<span class="token punctuation">)</span> pstmt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            MySQLUtils<span class="token punctuation">.</span>closeConnection<span class="token punctuation">(</span>connection<span class="token punctuation">,</span>pstmt<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>cnts<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka</title>
      <link href="2019/05/18/kafka/"/>
      <url>2019/05/18/kafka/</url>
      
        <content type="html"><![CDATA[<p>1.官网的介绍<br>消息中间件 承上启下 缓冲  稳稳的消费<br>flume–&gt;kafka–&gt;ss/flink</p><p>2.部署kafka</p><p>cd $KAFKA_HOME/config</p><p>修改server.properties :</p><pre><code>vi server.properties broker.id=0host.name=warehouse001port=9092log.dirs=/home/hadoop/tmp/kafka-logszookeeper.connect=warehouse001:2181/kafka</code></pre><p>启动kafka:</p><p>[hadoop@warehouse001 config]$ cd ../bin/<br>[hadoop@warehouse001 bin]$  sh kafka-server-start.sh -daemon ../config/server.properties<br>[hadoop@warehouse001 bin]$ jps<br>31597 Kafka</p><p>3.概念</p><p>topic:主题    相同属性的数据放到一起</p><p>partition:分区    可以提高数据传输吞吐量(多节点时多个分区同时读写),是topic的物理分组.一个topic至少一个分区</p><p>replication:副本数    类似HDFS block的块副本,目的是高可靠/高容错</p><p>创建topic:</p><pre><code>bin/kafka-topics.sh --create --topic quickstart-events --bootstrap-server localhost:9092 bin/kafka-topics.sh \ --create \ --zookeeper warehouse001:2181/kafka \ --replication-factor 1 \ --partitions 3 \ --topic mytopic</code></pre><p>查看kafka集群多少个主题:</p><pre><code>bin/kafka-topics.sh --list \--zookeeper  warehouse001:2181/kafka</code></pre><p>查看指定主题的状况:</p><pre><code>bin/kafka-topics.sh --describe \--zookeeper warehouse001:2181/kafka \--topic mytopic</code></pre><p>Leader：是读写节点<br>Replicas: 2,4,8  是复制该分区数据的节点列表<br>ISR: 2,1,0 in-sync replicas 当前活跃的副本列表  是有可能成为leaderLeader：是读写节点<br>Replicas: 2,4,8  是复制该分区数据的节点列表<br>ISR: 2,1,0 in-sync replicas 当前活跃的副本列表  是有可能成为leader</p><p>数据在topic每个分区内有序，但是全局无序</p><p>解决方案:</p><ol><li><p>哪怕多个kafka节点，也只设置1个分区<br>所有的特征数据 id=1..100  都写到1个分区</p></li><li><p>sql：<br> 分组:<br> db,table,联合主键<br> 排序:<br> 时间戳 </p></li><li><p>【特征数据】： db,table,联合主键<br>去了解kafka写数据的代码，就能够再深入点<br>api: send(key,value)<br>  send(null,insert….)<br>  send(null,update1 ….)</p><p>  key:作用是什么，<br>  就是将相同特征数据( db,table,联合主键)通过算法 写入到【同一个】分区，<br>  【恰巧】分区内是有序的！</p></li></ol><p>算法:</p><p>如hash(“db1-t1-100”) % 3= 102%3=34…0 下标   就是xxx-0分区 </p>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark-core 07</title>
      <link href="2019/05/15/spark-core07/"/>
      <url>2019/05/15/spark-core07/</url>
      
        <content type="html"><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>1.窄依赖</p><p>​    一个父RDD的partition至多被子RDD使用一次</p><p>​    pipeline</p><p>​    尽可能的使用窄依赖,尽可能不带shuffle</p><p>2.宽依赖</p><p>​    一个父RDD的partition被子RDD使用多次</p><p>​    会有shuffle</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>只有遇到action算子时才会执行</p><p>cache()</p><p>persist()</p><p>StorageLevel:</p><pre class=" language-scala"><code class="language-scala"> <span class="token comment" spellcheck="true">//    默认只存内存</span>  <span class="token keyword">val</span> NONE <span class="token operator">=</span> <span class="token keyword">new</span> StorageLevel<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 只存磁盘    副本数</span>  <span class="token keyword">val</span> DISK_ONLY <span class="token operator">=</span> <span class="token keyword">new</span> StorageLevel<span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> DISK_ONLY_2 <span class="token operator">=</span> <span class="token keyword">new</span> StorageLevel<span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> DISK_ONLY_3 <span class="token operator">=</span> <span class="token keyword">new</span> StorageLevel<span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 只存内存 副本数</span>  <span class="token keyword">val</span> MEMORY_ONLY <span class="token operator">=</span> <span class="token keyword">new</span> StorageLevel<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> MEMORY_ONLY_2 <span class="token operator">=</span> <span class="token keyword">new</span> StorageLevel<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    序列化    会耗CPU</span>  <span class="token keyword">val</span> MEMORY_ONLY_SER <span class="token operator">=</span> <span class="token keyword">new</span> StorageLevel<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> MEMORY_ONLY_SER_2 <span class="token operator">=</span> <span class="token keyword">new</span> StorageLevel<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> MEMORY_AND_DISK <span class="token operator">=</span> <span class="token keyword">new</span> StorageLevel<span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> MEMORY_AND_DISK_2 <span class="token operator">=</span> <span class="token keyword">new</span> StorageLevel<span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> MEMORY_AND_DISK_SER <span class="token operator">=</span> <span class="token keyword">new</span> StorageLevel<span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> MEMORY_AND_DISK_SER_2 <span class="token operator">=</span> <span class="token keyword">new</span> StorageLevel<span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> OFF_HEAP <span class="token operator">=</span> <span class="token keyword">new</span> StorageLevel<span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>区别:</p><p>cache()底层调用的是persist(),默认是MEMORY_ONLY,persist()可以根据需求设置缓存级别</p><p>移除缓存:</p><p>unpersisit()    立即执行,与persisit()不同</p><p>序列化比默认的更加节省内存空间,但是序列化消耗内存,也就是说在选用时要考虑CPU和内存大小,合理选用.</p><p>kryo序列化:</p><p>需要先注册,注册后性能更好.</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>day07<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>StorageLevel<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token punctuation">.</span>ArrayBuffer<span class="token keyword">import</span> scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token comment" spellcheck="true">/** * 服务器运行时,配置参数 * spark-submit .....  --conf spark.serializer=org.apache.spark.serializer.KryoSerializer * * $SPARK_HOME/conf/spark-defaults.conf * spark.serializer org.apache.spark.serializer.KryoSerializer **/</span><span class="token keyword">object</span> CacheApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//      .setMaster("local")</span>      <span class="token comment" spellcheck="true">//      .setAppName(this.getClass.getCanonicalName)</span>      <span class="token comment" spellcheck="true">//      .set("spark.serializer", "org.apache.spark.serializer.KryoSerializer")</span>      <span class="token comment" spellcheck="true">// 注册自定义类</span>      <span class="token punctuation">.</span>registerKryoClasses<span class="token punctuation">(</span>Array<span class="token punctuation">(</span>classOf<span class="token punctuation">[</span>Info<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token keyword">val</span> infos <span class="token operator">=</span> <span class="token keyword">new</span> ArrayBuffer<span class="token punctuation">[</span>Info<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> names <span class="token operator">=</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">,</span><span class="token string">"ls"</span><span class="token punctuation">,</span><span class="token string">"ww"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> genders <span class="token operator">=</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"女女女"</span><span class="token punctuation">,</span> <span class="token string">"未知"</span><span class="token punctuation">,</span> <span class="token string">"男男男"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> addresses <span class="token operator">=</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"上海"</span><span class="token punctuation">,</span> <span class="token string">"山东"</span><span class="token punctuation">,</span> <span class="token string">"广州"</span><span class="token punctuation">)</span>    <span class="token number">1</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> name <span class="token operator">=</span> names<span class="token punctuation">(</span>Random<span class="token punctuation">.</span>nextInt<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> age <span class="token operator">=</span> Random<span class="token punctuation">.</span>nextInt<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> gender <span class="token operator">=</span> genders<span class="token punctuation">(</span>Random<span class="token punctuation">.</span>nextInt<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> address <span class="token operator">=</span> addresses<span class="token punctuation">(</span>Random<span class="token punctuation">.</span>nextInt<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      infos <span class="token punctuation">.</span>+<span class="token operator">=</span> <span class="token punctuation">(</span>Info<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>infos<span class="token punctuation">)</span>    rdd<span class="token punctuation">.</span>persist<span class="token punctuation">(</span>StorageLevel<span class="token punctuation">.</span>MEMORY_ONLY_SER<span class="token punctuation">)</span>    println<span class="token punctuation">(</span>rdd<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 34.3 MiB 默认     * 25.4 MiB java序列化     *     * 69.3 MiB 不注册kryo 不支持所有数据类型     * 31.2 MiB 注册kryo     */</span>    Thread<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token keyword">class</span> Info<span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> gender<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> address<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><pre><code>在算子的作用域范围外声明，却在算子作用域内操作和执行</code></pre><p>dirver端的参数,在excuter端调用,最后在dirver端是获取不到excuter里的变量的,原因是生命周期已经结束.</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">import</span> Utils<span class="token punctuation">.</span>MySQLUtils<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> ClosureAPP <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getCanonicalName<span class="token punctuation">)</span>      <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//    </span><span class="token comment" spellcheck="true">/**      //     * 在算子的作用域范围外声明，却在算子作用域内操作和执行      //     */</span>      <span class="token comment" spellcheck="true">//    var counter = 0  // driver</span>      <span class="token comment" spellcheck="true">//    val rdd = sc.parallelize(1 to 5 , 2)</span>      <span class="token comment" spellcheck="true">//    rdd.foreach(x => &amp;#123; // executor</span>      <span class="token comment" spellcheck="true">//      counter += x</span>      <span class="token comment" spellcheck="true">//      println(".........." + counter)</span>      <span class="token comment" spellcheck="true">//    &amp;#125;)</span>      <span class="token comment" spellcheck="true">//</span>      <span class="token comment" spellcheck="true">//    println("Counter value: " + counter)</span>      <span class="token comment" spellcheck="true">/**       * 自定义类实现序列化接口即可       */</span>      sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">10</span><span class="token operator">:</span> _<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>foreachPartition<span class="token punctuation">(</span>partition <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">val</span> connection <span class="token operator">=</span> MySQLUtils<span class="token punctuation">.</span>getConnection<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Driver must</span>          println<span class="token punctuation">(</span><span class="token string">"~~~~~~~~"</span> <span class="token operator">+</span> connection<span class="token punctuation">)</span>          <span class="token keyword">val</span> sql <span class="token operator">=</span> <span class="token string">"insert into student2(name) values(?)"</span>          <span class="token keyword">val</span> pstmt <span class="token operator">=</span> connection<span class="token punctuation">.</span>prepareStatement<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>          partition<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token string">"张三"</span> <span class="token operator">+</span> x            pstmt<span class="token punctuation">.</span>setString<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>            pstmt<span class="token punctuation">.</span>addBatch<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>          pstmt<span class="token punctuation">.</span>executeBatch<span class="token punctuation">(</span><span class="token punctuation">)</span>          MySQLUtils<span class="token punctuation">.</span>closeConnection<span class="token punctuation">(</span>connection<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark-core 05</title>
      <link href="2019/05/05/spark-core06/"/>
      <url>2019/05/05/spark-core06/</url>
      
        <content type="html"><![CDATA[<h3 id="Spark连接MySQL数据库"><a href="#Spark连接MySQL数据库" class="headerlink" title="Spark连接MySQL数据库"></a>Spark连接MySQL数据库</h3><p>1.准备Mysql工具类(简易版)</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> Utils<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>Connection<span class="token punctuation">,</span> DriverManager<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> MySQLUtils <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> getConnection<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Class<span class="token punctuation">.</span>forName<span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span>    DriverManager<span class="token punctuation">.</span>getConnection<span class="token punctuation">(</span><span class="token string">"jdbc:mysql://warehouse001:3306/emp"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"ruozedata"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> closeConnection<span class="token punctuation">(</span>connection<span class="token operator">:</span> Connection<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>2.连接数据库并写入</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>day05<span class="token keyword">import</span> Utils<span class="token punctuation">.</span>MySQLUtils<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> MapAndMapPartitionApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"MapAndMapPartitionApp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">100</span> <span class="token operator">:</span>_<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">/**       * map这里每个元素都拿一次connection,不采用       */</span><span class="token comment" spellcheck="true">//      .map(x => &amp;#123;</span><span class="token comment" spellcheck="true">//        val connection = MySQLUtils.getConnection()</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        println("----" + connection)</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        val deptno = x</span><span class="token comment" spellcheck="true">//        val dname = "张三" + x</span><span class="token comment" spellcheck="true">//        val loc = "loc" +x</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        val sql = "insert into dept(deptno,dname,loc) values(?,?,?)"</span><span class="token comment" spellcheck="true">//        val pstmt = connection.prepareStatement(sql)</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        pstmt.setInt(1, deptno)</span><span class="token comment" spellcheck="true">//        pstmt.setString(2, dname)</span><span class="token comment" spellcheck="true">//        pstmt.setString(3, loc)</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        pstmt.executeUpdate()</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        MySQLUtils.closeConnection(connection)</span><span class="token comment" spellcheck="true">//      &amp;#125;).collect()</span>      <span class="token comment" spellcheck="true">/**       * mapPartition 一个分区取一次partition       * ***********  只要遇到写到外部的都用foreachPartition,套用foreach       * 必须掌握 *****       */</span>      <span class="token punctuation">.</span>foreachPartition<span class="token punctuation">(</span>partition <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span>  connection <span class="token operator">=</span> MySQLUtils<span class="token punctuation">.</span>getConnection<span class="token punctuation">(</span><span class="token punctuation">)</span>        println<span class="token punctuation">(</span><span class="token string">"----------"</span> <span class="token operator">+</span> connection<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// Mysql自动提交设置为false</span>        connection<span class="token punctuation">.</span>setAutoCommit<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 设置sql</span>        <span class="token keyword">val</span> sql <span class="token operator">=</span> <span class="token string">"insert into dept(deptno, dname, loc) values(?,?,?)"</span>        <span class="token keyword">val</span> pstmt <span class="token operator">=</span> connection<span class="token punctuation">.</span>prepareStatement<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>        partition<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">val</span> deptno <span class="token operator">=</span> x          <span class="token keyword">val</span> dname <span class="token operator">=</span> <span class="token string">"张三"</span> <span class="token operator">+</span> x          <span class="token keyword">val</span> loc <span class="token operator">=</span> <span class="token string">"loc"</span> <span class="token operator">+</span>x          <span class="token comment" spellcheck="true">// 设置字段</span>          pstmt<span class="token punctuation">.</span>setInt<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> deptno<span class="token punctuation">)</span>          pstmt<span class="token punctuation">.</span>setString<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> dname<span class="token punctuation">)</span>          pstmt<span class="token punctuation">.</span>setString<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> loc<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 添加批次</span>          pstmt<span class="token punctuation">.</span>addBatch<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 进来的元素进行计数</span>          index <span class="token operator">+=</span><span class="token number">1</span>          <span class="token comment" spellcheck="true">// 判断是否到100个,是就执行</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> pstmt<span class="token punctuation">.</span>executeBatch<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//  最后剩下不到100的元素执行</span>        pstmt<span class="token punctuation">.</span>executeUpdate<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//  提交</span>        connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//  关闭connection</span>        MySQLUtils<span class="token punctuation">.</span>closeConnection<span class="token punctuation">(</span>connection<span class="token punctuation">)</span>        partition      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>coalesce算子:</p><pre class=" language-scala"><code class="language-scala">    <span class="token comment" spellcheck="true">/**     * coalesce    窄依赖     * 作用: 减少分区数 减少小文件     * 指定的分区数大于默认分区数,则不会减少,如果真的想要加分区数,第二个参数改为true,此时是走shuffle的,是宽依赖     */</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">10</span><span class="token operator">:</span> _<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    rdd<span class="token punctuation">.</span>partitions<span class="token punctuation">.</span>size    rdd<span class="token punctuation">.</span>mapPartitionsWithIndex<span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> partition<span class="token punctuation">)</span> <span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span><span class="token string">"----------这是一个分区----------"</span><span class="token punctuation">)</span>      partition<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> s<span class="token string">"分区是$&amp;#123;partition&amp;#125;,元素是$&amp;#123;index&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//  分区为2</span>    <span class="token keyword">val</span> rdd2 <span class="token operator">=</span> rdd<span class="token punctuation">.</span>coalesce<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    rdd2<span class="token punctuation">.</span>partitions<span class="token punctuation">.</span>size    <span class="token comment" spellcheck="true">// 分区为3</span>    <span class="token keyword">val</span> rdd3 <span class="token operator">=</span> rdd<span class="token punctuation">.</span>coalesce<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    rdd3<span class="token punctuation">.</span>partitions<span class="token punctuation">.</span>size    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>还有一个repartition算子,也是调整分区数的</p>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark01</title>
      <link href="2019/05/01/spark01/"/>
      <url>2019/05/01/spark01/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark-core 04</title>
      <link href="2019/04/29/spark-core04/"/>
      <url>2019/04/29/spark-core04/</url>
      
        <content type="html"><![CDATA[<p>RDD算子的使用:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> TransformationApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"TransformationApp"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    // 对年龄+1  map</span><span class="token comment" spellcheck="true">//    val rdd = sc.parallelize(List(("xiaoming",18),("xiaohong",20),("xingxing",30)))</span><span class="token comment" spellcheck="true">//    rdd.map(x => (x._1, x._2+1))</span><span class="token comment" spellcheck="true">//    //模式匹配</span><span class="token comment" spellcheck="true">//    rdd.map &amp;#123;</span><span class="token comment" spellcheck="true">//      case (a,b) =>(a, b+1)</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    rdd.mapValues(_+1)</span>    <span class="token comment" spellcheck="true">// spark,1  spark,2 spark,3 hadoop,1 ...</span><span class="token comment" spellcheck="true">//    val rdd = sc.parallelize(Array(("spark", "1,2,3"), ("hadoop", "4,5,6"), ("flink", "7,8,9")))</span><span class="token comment" spellcheck="true">//    rdd.flatMap(x => &amp;#123;</span><span class="token comment" spellcheck="true">//      val words = x._1</span><span class="token comment" spellcheck="true">//      val nums = x._2.split(",")</span><span class="token comment" spellcheck="true">//      nums.map(x => (words,x))</span><span class="token comment" spellcheck="true">//    &amp;#125;)</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    rdd.flatMapValues(x => x.split(","))</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    //取key值 取value</span><span class="token comment" spellcheck="true">//    val rdd = sc.parallelize(List(("xiaoming",18),("xiaohong",20),("xingxing",30)))</span><span class="token comment" spellcheck="true">//    rdd.map(_._1)</span><span class="token comment" spellcheck="true">//    rdd.map(_._2)</span><span class="token comment" spellcheck="true">//    // 单value   ==> [长度,value]    单value转成双value</span><span class="token comment" spellcheck="true">//    val rdd = sc.parallelize(List("hadoop","hive","zookeeper","impala"))</span><span class="token comment" spellcheck="true">//    rdd.map(x => (x.length,x))</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    rdd.keyBy(_.length)</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>Array<span class="token punctuation">(</span><span class="token string">"hive,hive,hive"</span><span class="token punctuation">,</span> <span class="token string">"spark,spark"</span><span class="token punctuation">,</span> <span class="token string">"hadoop,flink"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * wc:     * 1.拆分     * 2.(word,1)     * 3.(word,Iterator)     * 4.reduce汇总     * 拆分成了2个stage 遇到shuffle就拆分作业     * 底层是做了combiner的   combineByKeyWithClassTag : mapSideCombine: Boolean = true,     */</span>    <span class="token comment" spellcheck="true">//  Array[(String, Int)] = Array((hive,3), (flink,1), (spark,2), (hadoop,1))</span>    rdd<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 不做本地预聚合   mapSideCombine = false   性能较差     */</span>    <span class="token comment" spellcheck="true">//   Array[(String, Iterable[Int])] = Array((hive,CompactBuffer(1, 1, 1)), (flink,CompactBuffer(1)), (spark,CompactBuffer(1, 1)), (hadoop,CompactBuffer(1)))</span>    rdd<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>groupByKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mapValues<span class="token punctuation">(</span>_<span class="token punctuation">.</span>size<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//  单value  底层调用的groupByKey groupByKey是针对于KV类型的 所以需要多一步转换成KV再调用reduceByKey</span>    <span class="token comment" spellcheck="true">//  Array[(String, Iterable[String])] = Array((hive,CompactBuffer(hive, hive)), (flink,CompactBuffer(flink)), (spark,CompactBuffer(spark, spark, spark)), (hadoop,CompactBuffer(hadoop)))</span>    <span class="token keyword">val</span> b <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token string">"spark"</span><span class="token punctuation">,</span><span class="token string">"spark"</span><span class="token punctuation">,</span><span class="token string">"spark"</span><span class="token punctuation">,</span><span class="token string">"hive"</span><span class="token punctuation">,</span><span class="token string">"hive"</span><span class="token punctuation">,</span><span class="token string">"hadoop"</span><span class="token punctuation">,</span><span class="token string">"flink"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span>x <span class="token keyword">=></span> x<span class="token punctuation">)</span><span class="token punctuation">.</span>mapValues<span class="token punctuation">(</span>_<span class="token punctuation">.</span>size<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//  按奇偶分组</span>    sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span>_<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token string">"even"</span> <span class="token keyword">else</span> <span class="token string">"odd"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>groupByKey<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//按年龄排序</span>    <span class="token keyword">val</span> c <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"xiaohong"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"xingxing"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>toInt<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 降序</span>    c<span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>toInt<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span><span class="token operator">-</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>toInt<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//  使用sortByKey</span>    c<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>_2<span class="token punctuation">,</span>x<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sortByKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>_2<span class="token punctuation">,</span>x<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//wc并排序</span>    <span class="token keyword">val</span> d <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>Array<span class="token punctuation">(</span><span class="token string">"hive,hive,hive"</span><span class="token punctuation">,</span> <span class="token string">"spark,spark"</span><span class="token punctuation">,</span> <span class="token string">"hadoop,flink"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    d<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>_2<span class="token punctuation">,</span>x<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>sortByKey<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>_2<span class="token punctuation">,</span>x<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//去重  可以设置分区数</span>    <span class="token comment" spellcheck="true">/**     * 去重的原理MR     * map:     *  output:(key,nullwriteable)     * reduce:     *  input:(key,Iterable(nullwriteable,nullwriteable,nullwriteable...))     *  output:去掉value,取key     */</span>    <span class="token keyword">val</span> e <span class="token operator">=</span>sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    e<span class="token punctuation">.</span>distinct<span class="token punctuation">(</span><span class="token punctuation">)</span>    e<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>_<span class="token punctuation">)</span> <span class="token keyword">=></span> x<span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//自定义去重</span>    <span class="token keyword">case</span> <span class="token keyword">class</span> User<span class="token punctuation">(</span>age<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">override</span> <span class="token keyword">def</span> hashCode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age      <span class="token keyword">override</span> <span class="token keyword">def</span> equals<span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> obj <span class="token keyword">match</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> User<span class="token punctuation">(</span>age<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">==</span> age        <span class="token keyword">case</span> _ <span class="token keyword">=></span> <span class="token boolean">false</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> u <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span>User<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"xiaohong"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> User<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> User<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"xingxing"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    u<span class="token punctuation">.</span>distinct<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * union  把两份数据合并到一块     * Array[Int] = Array(1, 2, 3, 4, 5, 5, 6, 7, 8)     * 分区数=分区数相加     */</span>    <span class="token keyword">var</span> aa <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> bb <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>    aa<span class="token punctuation">.</span>union<span class="token punctuation">(</span>bb<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//  交集    intersection  去重</span>    aa <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    bb <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>    aa<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>bb<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//  在A不在B</span>    aa<span class="token punctuation">.</span>subtract<span class="token punctuation">(</span>bb<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//  笛卡尔积</span>    sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">,</span><span class="token string">"xiaohong"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cartesian<span class="token punctuation">(</span>sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token string">"胜"</span><span class="token punctuation">,</span><span class="token string">"负"</span><span class="token punctuation">,</span><span class="token string">"平"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * join (inner join)     * Array[(String, (String, Int))] = Array((xiaoming,(beijing,18)), (xiaohong,(shanghai,20)))     */</span>    <span class="token keyword">val</span> left <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">,</span><span class="token string">"beijing"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"xiaohong"</span><span class="token punctuation">,</span><span class="token string">"shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"xingxing"</span><span class="token punctuation">,</span><span class="token string">"hangzhou"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> right <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"xiaohong"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"pk"</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    left<span class="token punctuation">.</span>join<span class="token punctuation">(</span>right<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 左连接     * Array[(String, (String, Option[Int]))] = Array((xingxing,(hangzhou,None)), (xiaoming,(beijing,Some(18))), (xiaohong,(shanghai,Some(20))))     */</span>    left<span class="token punctuation">.</span>leftOuterJoin<span class="token punctuation">(</span>right<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 右连接     * Array[(String, (Option[String], Int))] = Array((xiaoming,(Some(beijing),18)), (xiaohong,(Some(shanghai),20)), (pk,(None,88)))     */</span>    left<span class="token punctuation">.</span>rightOuterJoin<span class="token punctuation">(</span>right<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 全连接     * Array[(String, (Option[String], Option[Int]))] = Array((xingxing,(Some(hangzhou),None)), (xiaoming,(Some(beijing),Some(18))), (xiaohong,(Some(shanghai),Some(20))), (pk,(None,Some(88))))     */</span>    left<span class="token punctuation">.</span>fullOuterJoin<span class="token punctuation">(</span>right<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark-core 03</title>
      <link href="2019/04/26/spark-core03/"/>
      <url>2019/04/26/spark-core03/</url>
      
        <content type="html"><![CDATA[<p>RDD两大类型:</p><p>transformation:转换    map/filter…    lazy</p><p>​        lazy:不会真正执行,不会触发作业</p><p>action:执行后返回一个结果在dirver program</p><p>Transformations:</p><table><thead><tr><th><strong>map</strong>(<em>func</em>)</th><th>Return a new distributed dataset formed by passing each element of the source through a function <em>func</em>.</th></tr></thead><tbody><tr><td><strong>filter</strong>(<em>func</em>)</td><td>Return a new dataset formed by selecting those elements of the source on which <em>func</em>returns true.</td></tr><tr><td><strong>flatMap</strong>(<em>func</em>)</td><td>Similar to map, but each input item can be mapped to 0 or more output items (so <em>func</em>should return a Seq rather than a single item).</td></tr><tr><td><strong>mapPartitions</strong>(<em>func</em>)</td><td>Similar to map, but runs separately on each partition (block) of the RDD, so <em>func</em> must be of type Iterator<T> =&gt; Iterator<U> when running on an RDD of type T.</td></tr><tr><td><strong>mapPartitionsWithIndex</strong>(<em>func</em>)</td><td>Similar to mapPartitions, but also provides <em>func</em> with an integer value representing the index of the partition, so <em>func</em> must be of type (Int, Iterator<T>) =&gt; Iterator<U> when running on an RDD of type T.</td></tr><tr><td><strong>sample</strong>(<em>withReplacement</em>, <em>fraction</em>, <em>seed</em>)</td><td>Sample a fraction <em>fraction</em> of the data, with or without replacement, using a given random number generator seed.</td></tr><tr><td><strong>union</strong>(<em>otherDataset</em>)</td><td>Return a new dataset that contains the union of the elements in the source dataset and the argument.</td></tr><tr><td><strong>intersection</strong>(<em>otherDataset</em>)</td><td>Return a new RDD that contains the intersection of elements in the source dataset and the argument.</td></tr><tr><td><strong>distinct</strong>([<em>numPartitions</em>]))</td><td>Return a new dataset that contains the distinct elements of the source dataset.</td></tr><tr><td><strong>groupByKey</strong>([<em>numPartitions</em>])</td><td>When called on a dataset of (K, V) pairs, returns a dataset of (K, Iterable<V>) pairs.  <strong>Note:</strong> If you are grouping in order to perform an aggregation (such as a sum or average) over each key, using <code>reduceByKey</code> or <code>aggregateByKey</code> will yield much better performance.  <strong>Note:</strong> By default, the level of parallelism in the output depends on the number of partitions of the parent RDD. You can pass an optional <code>numPartitions</code> argument to set a different number of tasks.</td></tr><tr><td><strong>reduceByKey</strong>(<em>func</em>, [<em>numPartitions</em>])</td><td>When called on a dataset of (K, V) pairs, returns a dataset of (K, V) pairs where the values for each key are aggregated using the given reduce function <em>func</em>, which must be of type (V,V) =&gt; V. Like in <code>groupByKey</code>, the number of reduce tasks is configurable through an optional second argument.</td></tr><tr><td><strong>aggregateByKey</strong>(<em>zeroValue</em>)(<em>seqOp</em>, <em>combOp</em>, [<em>numPartitions</em>])</td><td>When called on a dataset of (K, V) pairs, returns a dataset of (K, U) pairs where the values for each key are aggregated using the given combine functions and a neutral “zero” value. Allows an aggregated value type that is different than the input value type, while avoiding unnecessary allocations. Like in <code>groupByKey</code>, the number of reduce tasks is configurable through an optional second argument.</td></tr><tr><td><strong>sortByKey</strong>([<em>ascending</em>], [<em>numPartitions</em>])</td><td>When called on a dataset of (K, V) pairs where K implements Ordered, returns a dataset of (K, V) pairs sorted by keys in ascending or descending order, as specified in the boolean <code>ascending</code> argument.</td></tr><tr><td><strong>join</strong>(<em>otherDataset</em>, [<em>numPartitions</em>])</td><td>When called on datasets of type (K, V) and (K, W), returns a dataset of (K, (V, W)) pairs with all pairs of elements for each key. Outer joins are supported through <code>leftOuterJoin</code>, <code>rightOuterJoin</code>, and <code>fullOuterJoin</code>.</td></tr><tr><td><strong>cogroup</strong>(<em>otherDataset</em>, [<em>numPartitions</em>])</td><td>When called on datasets of type (K, V) and (K, W), returns a dataset of (K, (Iterable<V>, Iterable<W>)) tuples. This operation is also called <code>groupWith</code>.</td></tr><tr><td><strong>cartesian</strong>(<em>otherDataset</em>)</td><td>When called on datasets of types T and U, returns a dataset of (T, U) pairs (all pairs of elements).</td></tr><tr><td><strong>pipe</strong>(<em>command</em>, <em>[envVars]</em>)</td><td>Pipe each partition of the RDD through a shell command, e.g. a Perl or bash script. RDD elements are written to the process’s stdin and lines output to its stdout are returned as an RDD of strings.</td></tr><tr><td><strong>coalesce</strong>(<em>numPartitions</em>)</td><td>Decrease the number of partitions in the RDD to numPartitions. Useful for running operations more efficiently after filtering down a large dataset.</td></tr><tr><td><strong>repartition</strong>(<em>numPartitions</em>)</td><td>Reshuffle the data in the RDD randomly to create either more or fewer partitions and balance it across them. This always shuffles all data over the network.</td></tr><tr><td><strong>repartitionAndSortWithinPartitions</strong>(<em>partitioner</em>)</td><td>Repartition the RDD according to the given partitioner and, within each resulting partition, sort records by their keys. This is more efficient than calling <code>repartition</code> and then sorting within each partition because it can push the sorting down into the shuffle machinery.</td></tr></tbody></table><p>RDDAPI</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>day02<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>LongWritable<span class="token punctuation">,</span> Text<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span>TextInputFormat<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkContext<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token comment" spellcheck="true">/** * master和appname是写死的,硬编码 * 这两个参数应该是在spark-submit时来制定 */</span><span class="token keyword">object</span> SparkWCApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>setProperty<span class="token punctuation">(</span><span class="token string">"HADOOP_USER_NAME"</span><span class="token punctuation">,</span><span class="token string">"hadoop"</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"SparkWCApp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      val rdd: RDD[Int] = sc.parallelize(List(1, 2, 3, 4, 5, 6))</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//      // 创建RDD</span><span class="token comment" spellcheck="true">//      sc.makeRDD(List(1,2,3,4,5,6))</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//      rdd.foreach(print)</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//      Thread.sleep(Int.MaxValue)</span><span class="token comment" spellcheck="true">//      val rdd = sc.textFile("data/wc.data")</span><span class="token comment" spellcheck="true">//      // 读取HDFS文件,并创建RDD</span><span class="token comment" spellcheck="true">//      sc.hadoopConfiguration.set("dfs.client.use.datanode.hostname","true")</span><span class="token comment" spellcheck="true">//      sc.hadoopConfiguration.set("dfs.replication","1")</span><span class="token comment" spellcheck="true">//      sc.hadoopConfiguration.set("fs.defaultFS","hdfs://warehouse001:9000")</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//      val rdd = sc.textFile("hdfs://warehouse001:9000//input/wc.txt")</span>      <span class="token comment" spellcheck="true">/**       * map是不改变分区数的       * 1. 闭包       * 2. MapPartitionsRDD       */</span><span class="token comment" spellcheck="true">//      sc.makeRDD(List(1,2,3,4)).map(_*2).collect()</span>        <span class="token comment" spellcheck="true">//作用在RDD的每个分区</span>      <span class="token comment" spellcheck="true">/**      -----这是一个分区----      -----这是一个分区----      20      10      -----这是一个分区----      30      40      */</span><span class="token comment" spellcheck="true">//      sc.makeRDD(List(1,2,3,4),3)</span><span class="token comment" spellcheck="true">//        .mapPartitions(partitions => &amp;#123;</span><span class="token comment" spellcheck="true">//        println("-----这是一个分区----")</span><span class="token comment" spellcheck="true">//        partitions.map(_*10)</span><span class="token comment" spellcheck="true">//      &amp;#125;).foreach(println)</span>      <span class="token comment" spellcheck="true">/**       * mapPartitionsWithIndex 可以获取RDD的分区       */</span>      <span class="token comment" spellcheck="true">//      sc.makeRDD(List(1,2,3,4,5,6,7,8,9),3)</span><span class="token comment" spellcheck="true">//        .mapPartitionsWithIndex((index,partition) => &amp;#123;</span><span class="token comment" spellcheck="true">//          println("-----这是一个分区-----")</span><span class="token comment" spellcheck="true">//          partition.map(x => &amp;#123;</span><span class="token comment" spellcheck="true">//            s"分区: $index,元素: $x"</span><span class="token comment" spellcheck="true">//          &amp;#125;)</span><span class="token comment" spellcheck="true">//        &amp;#125;).foreach(println)</span><span class="token comment" spellcheck="true">//      sc.parallelize(List("Hive,Hive,Hive", "scala,scala", "hadoop"),2)</span><span class="token comment" spellcheck="true">//        .flatMap(_.split(",")).foreach(println)</span><span class="token comment" spellcheck="true">//      val value = sc.parallelize(List(List(1, 2), List(3, 4), List(5, 6)))</span><span class="token comment" spellcheck="true">//      value.map(_.map(_ * 2)).foreach(println)    //  Array[List[Int]] = Array(List(2, 4), List(6, 8), List(10, 12))</span><span class="token comment" spellcheck="true">//      value.flatMap(_.map(_*2))   //  Array[Int] = Array(2, 4, 6, 8, 10, 12)</span>      <span class="token comment" spellcheck="true">/**       * 可以一进多出       */</span><span class="token comment" spellcheck="true">//      val rdd = sc.parallelize(List(1, 2, 3, 4))</span><span class="token comment" spellcheck="true">//      //  自己  平方  三次方</span><span class="token comment" spellcheck="true">//      rdd.flatMap(x => List(x,x*x,x*x*x))   //  Array[Int] = Array(1, 1, 1, 2, 4, 8, 3, 9, 27, 4, 16, 64)</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//      </span><span class="token comment" spellcheck="true">/**//       * 可以多次过滤//       */</span><span class="token comment" spellcheck="true">//      rdd.filter(_ % 2 == 0)</span><span class="token comment" spellcheck="true">//      rdd.filter(_ % 2 == 0).filter(_>2)    //也可以用 &amp;&amp; 过滤多个条件</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//      sc.parallelize(1 to 10, 3).glom()</span><span class="token comment" spellcheck="true">//      //  取样</span><span class="token comment" spellcheck="true">//      sc.parallelize(1 to 34).sample(false,0.2)</span>      <span class="token keyword">val</span> a <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token string">"hive"</span><span class="token punctuation">,</span><span class="token string">"scala"</span><span class="token punctuation">,</span><span class="token string">"hadoop"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> b <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// a b 的元素个数必须相等  zipWithIndex  加上编号</span>      a<span class="token punctuation">.</span>zip<span class="token punctuation">(</span>b<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//      rdd.foreach(println)</span>        <span class="token comment" spellcheck="true">// hadoopFile代码测试</span><span class="token comment" spellcheck="true">//      sc.hadoopFile("data/wc.data", classOf[TextInputFormat], classOf[LongWritable], classOf[Text],</span><span class="token comment" spellcheck="true">//        1).map(x => &amp;#123;</span>      <span class="token comment" spellcheck="true">//  _1是偏移量,_2是文本值</span><span class="token comment" spellcheck="true">//        val tmp = x._2.toString</span><span class="token comment" spellcheck="true">//        println(tmp)</span><span class="token comment" spellcheck="true">//      &amp;#125;).collect()</span>      sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark-core 02</title>
      <link href="2019/04/25/spark-core02/"/>
      <url>2019/04/25/spark-core02/</url>
      
        <content type="html"><![CDATA[<h5 id="RDD"><a href="#RDD" class="headerlink" title="RDD"></a>RDD</h5><p>1.A list of partitions</p><p>每个RDD都可以分为N个分区,分区可以并行执行</p><p>对应源码:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">protected</span> <span class="token keyword">def</span> getPartitions<span class="token operator">:</span> Array<span class="token punctuation">[</span>Partition<span class="token punctuation">]</span></code></pre><p>2.A function for computing each split</p><p>对RDD的每个分区/分片都作用上方法</p><p>对应源码:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">def</span> compute<span class="token punctuation">(</span>split<span class="token operator">:</span> Partition<span class="token punctuation">,</span> context<span class="token operator">:</span> TaskContext<span class="token punctuation">)</span><span class="token operator">:</span> Iterator<span class="token punctuation">[</span>T<span class="token punctuation">]</span></code></pre><p>3.A list of dependencies on other RDDs</p><p>RDD和其他RDD有一系列的依赖.</p><p>如:RDDA ==&gt; RDDB ==&gt; RDDC</p><p>RDDC依赖于RDDB,RDDB依赖于RDDA,RDDA是原始数据</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">protected</span> <span class="token keyword">def</span> getDependencies<span class="token operator">:</span> Seq<span class="token punctuation">[</span>Dependency<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> deps</code></pre><p>4.Optionally, a Partitioner for key-value RDDs (e.g. to say that the RDD is hash-partitioned)</p><p>KV类型的可以选用分区器</p><pre class=" language-scala"><code class="language-scala"><span class="token annotation punctuation">@transient</span> <span class="token keyword">val</span> partitioner<span class="token operator">:</span> Option<span class="token punctuation">[</span>Partitioner<span class="token punctuation">]</span> <span class="token operator">=</span> None</code></pre><p>5.Optionally, a list of preferred locations to compute each split on (e.g. block locations for an HDFS file)</p><p>对于执行的每一个分片都有一个最优路径的集合.</p><p>RDD是一个弹性的、不可变的、可分区的</p><p>对应源码:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">protected</span> <span class="token keyword">def</span> getPreferredLocations<span class="token punctuation">(</span>split<span class="token operator">:</span> Partition<span class="token punctuation">)</span><span class="token operator">:</span> Seq<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> Nil</code></pre><p>RDD的创建:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>day02<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>LongWritable<span class="token punctuation">,</span> Text<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span>TextInputFormat<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkContext<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token comment" spellcheck="true">/** * master和appname是写死的,硬编码 * 这两个参数应该是在spark-submit时来制定 */</span><span class="token keyword">object</span> SparkWCApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>setProperty<span class="token punctuation">(</span><span class="token string">"HADOOP_USER_NAME"</span><span class="token punctuation">,</span><span class="token string">"hadoop"</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"SparkWCApp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      val rdd: RDD[Int] = sc.parallelize(List(1, 2, 3, 4, 5, 6))</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//      // 创建RDD</span><span class="token comment" spellcheck="true">//      sc.makeRDD(List(1,2,3,4,5,6))</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//      rdd.foreach(print)</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//      Thread.sleep(Int.MaxValue)</span><span class="token comment" spellcheck="true">//      val rdd = sc.textFile("data/wc.data")</span>      <span class="token comment" spellcheck="true">// 读取HDFS文件,并创建RDD</span>      sc<span class="token punctuation">.</span>hadoopConfiguration<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"dfs.client.use.datanode.hostname"</span><span class="token punctuation">,</span><span class="token string">"true"</span><span class="token punctuation">)</span>      sc<span class="token punctuation">.</span>hadoopConfiguration<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"dfs.replication"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>      sc<span class="token punctuation">.</span>hadoopConfiguration<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"fs.defaultFS"</span><span class="token punctuation">,</span><span class="token string">"hdfs://warehouse001:9000"</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"hdfs://warehouse001:9000//input/wc.txt"</span><span class="token punctuation">)</span>      rdd<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// hadoopFile代码测试</span><span class="token comment" spellcheck="true">//      sc.hadoopFile("data/wc.data", classOf[TextInputFormat], classOf[LongWritable], classOf[Text],</span><span class="token comment" spellcheck="true">//        1).map(x => &amp;#123;</span>      <span class="token comment" spellcheck="true">//  _1是偏移量,_2是文本值</span><span class="token comment" spellcheck="true">//        val tmp = x._2.toString</span><span class="token comment" spellcheck="true">//        println(tmp)</span><span class="token comment" spellcheck="true">//      &amp;#125;).collect()</span>      sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper01</title>
      <link href="2019/04/20/zookeeper01/"/>
      <url>2019/04/20/zookeeper01/</url>
      
        <content type="html"><![CDATA[<h3 id="1-解压"><a href="#1-解压" class="headerlink" title="1.解压"></a>1.解压</h3><h3 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2.修改配置"></a>2.修改配置</h3><p>cd conf</p><p>cp zoo_sample.cfg zoo.cfg </p><p>vi zoo.cfg</p><p>修改:dataDir=$ZOOKEEPER_HOME/tmp/zookeeper</p><p>环境变量加上zookeeper</p><h3 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h3><p>启动zk进程:</p><p> ./zkServer.sh start</p><p>停止zk进程:</p><p>./zkServer.sh stop</p><p>进入客户端:</p><p>./zkCli.sh</p><p>节点在ZK中叫做znode,分为临时节点和永久节点.</p><p>临时节点:</p><p>1.当前session有效,关闭会被删除</p><p>2.临时节点下不能有子节点</p><p>3.临时有序</p><p>永久节点:</p><p>1.不会被自动删除</p><p>2.可以有子节点</p><p>3.有序</p><p>znode特点:</p><p>1.每一个znode都有一个身份id、版本号、修改/删除如果版本号不匹配,会报错.</p><p>2.ZK的数据一定是比较小的</p><p>3.设置权限ACL</p><p>4.为znode添加监听器 </p><p>查看节点:</p><pre><code>[zk: localhost:2181(CONNECTED) 4] ls /[zookeeper]</code></pre><p>znode下面可以有子节点,也可以有数据</p><p>查看zk状态:</p><pre><code>[zk: localhost:2181(CONNECTED) 8] stat /zookeeper/quotacZxid = 0x0ctime = Thu Jan 01 08:00:00 CST 1970mZxid = 0x0mtime = Thu Jan 01 08:00:00 CST 1970pZxid = 0x0cversion = 0dataVersion = 0aclVersion = 0ephemeralOwner = 0x0dataLength = 0numChildren = 0</code></pre><p>创建节点:</p><pre><code>[zk: localhost:2181(CONNECTED) 9] create /helloworld helloworldCreated /helloworld</code></pre><p>查看节点内容:</p><pre><code>[zk: localhost:2181(CONNECTED) 10] get /helloworldhelloworld</code></pre><p>查看状态:</p><pre><code>[zk: localhost:2181(CONNECTED) 11] stat /helloworldcZxid = 0x2ctime = Sun Mar 14 23:58:04 CST 2021mZxid = 0x2mtime = Sun Mar 14 23:58:04 CST 2021pZxid = 0x2cversion = 0dataVersion = 0        //数据版本aclVersion = 0ephemeralOwner = 0x0    //永久节点dataLength = 10        //数据长度numChildren = 0        //子节点数</code></pre><p>创建临时节点:</p><pre class=" language-Linux"><code class="language-Linux">[zk: localhost:2181(CONNECTED) 12] create -e /helloworld/tmpCreated /helloworld/tmp[zk: localhost:2181(CONNECTED) 13] stat /helloworld/tmpcZxid = 0x3ctime = Mon Mar 15 00:01:24 CST 2021mZxid = 0x3mtime = Mon Mar 15 00:01:24 CST 2021pZxid = 0x3cversion = 0dataVersion = 0aclVersion = 0ephemeralOwner = 0x10260e54a480000        //临时节点dataLength = 0numChildren = 0</code></pre><p>创建有序节点:</p><pre><code>[zk: localhost:2181(CONNECTED) 14] create -s /helloworld/seqCreated /helloworld/seq0000000001[zk: localhost:2181(CONNECTED) 15] create -s /helloworld/seqCreated /helloworld/seq0000000002[zk: localhost:2181(CONNECTED) 16] create -s /helloworld/seqCreated /helloworld/seq0000000003[zk: localhost:2181(CONNECTED) 17] create -s /helloworld/seqCreated /helloworld/seq0000000004[zk: localhost:2181(CONNECTED) 18] create -s /helloworld/seqCreated /helloworld/seq0000000005[zk: localhost:2181(CONNECTED) 19] create -s /helloworld/seqCreated /helloworld/seq0000000006</code></pre><p>zk不支持直接创建多层节点.</p><p>修改节点数据:</p><pre><code>[zk: localhost:2181(CONNECTED) 20] set /helloworld newdata[zk: localhost:2181(CONNECTED) 21] get /helloworldnewdata[zk: localhost:2181(CONNECTED) 24] stat /helloworldcZxid = 0x2ctime = Sun Mar 14 23:58:04 CST 2021mZxid = 0xamtime = Mon Mar 15 00:05:44 CST 2021pZxid = 0x9cversion = 7dataVersion = 1        //版本修改了aclVersion = 0ephemeralOwner = 0x0dataLength = 7numChildren = 7</code></pre><p>修改并设置版本:</p><pre><code>[zk: localhost:2181(CONNECTED) 1] set -v 2 /helloworld new_dataversion No is not valid : /helloworld[zk: localhost:2181(CONNECTED) 2] set -v 5 /helloworld new_dataversion No is not valid : /helloworld</code></pre><p>不能超过或回退版本.</p><p>删除节点:</p><pre><code>[zk: localhost:2181(CONNECTED) 3] deleteall /helloworld</code></pre><p>监听节点:</p><pre><code>[zk: localhost:2181(CONNECTED) 5] stat -w /helloworldNode does not exist: /helloworld[zk: localhost:2181(CONNECTED) 6] create /helloworld 123WATCHER::WatchedEvent state:SyncConnected type:NodeCreated path:/helloworldCreated /helloworld[zk: localhost:2181(CONNECTED) 7] set /helloworld 456[zk: localhost:2181(CONNECTED) 8] get -w /helloworld456[zk: localhost:2181(CONNECTED) 9] delete /helloworldWATCHER::WatchedEvent state:SyncConnected type:NodeDeleted path:/helloworld</code></pre><p>由此可见,删除也可以监听,但监听只能使用一次.</p><p>四字命令:</p><p><a href="https://zookeeper.apache.org/doc/r3.4.14/zookeeperAdmin.html#sc_zkCommands">https://zookeeper.apache.org/doc/r3.4.14/zookeeperAdmin.html#sc_zkCommands</a></p><p>需在zoo.cfg加上:</p><pre><code>4lw.commands.whitelist=*</code></pre><p>再重启ZK进程就可以使用了.</p><h3 id="4-原生API"><a href="#4-原生API" class="headerlink" title="4.原生API"></a>4.原生API</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>zk<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>CreateMode<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>ZooDefs<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>ZooKeeper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Stat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZKUtils</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ZooKeeper zk <span class="token operator">=</span> null<span class="token punctuation">;</span>    String connect <span class="token operator">=</span><span class="token string">"warehouse001:2181"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>    String path <span class="token operator">=</span> <span class="token string">"/testpath"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ZooKeeper <span class="token function">getZK</span><span class="token punctuation">(</span>String connect<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span>connect<span class="token punctuation">,</span>timeout<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">createNode</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> String value<span class="token punctuation">,</span> ZooKeeper zk<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> zk<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span> CreateMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getData</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> ZooKeeper zk<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>zk<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">updataData</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> String value<span class="token punctuation">,</span> ZooKeeper zk<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        zk<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">exists</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> ZooKeeper zk<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Stat exists <span class="token operator">=</span> zk<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> exists <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List <span class="token function">getChildren</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> ZooKeeper zk<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> zk<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> ZooKeeper zk<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        zk<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>test类</p><pre><code>package com.example.hadoop.hdfs.zk;import org.apache.zookeeper.WatchedEvent;import org.apache.zookeeper.Watcher;import org.apache.zookeeper.ZooKeeper;import org.junit.After;import org.junit.Before;import org.junit.Test;import java.util.List;public class TestZKUtils &#123;    ZooKeeper zk = null;    String connect =&quot;warehouse001:2181&quot;;    int timeout = 5000;    String path = &quot;/testpath&quot;;    @Before    public void  setUp() throws Exception &#123;        zk = new ZooKeeper(connect, timeout, new Watcher() &#123;            @Override            public void process(WatchedEvent watchedEvent) &#123;            &#125;        &#125;);    &#125;    @Test    public void testInit() throws  Exception &#123;        //创建//        ZKUtils.createNode(path,&quot;warehouse001&quot;, zk);        //查看数据//        String data = ZKUtils.getData(path, zk);//        System.out.println(data);        //修改数据//        ZKUtils.updataData(path,&quot;newdata&quot;, zk );        //判断是否存在//        System.out.println(ZKUtils.exists(&quot;/dsdsd&quot;, zk));//        //创建子节点//        for (int i=0; i&lt;10; i++) &#123;//            String p = path + &quot;/test&quot; +i;//            String v = &quot;test&quot; + i;//            ZKUtils.createNode(p,v,zk);//        &#125;//        //获取子节点//        List&lt;String&gt; children = ZKUtils.getChildren(path, zk);//        for (String child : children) &#123;//            System.out.println(child);//        &#125;        //删除节点  不支持递归        ZKUtils.delete(&quot;/testpath/test0&quot;, zk);    &#125;    @After    public void tearDown() throws Exception &#123;        if(null != zk)&#123;            zk.close();        &#125;    &#125;&#125;</code></pre><h3 id="5-curator-API"><a href="#5-curator-API" class="headerlink" title="5.curator API"></a>5.curator API</h3><p>添加依赖:</p><pre class=" language-xml"><code class="language-xml">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-recipes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>curator.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-framework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>curator.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>zk<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>CuratorFramework<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>CuratorFrameworkFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>api<span class="token punctuation">.</span>CuratorWatcher<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>recipes<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>NodeCache<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>recipes<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>NodeCacheListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>retry<span class="token punctuation">.</span>ExponentialBackoffRetry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>retry<span class="token punctuation">.</span>RetryNTimes<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>CreateMode<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>WatchedEvent<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>Watcher<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>ZooDefs<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Stat<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>After<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>prefs<span class="token punctuation">.</span>NodeChangeEvent<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">testCuratorZKUtils</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    CuratorFramework client <span class="token operator">=</span> null<span class="token punctuation">;</span>    String connect <span class="token operator">=</span><span class="token string">"warehouse001:2181"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>    String path <span class="token operator">=</span> <span class="token string">"/testpath"</span><span class="token punctuation">;</span>    String nameSpace <span class="token operator">=</span> <span class="token string">"testpath-ws"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        client <span class="token operator">=</span> CuratorFrameworkFactory<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connectString</span><span class="token punctuation">(</span>connect<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionTimeoutMs</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">retryPolicy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RetryNTimes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//                .retryPolicy(new ExponentialBackoffRetry(1000,5))</span>                <span class="token punctuation">.</span><span class="token function">namespace</span><span class="token punctuation">(</span>nameSpace<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建节点</span><span class="token comment" spellcheck="true">//        client.create()</span><span class="token comment" spellcheck="true">//                .creatingParentContainersIfNeeded()</span><span class="token comment" spellcheck="true">//                .withMode(CreateMode.PERSISTENT)</span><span class="token comment" spellcheck="true">//                .withACL(ZooDefs.Ids.OPEN_ACL_UNSAFE)</span><span class="token comment" spellcheck="true">//                .forPath(path,"test_01".getBytes());</span>                <span class="token comment" spellcheck="true">//创建多级目录</span><span class="token comment" spellcheck="true">//                .forPath("/a/b/c","newdata".getBytes());</span><span class="token comment" spellcheck="true">//        // 修改数据</span><span class="token comment" spellcheck="true">//        client.setData()</span><span class="token comment" spellcheck="true">////                .withVersion(1)</span><span class="token comment" spellcheck="true">//                .forPath(path, "newdata_1".getBytes());</span>        <span class="token comment" spellcheck="true">//查看数据</span><span class="token comment" spellcheck="true">//        Stat stat = new Stat();</span><span class="token comment" spellcheck="true">//        byte[] content = client.getData().storingStatIn(stat).forPath(path);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        System.out.println(path + ": 内容是" + new String(content) + "版本是" + stat.getVersion());</span>        <span class="token comment" spellcheck="true">//是否存在</span><span class="token comment" spellcheck="true">//        Stat stat = client.checkExists().forPath(path);</span>        <span class="token comment" spellcheck="true">//查看子节点</span><span class="token comment" spellcheck="true">//        List&lt;String> children = client.getChildren().forPath("/");</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        for (String child : children) &amp;#123;</span><span class="token comment" spellcheck="true">//            System.out.println(child);</span><span class="token comment" spellcheck="true">//        &amp;#125;</span>        <span class="token comment" spellcheck="true">//删除数据</span><span class="token comment" spellcheck="true">//        client.delete()</span><span class="token comment" spellcheck="true">//                //多级删除</span><span class="token comment" spellcheck="true">//                .deletingChildrenIfNeeded()</span><span class="token comment" spellcheck="true">//                .forPath("/testpath");</span>        <span class="token comment" spellcheck="true">///监听   但是只能一次</span><span class="token comment" spellcheck="true">//        client.getData().usingWatcher(new Watcher() &amp;#123;</span>        <span class="token comment" spellcheck="true">//同样也是只能监听一次</span><span class="token comment" spellcheck="true">//            client.getData().usingWatcher(new CuratorWatcher() &amp;#123;</span><span class="token comment" spellcheck="true">//                @Override</span><span class="token comment" spellcheck="true">//                public void process(WatchedEvent watchedEvent) throws Exception &amp;#123;</span><span class="token comment" spellcheck="true">//                System.out.println("监听到:" + watchedEvent.getPath());</span><span class="token comment" spellcheck="true">//            &amp;#125;</span><span class="token comment" spellcheck="true">//        &amp;#125;).forPath(path);</span>        <span class="token comment" spellcheck="true">// 多次监听</span>        <span class="token keyword">final</span> NodeCache nodeCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeCache</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        nodeCache<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeCache<span class="token punctuation">.</span><span class="token function">getCurrentData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"....."</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nodeCache<span class="token punctuation">.</span><span class="token function">getCurrentData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        nodeCache<span class="token punctuation">.</span><span class="token function">getListenable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NodeCacheListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nodeChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                String data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nodeCache<span class="token punctuation">.</span><span class="token function">getCurrentData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">11111111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> client<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive增强02</title>
      <link href="2019/04/18/hive-zeng-qiang-02/"/>
      <url>2019/04/18/hive-zeng-qiang-02/</url>
      
        <content type="html"><![CDATA[<h3 id="1-求每个域名截止到每个月的访问数-最大单月访问数-累计到该月的访问量"><a href="#1-求每个域名截止到每个月的访问数-最大单月访问数-累计到该月的访问量" class="headerlink" title="1.求每个域名截止到每个月的访问数,最大单月访问数,累计到该月的访问量."></a>1.求每个域名截止到每个月的访问数,最大单月访问数,累计到该月的访问量.</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> access_tmp1 <span class="token keyword">as</span><span class="token keyword">select</span> domain<span class="token punctuation">,</span>date_format<span class="token punctuation">(</span>visit_time<span class="token punctuation">,</span><span class="token string">'yyyy-MM'</span><span class="token punctuation">)</span> month<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> pv<span class="token keyword">from</span> user_click<span class="token keyword">group</span> <span class="token keyword">by</span> domain<span class="token punctuation">,</span>date_format<span class="token punctuation">(</span>visit_time<span class="token punctuation">,</span><span class="token string">'yyyy-MM'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="1-1-第一种自连接"><a href="#1-1-第一种自连接" class="headerlink" title="1.1 第一种自连接:"></a>1.1 第一种自连接:</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> access_tmp2 <span class="token keyword">as</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>domain a_domain<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>month a_month<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>pv a_pv<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>domain b_domain<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>month b_month<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>pv b_pv<span class="token keyword">from</span> access_tmp1 <span class="token number">a</span> <span class="token keyword">join</span> access_tmp1 <span class="token number">b</span><span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>domain<span class="token punctuation">;</span></code></pre><p>result:</p><pre><code>+-----------------------+----------------------+-------------------+-----------------------+----------------------+-------------------+--+| access_tmp2.a_domain  | access_tmp2.a_month  | access_tmp2.a_pv  | access_tmp2.b_domain  | access_tmp2.b_month  | access_tmp2.b_pv  |+-----------------------+----------------------+-------------------+-----------------------+----------------------+-------------------+--+| www.baidu.com       | 2019-01              | 30                | www.baidu.com       | 2019-01              | 30                || www.baidu.com       | 2019-02              | 15                | www.baidu.com       | 2019-01              | 30                || www.baidu.com       | 2019-03              | 44                | www.baidu.com       | 2019-01              | 30                || www.baidu.com       | 2019-01              | 30                | www.baidu.com       | 2019-02              | 15                || www.baidu.com       | 2019-02              | 15                | www.baidu.com       | 2019-02              | 15                || www.baidu.com       | 2019-03              | 44                | www.baidu.com       | 2019-02              | 15                || www.baidu.com       | 2019-01              | 30                | www.baidu.com       | 2019-03              | 44                || www.baidu.com       | 2019-02              | 15                | www.baidu.com       | 2019-03              | 44                || www.baidu.com       | 2019-03              | 44                | www.baidu.com       | 2019-03              | 44                || google.com         | 2019-01              | 33                | google.com         | 2019-01              | 33                || google.com         | 2019-02              | 10                | google.com         | 2019-01              | 33                || google.com         | 2019-03              | 38                | google.com         | 2019-01              | 33                || google.com         | 2019-01              | 33                | google.com         | 2019-02              | 10                || google.com         | 2019-02              | 10                | google.com         | 2019-02              | 10                || google.com         | 2019-03              | 38                | google.com         | 2019-02              | 10                || google.com         | 2019-01              | 33                | google.com         | 2019-03              | 38                || google.com         | 2019-02              | 10                | google.com         | 2019-03              | 38                || google.com         | 2019-03              | 38                | google.com         | 2019-03              | 38                |+-----------------------+----------------------+-------------------+-----------------------+----------------------+-------------------+--+</code></pre><p>访问到该月就是从头到当前月的,即a.month &lt;= b.month</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> t<span class="token punctuation">.</span>b_domain<span class="token punctuation">,</span>t<span class="token punctuation">.</span>b_month<span class="token punctuation">,</span>t<span class="token punctuation">.</span>b_pv<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>a_pv<span class="token punctuation">)</span> max_pv<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>a_pv<span class="token punctuation">)</span> sum_pv<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> access_tmp2 <span class="token keyword">where</span> a_month <span class="token operator">&lt;=</span> b_month<span class="token punctuation">)</span> t<span class="token keyword">group</span> <span class="token keyword">by</span> t<span class="token punctuation">.</span>b_domain<span class="token punctuation">,</span>t<span class="token punctuation">.</span>b_month<span class="token punctuation">,</span>t<span class="token punctuation">.</span>b_pv<span class="token punctuation">;</span></code></pre><p>result:</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+------------+---------+---------+---------+--+</span><span class="token operator">|</span>    t<span class="token punctuation">.</span>b_domain    <span class="token operator">|</span> t<span class="token punctuation">.</span>b_month  <span class="token operator">|</span> t<span class="token punctuation">.</span>b_pv  <span class="token operator">|</span> max_pv  <span class="token operator">|</span> sum_pv  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+------------+---------+---------+---------+--+</span><span class="token operator">|</span> www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com  <span class="token operator">|</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">01</span>    <span class="token operator">|</span> <span class="token number">30</span>      <span class="token operator">|</span> <span class="token number">30</span>      <span class="token operator">|</span> <span class="token number">30</span>      <span class="token operator">|</span><span class="token operator">|</span> www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com  <span class="token operator">|</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">02</span>    <span class="token operator">|</span> <span class="token number">15</span>      <span class="token operator">|</span> <span class="token number">30</span>      <span class="token operator">|</span> <span class="token number">45</span>      <span class="token operator">|</span><span class="token operator">|</span> www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com  <span class="token operator">|</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">03</span>    <span class="token operator">|</span> <span class="token number">44</span>      <span class="token operator">|</span> <span class="token number">44</span>      <span class="token operator">|</span> <span class="token number">89</span>      <span class="token operator">|</span><span class="token operator">|</span> google<span class="token punctuation">.</span>com    <span class="token operator">|</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">01</span>    <span class="token operator">|</span> <span class="token number">33</span>      <span class="token operator">|</span> <span class="token number">33</span>      <span class="token operator">|</span> <span class="token number">33</span>      <span class="token operator">|</span><span class="token operator">|</span> google<span class="token punctuation">.</span>com    <span class="token operator">|</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">02</span>    <span class="token operator">|</span> <span class="token number">10</span>      <span class="token operator">|</span> <span class="token number">33</span>      <span class="token operator">|</span> <span class="token number">43</span>      <span class="token operator">|</span><span class="token operator">|</span> google<span class="token punctuation">.</span>com    <span class="token operator">|</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">03</span>    <span class="token operator">|</span> <span class="token number">38</span>      <span class="token operator">|</span> <span class="token number">38</span>      <span class="token operator">|</span> <span class="token number">81</span>      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+------------+---------+---------+---------+--+</span></code></pre><h4 id="1-2-第二种窗口函数"><a href="#1-2-第二种窗口函数" class="headerlink" title="1.2 第二种窗口函数:"></a>1.2 第二种窗口函数:</h4><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">select</span>  domain<span class="token punctuation">,</span> month<span class="token punctuation">,</span> pv<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> domain <span class="token keyword">order</span> <span class="token keyword">by</span> month<span class="token punctuation">)</span> max_pv<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> domain <span class="token keyword">order</span> <span class="token keyword">by</span> month<span class="token punctuation">)</span> sum_pv <span class="token keyword">from</span> access_tmp1<span class="token punctuation">;</span></code></pre><p>可选参数:</p><pre><code>(ROWS | RANGE) BETWEEN (UNBOUNDED | [num]) PRECEDING AND ([num] PRECEDING | CURRENT ROW | (UNBOUNDED | [num]) FOLLOWING)窗口范围:UNBOUNDED 最前面    CURRENT ROW 到当前行    FOLLOWING 往后取(ROWS | RANGE) BETWEEN CURRENT ROW AND (CURRENT ROW | (UNBOUNDED | [num]) FOLLOWING)(ROWS | RANGE) BETWEEN [num] FOLLOWING AND (UNBOUNDED | [num]) FOLLOWING</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token function">sum</span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> domain <span class="token keyword">order</span> <span class="token keyword">by</span> month <span class="token keyword">rows</span> <span class="token operator">BETWEEN</span> <span class="token keyword">UNBOUNDED</span> <span class="token keyword">PRECEDING</span> <span class="token operator">AND</span> <span class="token keyword">CURRENT</span> <span class="token keyword">ROW</span><span class="token punctuation">)</span> max_pv从最前开始取到当前行</code></pre><pre class=" language-SQL"><code class="language-SQL">sum(pv) over(partition by domain order by month rows BETWEEN 3 PRECEDING AND CURRENT ROW ) max_pv向前取一条</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token function">sum</span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> domain <span class="token keyword">order</span> <span class="token keyword">by</span> month <span class="token keyword">rows</span> <span class="token operator">BETWEEN</span> <span class="token number">3</span> <span class="token keyword">PRECEDING</span> <span class="token operator">AND</span> <span class="token number">1</span> <span class="token keyword">FOLLOWING</span> <span class="token punctuation">)</span> max_pv向前取三条向后取一条</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token function">sum</span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> domain <span class="token keyword">order</span> <span class="token keyword">by</span> month <span class="token keyword">rows</span> <span class="token operator">BETWEEN</span> <span class="token keyword">CURRENT</span> <span class="token keyword">ROW</span> <span class="token operator">AND</span>  <span class="token keyword">UNBOUNDED</span> <span class="token keyword">FOLLOWING</span><span class="token punctuation">)</span> max_pv<span class="token punctuation">;</span>当前行取到最后一行</code></pre><p><img src="https://i.loli.net/2021/03/14/wyc3xkQFdLPBZ6p.png"></p><h3 id="2-窗口函数"><a href="#2-窗口函数" class="headerlink" title="2.窗口函数:"></a>2.窗口函数:</h3><h4 id="2-1-NTILE-切片功能-把分区内的数据切分"><a href="#2-1-NTILE-切片功能-把分区内的数据切分" class="headerlink" title="2.1 NTILE():切片功能,把分区内的数据切分"></a>2.1 NTILE():切片功能,把分区内的数据切分</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> domain<span class="token punctuation">,</span>month<span class="token punctuation">,</span>pv<span class="token punctuation">,</span>ntile<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> domain <span class="token keyword">order</span> <span class="token keyword">by</span> month<span class="token punctuation">)</span> an1<span class="token punctuation">,</span>ntile<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> domain <span class="token keyword">order</span> <span class="token keyword">by</span> month<span class="token punctuation">)</span> an2<span class="token keyword">from</span> access_tmp1<span class="token keyword">order</span> <span class="token keyword">by</span> domain<span class="token punctuation">;</span></code></pre><h4 id="2-1-ROW-NUMBER-给窗口函数加上编号-一般用于排名-排名不会重复"><a href="#2-1-ROW-NUMBER-给窗口函数加上编号-一般用于排名-排名不会重复" class="headerlink" title="2.1 ROW_NUMBER():给窗口函数加上编号,一般用于排名,排名不会重复"></a>2.1 ROW_NUMBER():给窗口函数加上编号,一般用于排名,排名不会重复</h4><pre class=" language-SQL"><code class="language-SQL">select domain,month,pv,ROW_NUMBER() over(partition by domain order by PV) an1from access_tmp1;</code></pre><h4 id="2-3-RANK-相同排名编号一样-下一个排名会加上相同排名的个数"><a href="#2-3-RANK-相同排名编号一样-下一个排名会加上相同排名的个数" class="headerlink" title="2.3 RANK():相同排名编号一样,下一个排名会加上相同排名的个数"></a>2.3 RANK():相同排名编号一样,下一个排名会加上相同排名的个数</h4><h4 id="2-4-DENSE-RANK-相同排名编号一样-下一个排名按顺序加1"><a href="#2-4-DENSE-RANK-相同排名编号一样-下一个排名按顺序加1" class="headerlink" title="2.4 DENSE_RANK():相同排名编号一样,下一个排名按顺序加1"></a>2.4 DENSE_RANK():相同排名编号一样,下一个排名按顺序加1</h4><pre class=" language-SQL"><code class="language-SQL">select domain,month,pv,ROW_NUMBER() over(partition by domain order by PV) an1,RANK() over(partition by domain order by PV) an2,DENSE_RANK() over(partition by domain order by PV) an3from access_tmp1;</code></pre><h4 id="2-5-CUME-DIST-小于等于当前行的行数-分组内的总行数-用来求占比"><a href="#2-5-CUME-DIST-小于等于当前行的行数-分组内的总行数-用来求占比" class="headerlink" title="2.5 CUME_DIST():小于等于当前行的行数 / 分组内的总行数    用来求占比"></a>2.5 CUME_DIST():小于等于当前行的行数 / 分组内的总行数    用来求占比</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> domain<span class="token punctuation">,</span>month<span class="token punctuation">,</span>pv<span class="token punctuation">,</span>CUME_DIST<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> pv<span class="token punctuation">)</span> rn1<span class="token punctuation">,</span>CUME_DIST<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> domain <span class="token keyword">order</span> <span class="token keyword">by</span> pv<span class="token punctuation">)</span> an2<span class="token keyword">from</span> access_tmp1<span class="token punctuation">;</span></code></pre><h4 id="2-6-PERCENT-RANK-分组内当前行的rank-1-分组内的总行数-1"><a href="#2-6-PERCENT-RANK-分组内当前行的rank-1-分组内的总行数-1" class="headerlink" title="2.6 PERCENT_RANK(): 分组内当前行的rank-1 / 分组内的总行数 -1"></a>2.6 PERCENT_RANK(): 分组内当前行的rank-1 / 分组内的总行数 -1</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> domain<span class="token punctuation">,</span>month<span class="token punctuation">,</span>pv<span class="token punctuation">,</span>PERCENT_RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> pv<span class="token punctuation">)</span> rn1<span class="token punctuation">,</span>PERCENT_RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> domain <span class="token keyword">order</span> <span class="token keyword">by</span> pv<span class="token punctuation">)</span> an2<span class="token keyword">from</span> access_tmp1<span class="token punctuation">;</span></code></pre><h4 id="2-7-lag-domain-1-0-取到上一条记录-取不到就默认为0"><a href="#2-7-lag-domain-1-0-取到上一条记录-取不到就默认为0" class="headerlink" title="2.7 lag(domain,1,0):取到上一条记录,取不到就默认为0"></a>2.7 lag(domain,1,0):取到上一条记录,取不到就默认为0</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> domain<span class="token punctuation">,</span>month<span class="token punctuation">,</span>pv<span class="token punctuation">,</span>lag<span class="token punctuation">(</span>domain<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>'<span class="token comment" spellcheck="true">-----') over(partition by domain order by pv) pre_domain,</span>lag<span class="token punctuation">(</span>domain<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>'<span class="token comment" spellcheck="true">-----') over(partition by domain order by pv) pre_domain2</span><span class="token keyword">from</span> access_tmp1<span class="token punctuation">;</span></code></pre><h4 id="2-8-lead-domain-1-0-取到先一条记录-取不到就默认为0"><a href="#2-8-lead-domain-1-0-取到先一条记录-取不到就默认为0" class="headerlink" title="2.8 lead(domain,1,0):取到先一条记录,取不到就默认为0"></a>2.8 lead(domain,1,0):取到先一条记录,取不到就默认为0</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> domain<span class="token punctuation">,</span>month<span class="token punctuation">,</span>pv<span class="token punctuation">,</span>lead<span class="token punctuation">(</span>domain<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>'<span class="token comment" spellcheck="true">-----') over(partition by domain order by pv) pre_domain,</span>lead<span class="token punctuation">(</span>domain<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>'<span class="token comment" spellcheck="true">-----') over(partition by domain order by pv) pre_domain2</span><span class="token keyword">from</span> access_tmp1<span class="token punctuation">;</span></code></pre><h4 id="2-9-first-value-取到当前分组的第一条"><a href="#2-9-first-value-取到当前分组的第一条" class="headerlink" title="2.9 first_value():取到当前分组的第一条"></a>2.9 first_value():取到当前分组的第一条</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> domain<span class="token punctuation">,</span>month<span class="token punctuation">,</span>pv<span class="token punctuation">,</span>first_value<span class="token punctuation">(</span>pv<span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> domain <span class="token keyword">order</span> <span class="token keyword">by</span> pv<span class="token punctuation">)</span> pre_domain<span class="token keyword">from</span> access_tmp1<span class="token punctuation">;</span></code></pre><h4 id="2-10-last-value-取到当前分组到现在为止的最后一条记录"><a href="#2-10-last-value-取到当前分组到现在为止的最后一条记录" class="headerlink" title="2.10 last_value():取到当前分组到现在为止的最后一条记录."></a>2.10 last_value():取到当前分组到现在为止的最后一条记录.</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> domain<span class="token punctuation">,</span>month<span class="token punctuation">,</span>pv<span class="token punctuation">,</span>last_value<span class="token punctuation">(</span>pv<span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> domain <span class="token keyword">order</span> <span class="token keyword">by</span> pv<span class="token punctuation">)</span> pre_domain<span class="token keyword">from</span> access_tmp1<span class="token punctuation">;</span></code></pre><h3 id="3-求连续登陆"><a href="#3-求连续登陆" class="headerlink" title="3.求连续登陆:"></a>3.求连续登陆:</h3><p>数据:</p><p>+————-+——————-+–+<br>| visit.name  | visit.visit_time  |<br>+————-+——————-+–+<br>| A           | 20190101          |<br>| A           | 20190102          |<br>| A           | 20190103          |<br>| A           | 20190104          |<br>| A           | 20190106          |<br>| A           | 20190107          |<br>| A           | 20190108          |<br>| A           | 20190111          |<br>| A           | 20190112          |<br>| B           | 20190227          |<br>| B           | 20190228          |<br>| B           | 20190301          |<br>| B           | 20190104          |<br>| B           | 20190106          |<br>+————-+——————-+–+</p><h4 id="3-1-找参考系-先排序-时间减去排名为连续开始登陆时间"><a href="#3-1-找参考系-先排序-时间减去排名为连续开始登陆时间" class="headerlink" title="3.1 找参考系,先排序,时间减去排名为连续开始登陆时间"></a>3.1 找参考系,先排序,时间减去排名为连续开始登陆时间</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span>day<span class="token punctuation">,</span>rn<span class="token punctuation">,</span>date_sub<span class="token punctuation">(</span>concat_ws<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span>substr<span class="token punctuation">(</span>day<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>substr<span class="token punctuation">(</span>day<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>substr<span class="token punctuation">(</span>day<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rn<span class="token punctuation">)</span> date_diff<span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>visit_time day<span class="token punctuation">,</span>row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span> visit_time<span class="token punctuation">)</span> rn<span class="token keyword">from</span>visit<span class="token punctuation">)</span> t<span class="token punctuation">;</span></code></pre><p>result:</p><pre><code>+-------+-----------+-----+-------------+--+| name  |    day    | rn  |  date_diff  |+-------+-----------+-----+-------------+--+| A     | 20190101  | 1   | 2018-12-31  || A     | 20190102  | 2   | 2018-12-31  || A     | 20190103  | 3   | 2018-12-31  || A     | 20190104  | 4   | 2018-12-31  || A     | 20190106  | 5   | 2019-01-01  || A     | 20190107  | 6   | 2019-01-01  || A     | 20190108  | 7   | 2019-01-01  || A     | 20190111  | 8   | 2019-01-03  || A     | 20190112  | 9   | 2019-01-03  || B     | 20190104  | 1   | 2019-01-03  || B     | 20190106  | 2   | 2019-01-04  || B     | 20190227  | 3   | 2019-02-24  || B     | 20190228  | 4   | 2019-02-24  || B     | 20190301  | 5   | 2019-02-24  |+-------+-----------+-----+-------------+--+</code></pre><h4 id="3-2-分组求出连续登陆次数"><a href="#3-2-分组求出连续登陆次数" class="headerlink" title="3.2 分组求出连续登陆次数:"></a>3.2 分组求出连续登陆次数:</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> times<span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>day<span class="token punctuation">,</span>rn<span class="token punctuation">,</span>date_sub<span class="token punctuation">(</span>concat_ws<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span>substr<span class="token punctuation">(</span>day<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>substr<span class="token punctuation">(</span>day<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>substr<span class="token punctuation">(</span>day<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rn<span class="token punctuation">)</span> date_diff<span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>visit_time day<span class="token punctuation">,</span>row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span> visit_time<span class="token punctuation">)</span> rn<span class="token keyword">from</span>visit<span class="token punctuation">)</span> <span class="token number">a</span><span class="token punctuation">)</span> <span class="token number">b</span><span class="token keyword">group</span> <span class="token keyword">by</span> name<span class="token punctuation">,</span>date_diff<span class="token punctuation">;</span></code></pre><p>result:</p><pre><code>+-------+--------+--+| name  | times  |+-------+--------+--+| A     | 4      || A     | 3      || A     | 2      || B     | 1      || B     | 1      || B     | 3      |+-------+--------+--+</code></pre><h4 id="3-3-去重求出最大登陆次数"><a href="#3-3-去重求出最大登陆次数" class="headerlink" title="3.3 去重求出最大登陆次数:"></a>3.3 去重求出最大登陆次数:</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span>name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> times<span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>day<span class="token punctuation">,</span>rn<span class="token punctuation">,</span>date_sub<span class="token punctuation">(</span>concat_ws<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span>substr<span class="token punctuation">(</span>day<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>substr<span class="token punctuation">(</span>day<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>substr<span class="token punctuation">(</span>day<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rn<span class="token punctuation">)</span> date_diff<span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>visit_time day<span class="token punctuation">,</span>row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span> visit_time<span class="token punctuation">)</span> rn<span class="token keyword">from</span>visit<span class="token punctuation">)</span> <span class="token number">a</span><span class="token punctuation">)</span> <span class="token number">b</span><span class="token keyword">group</span> <span class="token keyword">by</span> name<span class="token punctuation">,</span>date_diff<span class="token punctuation">)</span> <span class="token number">c</span><span class="token keyword">group</span> <span class="token keyword">by</span> name<span class="token punctuation">;</span></code></pre><p>result:</p><pre><code>+-------+------+--+| name  | _c1  |+-------+------+--+| A     | 4    || B     | 3    |+-------+------+--+</code></pre><h3 id="4-Hive参数"><a href="#4-Hive参数" class="headerlink" title="4.Hive参数"></a>4.Hive参数</h3><h5 id="hive-fetch-task-conversion参数-控制是否执行MapReduce作业"><a href="#hive-fetch-task-conversion参数-控制是否执行MapReduce作业" class="headerlink" title="hive.fetch.task.conversion参数    控制是否执行MapReduce作业"></a>hive.fetch.task.conversion参数    控制是否执行MapReduce作业</h5><ol start="0"><li><p><code>none</code>:  Disable hive.fetch.task.conversion (value added in Hive 0.14.0 with <a href="https://issues.apache.org/jira/browse/HIVE-8389">HIVE-8389</a>)</p><p>禁用,所有作业都跑MR</p></li><li><p><code>minimal</code>:  SELECT *, FILTER on partition columns (WHERE and HAVING clauses), LIMIT only</p><p>select分区列filter不执行</p></li><li><p><code>more</code>:  SELECT, FILTER, LIMIT only (including TABLESAMPLE, virtual columns)</p></li></ol><h5 id="hive-mapred-mode参数"><a href="#hive-mapred-mode参数" class="headerlink" title="hive.mapred.mode参数"></a>hive.mapred.mode参数</h5><ul><li>Default Value: <ul><li>Hive 0.x: <code>nonstrict</code></li><li>Hive 1.x: <code>nonstrict</code></li><li>Hive 2.x: <code>strict</code> (<a href="https://issues.apache.org/jira/browse/HIVE-12413">HIVE-12413</a>)</li></ul></li></ul><p>严格模式下order by不能执行,笛卡尔积操作也不能执行</p><p>查询分区表时不加分区,也不能执行</p><h5 id="hive-exec-parallel参数-决定作业是否可以并行跑-没有依赖的作业"><a href="#hive-exec-parallel参数-决定作业是否可以并行跑-没有依赖的作业" class="headerlink" title="hive.exec.parallel参数    决定作业是否可以并行跑(没有依赖的作业)"></a>hive.exec.parallel参数    决定作业是否可以并行跑(没有依赖的作业)</h5><ul><li>Default Value: <code>false</code></li><li>Added In: Hive 0.5.0</li></ul><p>集群资源足够时可以开启.</p><h5 id="hive-auto-convert-join参数-是否自动转换成为mapjoin"><a href="#hive-auto-convert-join参数-是否自动转换成为mapjoin" class="headerlink" title="hive.auto.convert.join参数    是否自动转换成为mapjoin"></a>hive.auto.convert.join参数    是否自动转换成为mapjoin</h5><p>查看执行计划:</p><p>explain (extended) select * from emp a left join dept b on a.deptno = b.deptno;</p><pre><code>+----------------------------------------------------+--+|                      Explain                       |+----------------------------------------------------+--+| STAGE DEPENDENCIES:                                ||   Stage-4 is a root stage                          ||   Stage-3 depends on stages: Stage-4               ||   Stage-0 depends on stages: Stage-3               ||                                                    || STAGE PLANS:                                       ||   Stage: Stage-4                                   ||     Map Reduce Local Work                          ||       Alias -&gt; Map Local Tables:                   ||         b                                          ||           Fetch Operator                           ||             limit: -1                              ||       Alias -&gt; Map Local Operator Tree:            ||         b                                          ||           TableScan                                ||             alias: b                               ||             Statistics: Num rows: 1 Data size: 79 Basic stats: COMPLETE Column stats: NONE ||             HashTable Sink Operator                ||               keys:                                ||                 0 deptno (type: int)               ||                 1 deptno (type: int)               ||                                                    ||   Stage: Stage-3                                   ||     Map Reduce                                     ||       Map Operator Tree:                           ||           TableScan                                ||             alias: a                               ||             Statistics: Num rows: 2 Data size: 700 Basic stats: COMPLETE Column stats: NONE ||             Map Join Operator                      ||               condition map:                       ||                    Left Outer Join0 to 1           ||               keys:                                ||                 0 deptno (type: int)               ||                 1 deptno (type: int)               ||               outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col11, _col12, _col13 ||               Statistics: Num rows: 2 Data size: 770 Basic stats: COMPLETE Column stats: NONE ||               Select Operator                      ||                 expressions: _col0 (type: int), _col1 (type: string), _col2 (type: string), _col3 (type: int), _col4 (type: string), _col5 (type: double), _col6 (type: double), _col7 (type: int), _col11 (type: int), _col12 (type: string), _col13 (type: string) ||                 outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10 ||                 Statistics: Num rows: 2 Data size: 770 Basic stats: COMPLETE Column stats: NONE ||                 File Output Operator               ||                   compressed: false                ||                   Statistics: Num rows: 2 Data size: 770 Basic stats: COMPLETE Column stats: NONE ||                   table:                           ||                       input format: org.apache.hadoop.mapred.TextInputFormat ||                       output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat ||                       serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe ||       Local Work:                                  ||         Map Reduce Local Work                      ||                                                    ||   Stage: Stage-0                                   ||     Fetch Operator                                 ||       limit: -1                                    ||       Processor Tree:                              ||         ListSink                                   ||                                                    |+----------------------------------------------------+--+</code></pre><p>hive.smalltable.filesize <em>or</em> hive.mapjoin.smalltable.filesize参数    可调节默认走map的表的大小</p><p><strong>set mapreduce.job.reduce = x;设置reduce个数</strong></p><h5 id="hive-exec-mode-local-auto参数-本地模式"><a href="#hive-exec-mode-local-auto参数-本地模式" class="headerlink" title="hive.exec.mode.local.auto参数    本地模式"></a>hive.exec.mode.local.auto参数    本地模式</h5>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive增强01</title>
      <link href="2019/04/15/hive-zeng-qiang-01/"/>
      <url>2019/04/15/hive-zeng-qiang-01/</url>
      
        <content type="html"><![CDATA[<p>order by:全局排序</p><p>sort by:分区排序,整体无序.</p><p>distribute by:按照规则进行分组,通常和sort by连用</p><p>cluster by:等于distribute by a order by a(同一字段),不能使用降序</p><p><strong>严格模式:</strong></p><p>set hive.mapred.mode = strict;</p><p>严格模式开启下禁用order by</p><p><strong>设置reduce个数:</strong></p><p>set mapred.reduce.tasks=3;    </p><p><strong>把数据写到本地:</strong></p><p>insert overwrite local directory ‘path’ row format delimited fields terminated by ‘\t’ select * from xx;</p><p>启动Hiveserive2:</p><p>nohup sh hiveserver2 &amp;</p><p>启动beeline:</p><p>./beeline -u jdbc:hive2://warehhouse001:10000/emp  -n hadoop </p><p>Hive JDBC编程:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>hiveJdbc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HiveJdbc</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String driverName <span class="token operator">=</span> <span class="token string">"org.apache.hive.jdbc.HiveDriver"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param args     * @throws SQLException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//replace "hive" here with the name of the user the queries should run as</span>        Connection con <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:hive2://warehouse001:10000/emp"</span><span class="token punctuation">,</span> <span class="token string">"hadoop"</span><span class="token punctuation">,</span> <span class="token string">"quanxu@123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Statement stmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String tableName <span class="token operator">=</span> <span class="token string">"testHiveDriverTable"</span><span class="token punctuation">;</span>        stmt<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"drop table if exists "</span> <span class="token operator">+</span> tableName<span class="token punctuation">)</span><span class="token punctuation">;</span>        stmt<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"create table "</span> <span class="token operator">+</span> tableName <span class="token operator">+</span> <span class="token string">" (key int, value string)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// show tables</span>        String sql <span class="token operator">=</span> <span class="token string">"show tables '"</span> <span class="token operator">+</span> tableName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Running: "</span> <span class="token operator">+</span> sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        ResultSet res <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// describe table</span>        sql <span class="token operator">=</span> <span class="token string">"describe "</span> <span class="token operator">+</span> tableName<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Running: "</span> <span class="token operator">+</span> sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// load data into table</span>        <span class="token comment" spellcheck="true">// NOTE: filepath has to be local to the hive server</span>        <span class="token comment" spellcheck="true">// NOTE: /tmp/a.txt is a ctrl-A separated file with two fields per line</span><span class="token comment" spellcheck="true">//        String filepath = "/tmp/a.txt";</span><span class="token comment" spellcheck="true">//        sql = "load data local inpath '" + filepath + "' into table " + tableName;</span><span class="token comment" spellcheck="true">//        System.out.println("Running: " + sql);</span><span class="token comment" spellcheck="true">//        stmt.execute(sql);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        // select * query</span><span class="token comment" spellcheck="true">//        sql = "select * from " + tableName;</span><span class="token comment" spellcheck="true">//        System.out.println("Running: " + sql);</span><span class="token comment" spellcheck="true">//        res = stmt.executeQuery(sql);</span><span class="token comment" spellcheck="true">//        while (res.next()) &amp;#123;</span><span class="token comment" spellcheck="true">//            System.out.println(String.valueOf(res.getInt(1)) + "\t" + res.getString(2));</span><span class="token comment" spellcheck="true">//        &amp;#125;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        // regular hive query</span><span class="token comment" spellcheck="true">//        sql = "select count(1) from " + tableName;</span><span class="token comment" spellcheck="true">//        System.out.println("Running: " + sql);</span><span class="token comment" spellcheck="true">//        res = stmt.executeQuery(sql);</span><span class="token comment" spellcheck="true">//        while (res.next()) &amp;#123;</span><span class="token comment" spellcheck="true">//            System.out.println(res.getString(1));</span><span class="token comment" spellcheck="true">//        &amp;#125;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>UDF函数:</p><p>​    UDF:一进一出    upper()/lower()…</p><p>​    UDTF:多进一出    max(),min(),sum()….</p><p>​    UDAF:一进多出    lateral view explode()     </p><p>自定义UDF::</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>UDF<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>exec<span class="token punctuation">.</span>UDF<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">sayHello</span> <span class="token keyword">extends</span> <span class="token class-name">UDF</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">evaluate</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Hello: "</span> <span class="token operator">+</span> name <span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        sayHello sayHello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sayHello<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>UDF<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>exec<span class="token punctuation">.</span>UDF<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">sayHello</span> <span class="token keyword">extends</span> <span class="token class-name">UDF</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">evaluate</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Hello: "</span> <span class="token operator">+</span> name <span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        sayHello sayHello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sayHello<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>打包上传服务器.</p><p>添加jar包:</p><pre><code>add jar /home/hadoop/lib/SayHell-1.0.jar;</code></pre><p>查看jar包:</p><pre><code>list jars;</code></pre><p>添加临时函数:</p><pre><code>CREATE TEMPORARY FUNCTION say_hello AS &quot;com.example.hadoop.hdfs.UDF.sayHello&quot;;</code></pre><p>使用:</p><p>select ename,say_hello(ename);</p><p>+———+—————-+–+<br>|  ename  |      _c1       |<br>+———+—————-+–+<br>| SMITH   | Hello: SMITH   |<br>| ALLEN   | Hello: ALLEN   |<br>| WARD    | Hello: WARD    |<br>| JONES   | Hello: JONES   |<br>| MARTIN  | Hello: MARTIN  |<br>| BLAKE   | Hello: BLAKE   |<br>| CLARK   | Hello: CLARK   |<br>| SCOTT   | Hello: SCOTT   |<br>| KING    | Hello: KING    |<br>| TURNER  | Hello: TURNER  |<br>| ADAMS   | Hello: ADAMS   |<br>| JAMES   | Hello: JAMES   |<br>| FORD    | Hello: FORD    |<br>| MILLER  | Hello: MILLER  |<br>| HIVE    | Hello: HIVE    |<br>+———+—————-+–+</p><p>永久注册:</p><pre><code>CREATE FUNCTION say_hello2 AS &quot;com.example.hadoop.hdfs.UDF.sayHello&quot; USING JAR &#39;hdfs://warehouse001:9000/hive-udf/SayHell-1.0.jar&#39;;CREATE FUNCTION say_hello2 AS &quot;com.example.hadoop.hdfs.UDF.sayHello&quot; USING JAR &#39;hdfs://warehouse001:9000/hive-udf/SayHell-1.0.jar&#39;;</code></pre><p>这个是把函数存到元数据中.</p><p>如果想开启就能使用必须编译源码,把自定义方法配置到FunctionRegistry.java中</p><p>也可以编写初始化脚本hive-init.sql在hive执行时运行:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">add</span> jar <span class="token operator">/</span>home<span class="token operator">/</span>hadoop<span class="token operator">/</span>lib<span class="token operator">/</span>SayHell<span class="token number">-1.0</span><span class="token punctuation">.</span>jar<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TEMPORARY</span> <span class="token keyword">FUNCTION</span> say_hello3 <span class="token keyword">AS</span> <span class="token string">"com.example.hadoop.hdfs.UDF.sayHello"</span><span class="token punctuation">;</span></code></pre><p>启动时执行:</p><pre><code>hive -i hive-init.sql </code></pre><p>这样每次启动后就可以使用,这是一种偷懒的方法.</p><p>给自定义函数加注释:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Description</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"say_hello4"</span><span class="token punctuation">,</span>        value <span class="token operator">=</span> <span class="token string">"_FUNC_(str) with 'Hello':str"</span><span class="token punctuation">,</span>        extended <span class="token operator">=</span> <span class="token string">"Example:\n"</span>                <span class="token operator">+</span> <span class="token string">"  > SELECT _FUNC_(xiaoming) FROM src LIMIT 1;\n"</span> <span class="token operator">+</span> <span class="token string">"  Hello':xiaoming'"</span><span class="token punctuation">)</span></code></pre><p>使用GenericUDF编写UDF:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>UDF<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>exec<span class="token punctuation">.</span>UDFArgumentException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>HiveException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>udf<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>GenericUDF<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>serde2<span class="token punctuation">.</span>objectinspector<span class="token punctuation">.</span>ObjectInspector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>serde2<span class="token punctuation">.</span>objectinspector<span class="token punctuation">.</span>primitive<span class="token punctuation">.</span>PrimitiveObjectInspectorFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDFLength</span> <span class="token keyword">extends</span> <span class="token class-name">GenericUDF</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 处理参数     * @param arguments     * @return     * @throws UDFArgumentException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ObjectInspector <span class="token function">initialize</span><span class="token punctuation">(</span>ObjectInspector<span class="token punctuation">[</span><span class="token punctuation">]</span> arguments<span class="token punctuation">)</span> <span class="token keyword">throws</span> UDFArgumentException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UDFArgumentException</span><span class="token punctuation">(</span>                    <span class="token string">"say_hello requires 1 argument, got "</span> <span class="token operator">+</span> arguments<span class="token punctuation">.</span>length            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> PrimitiveObjectInspectorFactory<span class="token punctuation">.</span>javaIntObjectInspector<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 业务逻辑处理     * @param arguments     * @return     * @throws HiveException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">evaluate</span><span class="token punctuation">(</span>DeferredObject<span class="token punctuation">[</span><span class="token punctuation">]</span> arguments<span class="token punctuation">)</span> <span class="token keyword">throws</span> HiveException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String input <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDisplayString</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> children<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala总结</title>
      <link href="2019/04/01/scala-zong-jie/"/>
      <url>2019/04/01/scala-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="一-Scala类型"><a href="#一-Scala类型" class="headerlink" title="一 Scala类型"></a>一 Scala类型</h3><p>定义变量:</p><p>var    val</p><p>var定义的是变量,可以被重新赋值.</p><p>val定义的是不可变的,只能定义一次,相当于java的final</p><p>数据类型:</p><p>Any</p><p>​    AnyVal    AnyRef</p><p>AnyVal的子类</p><p>​    整型            字符串型</p><p>​    Double        Unit</p><p>​    Float            StringOps</p><p>​    Long    </p><p>​    Int        &lt;—-    Char        Char可以转换为Int            </p><p>​    short            Boolean</p><p>​    Byte</p><p>​    这里可由下往上可以自动转换,由上到下使用Toxxxx强制转换</p><p>AnyRef的子类</p><p>​    Scala collections            Other Scala classes        all java classes</p><p>​    Null</p><p>Nothing    所有类的子类</p><p>Byte    8位有符号补码整数。数值区间为 -128 到 127</p><p>Short    16位有符号补码整数。数值区间为 -32768 到 32767</p><p>Int        32位有符号补码整数。数值区间为 -2147483648 到 2147483647</p><p>Long    64位有符号补码整数。数值区间为 -9223372036854775808 到 9223372036854775807</p><p>Float    32 位    单精度浮点数</p><p>Double    64 位    双精度浮点数</p><p>Char    </p><h3 id="二-Classs-VS-Object"><a href="#二-Classs-VS-Object" class="headerlink" title="二 Classs VS Object"></a>二 Classs VS Object</h3><p>在Scala中没有静态修饰符,在object下的成员全部都是静态的,如果在类中声明了与该类相同名字的object则该object是该类的”伴生对象”，所以对于一个class来说，所有的方法和成员变量在实例被 new 出来之前都是无法访问的.</p><p>可以理解为Scala把类中的static集中放到了object对象中,伴生对象和类文件必须是同一个源文件,可以用伴生对象做一些初始化操作.</p><p>object不能提供构造器参数,也就是说object必须是无参的</p><p>在Scala中,类名可以和对象名为同一个名字,该对象称为该类的伴生对象,类和伴生对象可以相互访问他们的私有属性,但是它们必须在同一个源文件中.</p><p>使用的区别:</p><pre class=" language-scala"><code class="language-scala">    <span class="token comment" spellcheck="true">//这里调用的是class</span>    <span class="token keyword">val</span>  a <span class="token operator">=</span> <span class="token keyword">new</span> ApplyTest    println<span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><pre class=" language-scala"><code class="language-scala">    <span class="token comment" spellcheck="true">//这里调用的是object</span>    <span class="token keyword">val</span> b <span class="token operator">=</span> ApplyTest    println<span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><p>Object不用new就可以实例化,而Class需要new</p><pre class=" language-scala"><code class="language-scala"> <span class="token comment" spellcheck="true">// new 对象() => 调用的是class apply方法</span>    <span class="token keyword">val</span>  e <span class="token operator">=</span> <span class="token keyword">new</span> ApplyTest<span class="token punctuation">(</span><span class="token punctuation">)</span>    e<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//调用的是class apply方法</span> <span class="token comment" spellcheck="true">// 对象() => 调用的是class apply方法</span>    <span class="token keyword">val</span>  f <span class="token operator">=</span>ApplyTest<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-scala"><code class="language-scala">    <span class="token comment" spellcheck="true">//这里是调用的class apply方法</span>    <span class="token keyword">val</span> array <span class="token operator">=</span> <span class="token keyword">new</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//这里是调用的object apply方法</span>    <span class="token keyword">val</span> array2 <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><p>这里object好处就体现出来了,不用new就可以直接实例化</p><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">/** * object修饰的东西,调用时不需要new,直接Timer.属性/方法 */</span><span class="token keyword">object</span> Timer<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> cnt <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">def</span> currentCnt<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    cnt <span class="token operator">+=</span> <span class="token number">1</span>    cnt  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>总结:</p><p>1.object不需要new就可以实例化,class必须new才可以实例化.</p><p>2.object必须是无参构造器,而class可以有参也可以无参.</p><p>3.object修饰的可以不用实例化,直接类名.属性/方法调用,class必须实例化才可以调用.</p><h3 id="三-Class-vs-Case-class"><a href="#三-Class-vs-Case-class" class="headerlink" title="三 Class    vs    Case class"></a>三 Class    vs    Case class</h3><p>1.case class不需要new</p><p>2.case class底层有重写toString方法和”==”</p><p>3.序列化</p><h3 id="四-Case-class-vs-Case-object"><a href="#四-Case-class-vs-Case-object" class="headerlink" title="四 Case class    vs    Case object"></a>四 Case class    vs    Case object</h3><p>case class必须有参数列表,case class不能有参数列表</p><h3 id="五-构造器"><a href="#五-构造器" class="headerlink" title="五 构造器"></a>五 构造器</h3><h4 id="1-主构造器"><a href="#1-主构造器" class="headerlink" title="1.主构造器"></a>1.主构造器</h4><p>class 类名(….)  在Scala中叫做主构造器</p><h4 id="2-附属构造器"><a href="#2-附属构造器" class="headerlink" title="2.附属构造器"></a>2.附属构造器</h4><p>1.def this定义的叫附属构造器</p><p>2.一个附属构造器的第一行必须要调用主构造器或者其他附属构造器</p><p>3.附属构造器属性不需要val,var修饰</p><p>4.附属构造器用来补充主构造器.</p><p>5.附属构造器参数相同的,按参数类型去区分.</p><h4 id="3-父类子类的构造器"><a href="#3-父类子类的构造器" class="headerlink" title="3.父类子类的构造器"></a>3.父类子类的构造器</h4><p>1.先调用父类构造器,再调用子类构造器</p><p>2.子类定义父类属性/方法需要重写,父类如果没有toString方法的话,默认有oString方法的,子类定义toSting方法时需要重写.</p><h3 id="六-集合"><a href="#六-集合" class="headerlink" title="六 集合"></a>六 集合</h3><h4 id="1-Array"><a href="#1-Array" class="headerlink" title="1.Array"></a>1.Array</h4><p>定长数组    Array</p><p>变长数组    ArrayBuffer,需要导包import scala.collection.mutable.ArrayBuffer</p><p>:+    在数组右边加</p><p>+:    在数组左边加</p><p>++    数组+数组</p><p>insert(0,10)    在第0位插入10</p><p>remove(0)    删除第0个元素</p><p>remove(0,3)    从第0位起删除三个元素</p><p>trimEnd(1)    删除最后1个元素</p><p>.toArray/.toBuffer    定长变长互相转换</p><h4 id="2-List"><a href="#2-List" class="headerlink" title="2.List"></a>2.List</h4><p>List    定长</p><p>ListBuffer    变长,需要导包import scala.collection.mutable.ListBuffer</p><p>List中元素不可重复</p><p>Nil    空List</p><p>:+    在右侧加元素</p><p>::    List+List</p><p>-=    移除一个元素(不存在的元素不会报错)</p><p>union    两个List的并集</p><p>intersect    两个List的交集</p><p>a.diff(b)    a中不包含b的</p><p>a.sliding(3,2)    滑窗(窗口大小3,步长为2)</p><h4 id="3-Set"><a href="#3-Set" class="headerlink" title="3.Set"></a>3.Set</h4><p>Set是无序的,自动去重的</p><p>.toList    转换为List</p><p>.toArray    转换为Array</p><p>add    添加元素</p><p>union    两个set的交集</p><p>max/min/sum/length</p><h4 id="4-Truple"><a href="#4-Truple" class="headerlink" title="4.Truple"></a>4.Truple</h4><p>元组</p><p>最多元素只能放22个</p><p>swap    交换二元组的位置</p><h4 id="5-Map"><a href="#5-Map" class="headerlink" title="5.Map"></a>5.Map</h4><p>键值对</p><p>m.keys    取key</p><p>m.values    取值</p><p>m.get().get    使用get取值,第一个get返回的是some类型,需要再get取值</p><p>m.get().getOrElse()    取值,没有则给默认值</p><p>update    更新Map</p><p>SortedMap    对Map进行排序</p><h4 id="6-Queue"><a href="#6-Queue" class="headerlink" title="6.Queue"></a>6.Queue</h4><p>队列    先入先出</p><p>+=    添加元素</p><p>++=    添加集合</p><p>enqueue    在尾部添加</p><p>head    取头部元素</p><p>tail    除了头部的元素</p><p>last    最后一个元素</p><p>b.dequeueFirst(_.startsWith(“a”))    根据条件取元素</p><h4 id="7-Stack"><a href="#7-Stack" class="headerlink" title="7.Stack"></a>7.Stack</h4><p>栈    先入后出,有点像往瓶子里放东西</p><p>pop    出栈</p><p>push    添加元素</p><p>top    取下一个元素</p><p>isEmpty    判断是否为空</p><p>size    元素个数</p><p>clear    清空栈</p><h3 id="七-Option、Some、None"><a href="#七-Option、Some、None" class="headerlink" title="七 Option、Some、None"></a>七 Option、Some、None</h3><p>Option是为了避免NullPointerException</p><p>Some是一个继承Option的case class</p><p>None是一个继承了Option[Nothing]的case object</p><p>Option和Some的用法:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> a <span class="token operator">:</span>Option<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> Some<span class="token punctuation">(</span><span class="token string">"Some"</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>a<span class="token punctuation">.</span>get<span class="token punctuation">)</span></code></pre><p>定义了一个类型为String的Option，然后用Some给它赋了一个值。使用Option的get方法来获取这个值.</p><p>Option和None的用法:</p><pre class=" language-scala"><code class="language-scala">    <span class="token keyword">val</span> b <span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> None    println<span class="token punctuation">(</span>b<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">"None"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>定义了一个Option，并给给他赋值None。在获取值的时候，我们没有调用get方法，相反我们使用的是getOrElse，如果值为空，则给他一个默认值。None没有get方法,不能直接调用.</p><p>在Scala里Option[T]实际上是一个容器，就像数组或是List一样，你可以把他看成是一个可能有零到一个元素的List。<br>当你的Option里面有东西的时候，这个List的长度是1（也就是 Some），而当你的Option里没有东西的时候，它的长度是0（也就是 None）</p><h3 id="八-Java和Scala之间的转换"><a href="#八-Java和Scala之间的转换" class="headerlink" title="八 Java和Scala之间的转换"></a>八 Java和Scala之间的转换</h3><p>隐式转换:</p><p>import collection.JavaConversions._</p><h3 id="九-函数式编程"><a href="#九-函数式编程" class="headerlink" title="九 函数式编程"></a>九 函数式编程</h3><h4 id="1-匿名函数"><a href="#1-匿名函数" class="headerlink" title="1.匿名函数"></a>1.匿名函数</h4><p>没有名字的函数就是匿名函数，可以通过<strong>函数表达式</strong>来设置匿名函数</p><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//函数    匿名函数=>(a:Int,b:Int) => a+b</span>        <span class="token comment" spellcheck="true">//第一种</span>        <span class="token keyword">val</span> f1 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> a<span class="token operator">+</span>b        f1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//第二种</span>        <span class="token keyword">val</span> f2<span class="token operator">:</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> a<span class="token operator">+</span>b        println<span class="token punctuation">(</span>f2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//第三种</span>        <span class="token keyword">val</span> f3<span class="token operator">:</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token keyword">=></span> a<span class="token operator">+</span>b        println<span class="token punctuation">(</span>f3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="2-高阶函数"><a href="#2-高阶函数" class="headerlink" title="2.高阶函数"></a>2.高阶函数</h4><p>能够接受函数作为参数的函数，叫做高阶函数</p><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//test 就是一个高阶函数，它可以接收f: Double => Double </span><span class="token keyword">def</span> test<span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token keyword">=></span> <span class="token builtin">Double</span><span class="token punctuation">,</span> n1<span class="token operator">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>f<span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sum 是接收一个Double,返回一个Double</span><span class="token keyword">def</span> sum<span class="token punctuation">(</span>d<span class="token operator">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>d <span class="token operator">+</span> d<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">val</span> res <span class="token operator">=</span> test<span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">6.0</span><span class="token punctuation">)</span>println<span class="token punctuation">(</span><span class="token string">"res="</span> <span class="token operator">+</span> res<span class="token punctuation">)</span></code></pre><h4 id="3-currying"><a href="#3-currying" class="headerlink" title="3.currying"></a>3.currying</h4><pre class=" language-scala"><code class="language-scala">       <span class="token comment" spellcheck="true">/**       * currying 柯里化 把一个参数拆分为多个参数       */</span>      <span class="token keyword">def</span> sum<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">=</span>x <span class="token operator">+</span> y          <span class="token keyword">def</span> sum2<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>y<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">=</span>x <span class="token operator">+</span> y      <span class="token keyword">def</span> upperEquals<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">(</span>y<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        x<span class="token punctuation">.</span>toUpperCase <span class="token operator">==</span> y<span class="token punctuation">.</span>toUpperCase<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span>upperEquals<span class="token punctuation">(</span><span class="token string">"PK"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"pk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="4-PartialFunction"><a href="#4-PartialFunction" class="headerlink" title="4.PartialFunction"></a>4.PartialFunction</h4><p>偏函数</p><p>1）在对符合某个条件，而不是所有情况进行逻辑操作时，使用偏函数是一个不错的选择</p><p>2）将包在大括号内的一组case语句封装为函数，我们称之为偏函数，它只对会作用于指定类型的参数或指定范围值的参数实施计算，超出范围的值会忽略（未必会忽略，这取决于你打算怎样处理）</p><p>3）偏函数在Scala中是一个特质PartialFunction</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> array<span class="token operator">:</span>Array<span class="token punctuation">[</span><span class="token builtin">Any</span><span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"X"</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> partialFunction<span class="token operator">=</span><span class="token keyword">new</span> PartialFunction<span class="token punctuation">[</span><span class="token builtin">Any</span><span class="token punctuation">,</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">override</span> <span class="token keyword">def</span> isDefinedAt<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>isInstanceOf<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token boolean">true</span> <span class="token keyword">else</span> <span class="token boolean">false</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">override</span> <span class="token keyword">def</span> apply<span class="token punctuation">(</span>v1<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> v1<span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    array<span class="token punctuation">.</span>collect<span class="token punctuation">(</span>partialFunction<span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//collect调用偏函数</span>    array<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> i<span class="token operator">:</span><span class="token builtin">Int</span> <span class="token keyword">=></span> i <span class="token operator">*</span> <span class="token number">5</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span></code></pre><p>map不支持偏函数</p><h3 id="十-Scala支持哪些模式匹配"><a href="#十-Scala支持哪些模式匹配" class="headerlink" title="十 Scala支持哪些模式匹配"></a>十 Scala支持哪些模式匹配</h3><p>Scala的模式匹配可以支持常量模式、变量模式、序列模式、元组模式、变量绑定模式等等。</p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala之面向对象编程</title>
      <link href="2019/03/25/scala03-mian-xiang-dui-xiang/"/>
      <url>2019/03/25/scala03-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<p>面向对象编程:OOS</p><p>Java面向对象编程:</p><p>​    封装: 在类中有属性、方法</p><p>​    继承:父类和子类之间的关系，属性、方法都可以进行重新</p><p>​    多态:父类引用指向子类对象</p><p>​    Animal    Dog    Cat</p><p>​    Animal a = new Dog()    父类Animal指向子类Dog</p><p>类和对象:</p><p>学生</p><p>学生1:小明    18岁    1.78m</p><p>学生2:小红    17岁    1.62m</p><p>则学生就是类,小明和小红就是学生类的具体实例/对象.</p><p>定义一个学生类:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> SimpleObeject <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * *Scala中定义类:  class 类名 */</span><span class="token keyword">class</span> User<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//定义属性</span>  <span class="token keyword">val</span> name<span class="token operator">:</span><span class="token builtin">String</span> <span class="token operator">=</span><span class="token string">""</span>  <span class="token keyword">var</span> age<span class="token operator">:</span><span class="token builtin">Int</span> <span class="token operator">=</span><span class="token number">18</span>  <span class="token comment" spellcheck="true">/**   * 定义方法   */</span>  <span class="token keyword">def</span> eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>s<span class="token string">"$name....eatting"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> study<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>s<span class="token string">"$name....studying"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>构造器:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>scalademo<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>OO<span class="token keyword">object</span> ConstrustorApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token keyword">new</span> Person<span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>s<span class="token string">"name is $&amp;#123;person.name&amp;#125;,age is $&amp;#123;person.age&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//这里调用的是附属构造器,附属构造器是对主构造器的补充</span><span class="token comment" spellcheck="true">//    val person2 = new Person("李四",30,"家里蹲")</span><span class="token comment" spellcheck="true">//    val student = new Student("zhangsan",18,"cs")</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 底层生产的就是这样的: * public class Person &amp;#123; *    private final java.lang.String name; *    private int age; * *    public java.lang.String name(); *    public int age(); * *    public void age_$eq(int); * *    public Person(java.lang.String, int); * &amp;#125; */</span><span class="token comment" spellcheck="true">/** *这里的参数不加修饰的话属性是创建不成功的 *val与car的选用:修饰时全部用val,val满足不了时再改为var * class 类名(....)    在Scala中叫做主构造器 *附属构造器 */</span><span class="token keyword">class</span> Person<span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token keyword">val</span> age<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//默认也把括号内定义的内容转化为属性</span>  println<span class="token punctuation">(</span><span class="token string">"Person的构造器被调用"</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> school <span class="token operator">=</span> <span class="token string">"PKU"</span>  println<span class="token punctuation">(</span><span class="token string">"Person的构造器调用结束"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/**   *附属构造器   *  1.def this定义的叫附属构造器   *  2.一个附属构造器的第一行必须要调用主构造器或者其他附属构造器   *  3.这里的属性不需要val,var修饰   */</span>  <span class="token keyword">def</span> <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> school<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span> <span class="token string">"xxx"</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   *继承:父和子之间   * 先调用父类构造器,再调用子类构造器   * 重写关键字: override   */</span>  <span class="token keyword">class</span> Student<span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token keyword">val</span> major<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Person<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span><span class="token string">"Student的构造器被调用"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//var school = "PKU"</span>    <span class="token comment" spellcheck="true">//这里调用父类属性需要重写</span>    <span class="token keyword">override</span> <span class="token keyword">val</span> school <span class="token operator">=</span> <span class="token string">"nudt"</span>    <span class="token comment" spellcheck="true">//这里默认是有toString方法,这里也需要重写</span>    <span class="token keyword">override</span> <span class="token keyword">def</span> toString<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token string">"子类的toString方法"</span>    println<span class="token punctuation">(</span><span class="token string">"Student的构造器调用结束"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这里的输出结果为:</p><p>Person的构造器被调用<br>Person的构造器调用结束<br>name is xiaoming,age is 30</p><p>可见这里先调用的是构造器,再去调用对象里的内容.</p><p>抽象类:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>scalademo<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>OO<span class="token keyword">object</span> AbstractApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> s <span class="token operator">=</span> <span class="token keyword">new</span> Student2    s<span class="token punctuation">.</span>speak    println<span class="token punctuation">(</span>s<span class="token string">"$&amp;#123;s.name&amp;#125;...$&amp;#123;s.age&amp;#125;"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 抽象类需要abstract关键字修饰 * 类中的一个或多个方法/属性只有定义,没有实现 * 抽象类是不能够直接使用的 * 一般情况下抽象类是需要具体的子类来实现,然后使用 * */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> Person2 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">val</span> name<span class="token operator">:</span><span class="token builtin">String</span>  <span class="token keyword">val</span> age<span class="token operator">:</span><span class="token builtin">Int</span>  <span class="token keyword">def</span> speak<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 使用抽象类先重写属性方法 */</span><span class="token keyword">class</span> Student2 <span class="token keyword">extends</span> Person2<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">override</span> <span class="token keyword">val</span> name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"xiaoming"</span>  <span class="token keyword">override</span> <span class="token keyword">val</span> age<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">30</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> speak<span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span><span class="token string">"speak"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Apply:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>scalademo<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>OO<span class="token comment" spellcheck="true">/** * object xxx * class xxx * 伴生类 和 伴生对象 * 互为伴生 */</span><span class="token keyword">object</span> ApplyApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    //这里调用的是class</span><span class="token comment" spellcheck="true">//    val  a = new ApplyTest</span><span class="token comment" spellcheck="true">//    println(a)</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    //这里调用的是object</span><span class="token comment" spellcheck="true">//    val b = ApplyTest</span><span class="token comment" spellcheck="true">//    println(b)</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    //xxxx() ==> object apply的方法 不用new就可以实例化</span><span class="token comment" spellcheck="true">//    val c = ApplyTest()</span><span class="token comment" spellcheck="true">//    println(c)</span>    <span class="token comment" spellcheck="true">//这里是class new的都是class</span>    <span class="token keyword">val</span>  d <span class="token operator">=</span> <span class="token keyword">new</span> ApplyTest<span class="token punctuation">(</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>d<span class="token punctuation">)</span>    d<span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 对象() => 调用的是class apply方法</span>    <span class="token keyword">val</span>  e <span class="token operator">=</span> <span class="token keyword">new</span> ApplyTest<span class="token punctuation">(</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>e<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//object的好处就体现在这里,不需要new直接实例化</span>    <span class="token keyword">val</span> array <span class="token operator">=</span> <span class="token keyword">new</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> array2 <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * object修饰的东西,调用时不需要new,直接Timer.属性/方法 */</span><span class="token keyword">object</span> Timer<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> cnt <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">def</span> currentCnt<span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    cnt <span class="token operator">+=</span> <span class="token number">1</span>    cnt  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> ApplyTest<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  println<span class="token punctuation">(</span><span class="token string">"ApplyTest Object enter..."</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> cnt <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">def</span> inc <span class="token operator">=</span> cnt <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token keyword">def</span> static<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span><span class="token string">"I am a method..."</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> apply<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span><span class="token string">"ApplyTest Object apply method invoke..."</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  println<span class="token punctuation">(</span><span class="token string">"ApplyTest Object leave..."</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> ApplyTest<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  println<span class="token punctuation">(</span><span class="token string">"ApplyTest class enter..."</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> apply<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span><span class="token string">"ApplyTest class apply method invoke..."</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  println<span class="token punctuation">(</span><span class="token string">"ApplyTest class leave..."</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>case class:</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>scalademo<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>OO<span class="token comment" spellcheck="true">/** * class  vs  case class * 重写: toString ==  序列化 * case class 必须要有参数列表  case object 不能有参数列表 */</span><span class="token keyword">object</span> CaseClass <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//case class 也不需要new直接调用  底层也是有toSring方法</span>    println<span class="token punctuation">(</span>Dog<span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token keyword">class</span> Dog<span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token keyword">object</span> Dog</code></pre>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop MapReduce编程01</title>
      <link href="2019/03/22/mr-bian-cheng-02/"/>
      <url>2019/03/22/mr-bian-cheng-02/</url>
      
        <content type="html"><![CDATA[<p>Hadoop序列化:</p><p>​    序列化: 内存中的对象==&gt;字节数组        网络传输、数据持久化</p><p>​    反序列化：字节数组==&gt;内存中</p><p>IntWritable、Text等都是序列化类型</p><p>自定义序列化:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>mr<span class="token punctuation">.</span>ser<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerDeApp</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * jdk中提供了序列化工具     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//序列化</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"xiaoming"</span><span class="token punctuation">,</span> <span class="token number">1000.00</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// JDK自带序列化 序列化后133字节</span><span class="token comment" spellcheck="true">//        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("d:/tmp/serde/person.obj"));</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        out.writeObject(person);</span><span class="token comment" spellcheck="true">//        out.close();</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        ObjectInputStream in = new ObjectInputStream(new FileInputStream("d:/tmp/serde/person.obj"));</span><span class="token comment" spellcheck="true">//        Person p = (Person) in.readObject();</span><span class="token comment" spellcheck="true">//        System.out.println(p);</span>        <span class="token comment" spellcheck="true">//序列化后26字节</span>        DataOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"d:/tmp/serde/person2.obj"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 顺序要严格一致         * 字段个数也要一致         */</span>        DataInputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"d:/tmp/serde/person2.obj"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> salary <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> salary <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 实现Serializable接口 */</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Person&amp;#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", salary="</span> <span class="token operator">+</span> salary <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'&amp;#125;'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">double</span> salary<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> salary<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token keyword">double</span> salary<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>案例:</p><p>数据:</p><pre class=" language-text"><code class="language-text">1363157985066     13726230503    00-FD-07-A4-72-B8:CMCC    120.196.100.82    i02.c.aliimg.com        24    27    2481    24681    2001363157995052     13826544101    5C-0E-8B-C7-F1-E0:CMCC    120.197.40.4            4    0    264    0    2001363157991076     13926435656    20-10-7A-28-CC-0A:CMCC    120.196.100.99            2    4    132    1512    2001363154400022     13926251106    5C-0E-8B-8B-B1-50:CMCC    120.197.40.4            4    0    240    0    2001363157993044     18211575961    94-71-AC-CD-E6-18:CMCC-EASY    120.196.100.99    iface.qiyi.com    视频网站    15    12    1527    2106    2001363157995074     84138413    5C-0E-8B-8C-E8-20:7DaysInn    120.197.40.4    122.72.52.12        20    16    4116    1432    2001363157993055     13560439658    C4-17-FE-BA-DE-D9:CMCC    120.196.100.99            18    15    1116    954    2001363157995033     15920133257    5C-0E-8B-C7-BA-20:CMCC    120.197.40.4    sug.so.360.cn    信息安全    20    20    3156    2936    2001363157983019     13719199419    68-A1-B7-03-07-B1:CMCC-EASY    120.196.100.82            4    0    240    0    2001363157984041     13660577991    5C-0E-8B-92-5C-20:CMCC-EASY    120.197.40.4    s19.cnzz.com    站点统计    24    9    6960    690    2001363157973098     15013685858    5C-0E-8B-C7-F7-90:CMCC    120.197.40.4    rank.ie.sogou.com    搜索引擎    28    27    3659    3538    2001363157986029     15989002119    E8-99-C4-4E-93-E0:CMCC-EASY    120.196.100.99    www.umeng.com    站点统计    3    3    1938    180    2001363157992093     13560439658    C4-17-FE-BA-DE-D9:CMCC    120.196.100.99            15    9    918    4938    2001363157986041     13480253104    5C-0E-8B-C7-FC-80:CMCC-EASY    120.197.40.4            3    3    180    180    2001363157984040     13602846565    5C-0E-8B-8B-B6-00:CMCC    120.197.40.4    2052.flash2-http.qq.com    综合门户    15    12    1938    2910    2001363157995093     13922314466    00-FD-07-A2-EC-BA:CMCC    120.196.100.82    img.qfc.cn        12    12    3008    3720    2001363157982040     13502468823    5C-0A-5B-6A-0B-D4:CMCC-EASY    120.196.100.99    y0.ifengimg.com    综合门户    57    102    7335    110349    2001363157986072     18320173382    84-25-DB-4F-10-1A:CMCC-EASY    120.196.100.99    input.shouji.sogou.com    搜索引擎    21    18    9531    2412    2001363157990043     13925057413    00-1F-64-E1-E6-9A:CMCC    120.196.100.55    t3.baidu.com    搜索引擎    69    63    11058    48243    2001363157988072     13760778710    00-FD-07-A4-7B-08:CMCC    120.196.100.82            2    2    120    120    2001363157985066     13726238888    00-FD-07-A4-72-B8:CMCC    120.196.100.82    i02.c.aliimg.com        24    27    2481    24681    2001363157993055     13560436666    C4-17-FE-BA-DE-D9:CMCC    120.196.100.99            18    15    1116    954    2001363157985066     13726238888    00-FD-07-A4-72-B8:CMCC    120.196.100.82    i02.c.aliimg.com        24    27    10000    20000    200</code></pre><p>第二个字段: 手机号</p><p>倒数第二个字段: 上行流量</p><p>倒数第三个字段: 下行流量</p><p>统计    手机号消费的上行流量之和、下行流量之和、总流量</p><p>sql实现是如下：</p><p>select</p><p>sum(上行),sum(下行),sum(上行+下行)</p><p>from</p><p>access</p><p>group by phone;</p><p>实现:</p><p>序列化类Access.java:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>mr<span class="token punctuation">.</span>ser<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Writable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>DataInput<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>DataOutput<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 自定义MR中的序列化对象 * 1. 实现writable接口 * 2. 重新readFields和write方法  注意顺序和类型 * 3. 建议重写toString * 4. 手工加上无参构造器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Access</span> <span class="token keyword">implements</span> <span class="token class-name">Writable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> up<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> down<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> sum<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Access</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Access</span><span class="token punctuation">(</span>String phone<span class="token punctuation">,</span> <span class="token keyword">long</span> up<span class="token punctuation">,</span> <span class="token keyword">long</span> down<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>up <span class="token operator">=</span> up<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>down <span class="token operator">=</span> down<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> up <span class="token operator">+</span> down<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Access&amp;#123;"</span> <span class="token operator">+</span>                <span class="token string">"phone='"</span> <span class="token operator">+</span> phone <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", up="</span> <span class="token operator">+</span> up <span class="token operator">+</span>                <span class="token string">", down="</span> <span class="token operator">+</span> down <span class="token operator">+</span>                <span class="token string">", sum="</span> <span class="token operator">+</span> sum <span class="token operator">+</span>                <span class="token string">'&amp;#125;'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> phone<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPhone</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> up<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token keyword">long</span> up<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>up <span class="token operator">=</span> up<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> down<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDown</span><span class="token punctuation">(</span><span class="token keyword">long</span> down<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>down <span class="token operator">=</span> down<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSum</span><span class="token punctuation">(</span><span class="token keyword">long</span> sum<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//序列化</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>DataOutput out<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>up<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>down<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>up <span class="token operator">+</span> down<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFields</span><span class="token punctuation">(</span>DataInput in<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//反序列化和序列化方法的字段数和顺序一定要一致</span>        phone <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        up <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        down <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>实现类AccessDriver.java:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>mr<span class="token punctuation">.</span>ser<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span>FileUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>Path<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>LongWritable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>NullWritable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Job<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Mapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Reducer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span>FileInputFormat<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span>FileOutputFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccessDriver</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String input <span class="token operator">=</span> <span class="token string">"data/access.log"</span><span class="token punctuation">;</span>        String output <span class="token operator">=</span> <span class="token string">"out/access"</span><span class="token punctuation">;</span>        Configuration configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1、获取Job对象</span>        Job job <span class="token operator">=</span> Job<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除输出文件夹</span>        FileUtils<span class="token punctuation">.</span><span class="token function">deleteFile</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2、设置class</span>        job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span>AccessDriver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3、设置Mapper和Reducer</span>        job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span>MyMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span>MyReducer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4、设置Mapper阶段输出数据的key和value的类型</span>        job<span class="token punctuation">.</span><span class="token function">setMapOutputKeyClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setMapOutputValueClass</span><span class="token punctuation">(</span>Access<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5、设置Reducer阶段输出数据的key和value的类型</span>        job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span>NullWritable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span>Access<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6、设置输入和输出数据的路径</span>        FileInputFormat<span class="token punctuation">.</span><span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputFormat<span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 7、提交Job</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>LongWritable<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Access<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span>LongWritable key<span class="token punctuation">,</span> Text value<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> splits <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * 第二个字段: 手机号             * 倒数第二个字段: 上行流量             * 倒数第三个字段: 下行流量             */</span>            String phone <span class="token operator">=</span> splits<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> up <span class="token operator">=</span> Long<span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>splits<span class="token punctuation">[</span>splits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> down <span class="token operator">=</span> Long<span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>splits<span class="token punctuation">[</span>splits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Access</span><span class="token punctuation">(</span>phone <span class="token punctuation">,</span> up<span class="token punctuation">,</span> down<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> Access<span class="token punctuation">,</span> NullWritable<span class="token punctuation">,</span> Access<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span>Text phone<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>Access<span class="token operator">></span> values<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> ups <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> downs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Access access <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ups <span class="token operator">+=</span> access<span class="token punctuation">.</span><span class="token function">getUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                downs <span class="token operator">+=</span> access<span class="token punctuation">.</span><span class="token function">getDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>NullWritable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Access</span><span class="token punctuation">(</span>phone<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ups<span class="token punctuation">,</span> downs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>注:分布式计算,相互之间没有依赖关系,并行化来处理性能更高(前提是资源足够的情况下)</p><p>MapReduce作业:</p><p>​    在执行的时候,是有一个切片的过程(Input ==&gt; InputSplit)</p><p>​    InputSplit ==&gt; MapTask</p><p>​    InputSplit ==&gt; BlockSize</p><p>​    调整InputSplit的可能有,但是极少,一般都是调整Reduce</p><p>MR的作业执行流程:</p><pre class=" language-java"><code class="language-java">job<span class="token punctuation">.</span>waitForCompletion<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cluster</span><span class="token punctuation">(</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        JobSubmitter submitter    <span class="token comment" spellcheck="true">//作业提交器</span>        <span class="token function">submitJobInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//</span>            <span class="token function">checkSpecs</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span>            Path submitJobDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>jobStagingArea<span class="token punctuation">,</span> jobId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">copyAndConfigureFiles</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> submitJobDir<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//</span>            Path submitJobFile <span class="token operator">=</span> JobSubmissionFiles<span class="token punctuation">.</span><span class="token function">getJobConfPath</span><span class="token punctuation">(</span>submitJobDir<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//计算map的切片数量</span>            <span class="token keyword">int</span> maps <span class="token operator">=</span> <span class="token function">writeSplits</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> submitJobDir<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//写入到job.xml</span>            <span class="token function">writeConf</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> submitJobFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop总结</title>
      <link href="2019/03/21/hadoop-zong-jie/"/>
      <url>2019/03/21/hadoop-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="一-Hadoop伪分布式集群部署步骤及总结"><a href="#一-Hadoop伪分布式集群部署步骤及总结" class="headerlink" title="一 Hadoop伪分布式集群部署步骤及总结:"></a>一 Hadoop伪分布式集群部署步骤及总结:</h3><h4 id="1-1-JDK部署"><a href="#1-1-JDK部署" class="headerlink" title="1.1 JDK部署"></a>1.1 JDK部署</h4><h4 id="1-2-解压"><a href="#1-2-解压" class="headerlink" title="1.2 解压"></a>1.2 解压</h4><p>软连接两个使用场景:</p><p>a.版本切换，脚本应用是配置的hadoop，是无感知的</p><p>b.小盘换大盘<br>/ 系统盘 100G /ruozedata 80G<br>/data01 数据盘 2T</p><h4 id="1-3-配置ssh信任关系"><a href="#1-3-配置ssh信任关系" class="headerlink" title="1.3 配置ssh信任关系"></a>1.3 配置ssh信任关系</h4><p>用户家目录下有.ssh文件则删掉(生产要备份)</p><p>1.3.1 生成密钥</p><p>ssh-keygen</p><p>1.3.2</p><p>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</p><p>查看信任关系是否配置成功</p><p>ssh hadoop@warehouse001 date</p><h4 id="1-4-HDFS配置修改"><a href="#1-4-HDFS配置修改" class="headerlink" title="1.4 HDFS配置修改"></a>1.4 HDFS配置修改</h4><p>core-site.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://warehouse001:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    配置回收站清理时间一周    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.trash.interval<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>10080<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    临时目录修改,默认linux的/tmp会30天自动删除,所以需要修改    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/home/hadoop/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>hdfs-site.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.secondary.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>warehouse001:50090<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.secondary.https-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>warehouse001:50091<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>hadoop-env.sh        ==&gt;修改JAVA_HOME</p><p>伪分布式HDFS三个节点:</p><p>namenode    主节点,维护文件被切割那个块,这些块存放到哪些机器</p><p>secondary namenode    第二节点,备份主节点,有延迟</p><p>datanode    数据节点,实际存放数据</p><p>初始化namenode:</p><pre><code>bin/hdfs namenode -format</code></pre><p>启namenode进程:</p><pre><code>sbin/start-dfs.sh</code></pre><p>mapreduce运行测试:</p><pre><code>hadoop jar /home/hadoop/app/hadoop/share/hadoop/mapreduce2/hadoop-mapreduce-examples-2.6.0-cdh5.16.2.jar grep input output &#39;dfs[a-z.]+&#39;</code></pre><h4 id="1-5-YARN配置修改"><a href="#1-5-YARN配置修改" class="headerlink" title="1.5    YARN配置修改"></a>1.5    YARN配置修改</h4><p>修改mapred-site.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     调整yarn端口号,防止挖矿     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>yarn.resourcemanager.hostname<span class="token entity" title="&#125;">&amp;#125;</span>:7776<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h4 id="1-6-小文件的处理方式"><a href="#1-6-小文件的处理方式" class="headerlink" title="1.6 小文件的处理方式:"></a>1.6 小文件的处理方式:</h4><p>1.数据在传输到HDFS之前提前合并</p><p>2.数据已经落地到HDFS,在业务的低谷期编写脚本定时合并冷文件</p><h4 id="1-7-各节点的作用"><a href="#1-7-各节点的作用" class="headerlink" title="1.7 各节点的作用"></a>1.7 各节点的作用</h4><p>namenode:</p><p>1.文件的大小</p><p>2.文件的目录结构</p><p>3.文件的属性    权限    副本数    创建时间    </p><p>4.一个文件被对应切割哪些数据块对应分配在哪些datanode</p><p>作用:</p><p>管理文件系统的命名空间,就是维护文件系统树的文件和文件夹</p><p>镜像文件fsimage</p><p>secondary namenode:</p><p>1.拿到主节点的fsimage合并备份再推送给namenode,默认的checkpoint是一小时</p><p>datanode:</p><p>1.存储数据块和数据块的校验和</p><p>2.每隔一定的时间去发送blockreport</p><h4 id="1-8-HDFS写流程"><a href="#1-8-HDFS写流程" class="headerlink" title="1.8 HDFS写流程"></a>1.8 HDFS写流程</h4><p>1.Client调用FileSystem.create(filePath)方法,和NN进行RPC通信,NN会去check文件是否存在,是否有权限创建,假如都可以就创建一个新的文件,但是这时没有数据,是不关联block的,NN会根据文件的大小,根据块大小副本数,计算要上传多少的块和对应哪些DN节点上.最终这个信息返回给客户端FSDataOutputStream对象</p><p>2.Clinet调用FSDataOutputStream的write放法,根据副本放置策略,将第一个块的第一个副本写到DN1,写完复制到DN2,再复制到DN3,当三个副本写完,就返回一个按错了确认包给DN2,DN2接受到ack加上自己写完,发送ack给DN1,DN1接收到ack加上自己写完没救发送ack给客户端FSDataOutputStream对象,告诉它第一个块的三个副本写完了,以此类推写完所有块.</p><p>3.当所有的块全部写完了,Client调用FSDataOutputStream的close方法,关闭输入流.再次调用FileSystem.complete方法,告诉nn文件写成功.</p><p>注:伪分布式副本数可以设置副本数大于1,但是只有一个副本</p><h4 id="1-9-HDFS读流程"><a href="#1-9-HDFS读流程" class="headerlink" title="1.9 HDFS读流程"></a>1.9 HDFS读流程</h4><p>1.Client调用FileSystem的open(filePath),与NN进行RPC通信,返回改文件的部分或者全部的block列表,也就是返回FSDataInputStream对象</p><p>2.Client调度FSDataInputStream对象的read方法,与第一个块的最近的DN进行读取,读取完成后悔check,假如ok就关闭与DN通信,如果不OK就会记录块+DN的信息,下次不从这个节点读取.然后与第二个块的最近的DN进行读取,以此类推.假如当block的列表全部读取完成文件还没结束,就调用FileSystem从NN获取下一批次的block列表.</p><p>3.Client调用FSDataInputStream的close方法,关闭输入流.</p><h4 id="1-10-副本放置策略"><a href="#1-10-副本放置策略" class="headerlink" title="1.10 副本放置策略"></a>1.10 副本放置策略</h4><p>就近原则</p><p>第一个副本放置在上传的DN节点上,节省IO,假如非DN节点,就随机挑选一个磁盘不太慢,CPU不太忙的节点</p><p>第二个副本放置在第一个副本的不同机架的某个节点上</p><p>第三个副本放置在同一机架的不同节点上</p><p>其他的随机分配.</p><h4 id="1-11-SNN"><a href="#1-11-SNN" class="headerlink" title="1.11 SNN"></a>1.11 SNN</h4><p>1.snn执行checkpoint动作的时候,nn会停止使用当前的edit文件,SNN会远程下载NN节点的edits和fsimage 并合并为新的fsimage.ckpt,然后发送给NN,生成新的fsimage和edits.</p><h4 id="1-12-HDFS常用命令"><a href="#1-12-HDFS常用命令" class="headerlink" title="1.12 HDFS常用命令"></a>1.12 HDFS常用命令</h4><p>hadoop fs -cat</p><p>hadoop fs -ls</p><p>hadoop fs -mkdir</p><p>hadoop fs -mv</p><p>hadoop fs -put</p><p>hadoop fs -get</p><p>hadoop fs -tail</p><p>hadoop version</p><p>hadoop checknative</p><p>hadoop classpath</p><p>hdfs dfs = hadoop fs</p><p>hdfs dfs -find</p><p>hdfs dfs -cat</p><p>hdfs dfs -chown</p><p>hdfs dfs -chmod</p><p>hdfs dfs -copyToLocal = get</p><p>hdfs dfs -copyFromLocal = put</p><p>hdfs dfs -cp</p><p>hdfs dfs -du</p><p>hdfs dfs -rmdir</p><p>dfs管理命令操作:</p><p>hdfs dfsadmin -report</p><p>hdfs dfsadmin -safemode</p><p>hdfs dfsadmin -saveNameSpace</p><p>hdfs haadmin</p><p>健康检查:</p><p>hdfs fsck</p><p>安全模式:</p><p>hdfs dfsadmin -safemode -get</p><p>hdfs dfsadmin -safemode enter</p><p>安全模式下可读不可写</p><p>安全模式解决方法,一般先尝试手动执行命令,离开安全模式.</p><p>回收站:</p><p>配置core-site.xml</p><p>fs.trash.interval默认参数是0,是不开启的,单位分钟,按生产实际需要配置.</p><p>各个节点平衡:</p><p>sbin/start-balancer.sh</p><p>threshold ==&gt; 每个节点磁盘使用率-平均磁盘使用率&lt;10%</p><p>每天/周业务低谷定时执行</p><p>配置hdfs-site.xml</p><p>dfs.datanode.balance.bandwidthPerSec ==&gt; 控制数据平衡传输带宽,默认10M,建议50M</p><p>hdfs dfsadmin -report查看个节点使用率</p><p>单个节点多块磁盘平衡:</p><p>磁盘挂载目录:</p><table><thead><tr><th align="left">dfs.datanode.data.dir</th><th align="left">file://${hadoop.tmp.dir}/dfs/data</th></tr></thead><tbody><tr><td align="left"></td><td align="left"></td></tr></tbody></table><pre class=" language-xml"><code class="language-xml">复制<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.data.dir <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/data01/dfs/dn,/data02/dfs/dn,/data03/dfs/dn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>#具体看磁盘挂载路径</code></pre><p>hdfs-default.xml配置节点信息</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.disk.balancer.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p>hdfs diskbalancer -plan warehouse001(主机名)</p><p>hdfs diskbalancer -execute warehouse001.plan.json</p><p>hdfs diskbalancer -query warehouse001</p><h4 id="1-13-container"><a href="#1-13-container" class="headerlink" title="1.13 container"></a>1.13 container</h4><p>一定的内存和cpu的资源组合</p><p>在内存足够的情况下,适当增加cpu vcore来提升计算的并行度,提高效率</p><p> vcore一般不超过5个</p><h4 id="1-14-MR-ON-YARN"><a href="#1-14-MR-ON-YARN" class="headerlink" title="1.14 MR ON YARN"></a>1.14 MR ON YARN</h4><p><img src="https://i.loli.net/2020/11/30/TSgKNLn27QYtJ9j.png"></p><h4 id="1-15-split分片规则"><a href="#1-15-split分片规则" class="headerlink" title="1.15 split分片规则:"></a>1.15 split分片规则:</h4><p>1.块大小</p><p>2.文件个数</p><h4 id="1-16-小文件的危害"><a href="#1-16-小文件的危害" class="headerlink" title="1.16 小文件的危害"></a>1.16 小文件的危害</h4><p>1.小文件过多会造成NN压力过大</p><p>2.在计算上会造成资源的浪费(分配container)</p><h4 id="1-17-生产上如何调优container参数"><a href="#1-17-生产上如何调优container参数" class="headerlink" title="1.17 生产上如何调优container参数"></a>1.17 生产上如何调优container参数</h4><p>以128G 16core为例</p><p>系统安装预留20%    ==&gt; 26G</p><p>DN ==&gt; 2G</p><p>NM ==&gt; 4G</p><p>则container总内存为96G</p><p>yarn-site.xml配置</p><p><strong>yarn.nodemanager.resource.cpu-vcores 32</strong></p><p><strong>yarn.scheduler.minimum-allocation-vcores 1</strong></p><p><strong>yarn.scheduler.maximum-allocation-vcores 4</strong> 极限情况下是有8个container</p><p>CDH官方经过大量验证,经验值,container容器最大分配vcore不要超过5,故一般生产设置4</p><p><strong>yarn.nodemanager.resource.memory-mb 96G</strong> </p><p><strong>yarn.scheduler.minimum-allocation-mb 1G</strong></p><p><strong>yarn.scheduler.maximum-allocation-mb 12G</strong> 极限情况下,是有8个container</p><h4 id="1-18-调度器"><a href="#1-18-调度器" class="headerlink" title="1.18 调度器"></a>1.18 调度器</h4><p><strong>FIFO</strong>:先进先出调度器,在进行资源分配的时候，先给队列中最头上的应用进行分配资源，待最头上的应用需求满足后再给下一个分配，以此类推。</p><p><strong>Capacity Scheduler</strong>:计算调度器.有一个专门的队列用来运行小任务，但是为小任务专门设置一个队列会预先占用一定的集群资源，这就导致大任务的执行时间会落后于使用FIFO调度器时的时间。</p><p><strong>FairScheduler</strong>:公平调度器.在Fair调度器中，我们不需要预先占用一定的系统资源，Fair调度器会为所有运行的job动态的调整系统资源。当第一个大job提交时，只有这一个job在运行，此时它获得了所有集群资源；当第二个小任务提交后，Fair调度器会分配一半资源给这个小任务，让这两个任务公平的共享集群资源。但是后提交的任务的资源分配会有一定的延迟.</p><h4 id="1-19-常用端口号"><a href="#1-19-常用端口号" class="headerlink" title="1.19 常用端口号"></a>1.19 常用端口号</h4><table><thead><tr><th>HDFS</th><th>DateNode</th><th>50010</th><th>dfs.datanode.address</th><th>datanode服务端口，用于数据传输</th></tr></thead><tbody><tr><td>HDFS</td><td>DateNode</td><td>50075</td><td>dfs.datanode.http.address</td><td>http服务的端口</td></tr><tr><td>HDFS</td><td>DateNode</td><td>50475</td><td>dfs.datanode.https.address</td><td>http服务的端口</td></tr><tr><td>HDFS</td><td>DateNode</td><td>50020</td><td>dfs.datanode.ipc.address</td><td>ipc服务的端口</td></tr><tr><td>HDFS</td><td>NameNode</td><td>50070</td><td>dfs.namenode.http-address</td><td>http服务的端口</td></tr><tr><td>HDFS</td><td>NameNode</td><td>50470</td><td>dfs.namenode.https-address</td><td>https服务的端口</td></tr><tr><td>HDFS</td><td>NameNode</td><td>8020</td><td>fs.defaultFS</td><td>接收Client连接的RPC端口，用于获取文件系统metadata信息。</td></tr><tr><td>HDFS</td><td>journalnode</td><td>8485</td><td>dfs.journalnode.rpc-address</td><td>RPC服务</td></tr><tr><td>HDFS</td><td>journalnode</td><td>8480</td><td>dfs.journalnode.http-address</td><td>HTTP服务</td></tr><tr><td>HDFS</td><td>ZKFC</td><td>8019</td><td>dfs.ha.zkfc.port</td><td>ZooKeeper FailoverController，用于NN HA</td></tr><tr><td>YARN</td><td>ResourceManage</td><td>8032</td><td>yarn.resourcemanager.address</td><td>RM的applications manager(ASM)端口</td></tr><tr><td>YARN</td><td>ResourceManage</td><td>8030</td><td>yarn.resourcemanager.scheduler.address</td><td>scheduler组件的IPC端口</td></tr><tr><td>YARN</td><td>ResourceManage</td><td>8031</td><td>yarn.resourcemanager.resource-tracker.address</td><td>IPC</td></tr><tr><td>YARN</td><td>ResourceManage</td><td>8033</td><td>yarn.resourcemanager.admin.address</td><td>IPC</td></tr><tr><td>YARN</td><td>ResourceManage</td><td>8088</td><td>yarn.resourcemanager.webapp.address</td><td>http服务端口</td></tr><tr><td>YARN</td><td>NodeManager</td><td>8040</td><td>yarn.nodemanager.localizer.address</td><td>localizer IPC</td></tr><tr><td>YARN</td><td>NodeManager</td><td>8042</td><td>yarn.nodemanager.webapp.address</td><td>http服务端口</td></tr><tr><td>YARN</td><td>NodeManager</td><td>8041</td><td>yarn.nodemanager.address</td><td>NM中container manager的端口</td></tr><tr><td>YARN</td><td>JobHistory Server</td><td>10020</td><td>mapreduce.jobhistory.address</td><td>IPC</td></tr><tr><td>YARN</td><td>JobHistory Server</td><td>19888</td><td>mapreduce.jobhistory.webapp.address</td><td>http服务端口</td></tr></tbody></table><h4 id="1-20-HDFS进程启动命令"><a href="#1-20-HDFS进程启动命令" class="headerlink" title="1.20 HDFS进程启动命令"></a>1.20 HDFS进程启动命令</h4><p><strong>起进程命令:</strong></p><p>第一次启动时初始化HDFS</p><pre><code>[hdfs]$ $HADOOP_HOME/bin/hdfs namenode -format &lt;cluster_name&gt;</code></pre><p>开启namenode:</p><pre><code>[hdfs]$ $HADOOP_HOME/bin/hdfs --daemon start namenode</code></pre><p>开启datanode:</p><pre><code>[hdfs]$ $HADOOP_HOME/bin/hdfs --daemon start datanode</code></pre><p>开启HDFS进程:</p><pre><code>[hdfs]$ $HADOOP_HOME/sbin/start-dfs.sh</code></pre><p>开启resourcemanager进程:</p><pre><code>[yarn]$ $HADOOP_HOME/bin/yarn --daemon start resourcemanager</code></pre><p>开启nodemanager进程:</p><pre><code>[yarn]$ $HADOOP_HOME/bin/yarn --daemon start nodemanager</code></pre><p>开启proxyserver进程</p><pre><code>[yarn]$ $HADOOP_HOME/bin/yarn --daemon start proxyserver</code></pre><p>开启YARN进程:</p><pre><code>[yarn]$ $HADOOP_HOME/sbin/start-yarn.sh</code></pre><p>开启日志节点:</p><pre><code>[mapred]$ $HADOOP_HOME/bin/mapred --daemon start historyserver</code></pre><p><strong>关进程命令:</strong></p><p>关闭namenode:</p><pre><code>[hdfs]$ $HADOOP_HOME/bin/hdfs --daemon stop namenode</code></pre><p>关闭datanode:</p><pre><code>[hdfs]$ $HADOOP_HOME/bin/hdfs --daemon stop datanode</code></pre><p>关闭HDFS进程:</p><pre><code>[hdfs]$ $HADOOP_HOME/sbin/stop-dfs.sh</code></pre><p>关闭resourcemanager进程:</p><pre><code>[yarn]$ $HADOOP_HOME/bin/yarn --daemon stop resourcemanager</code></pre><p>关闭nodemanager进程:</p><pre><code>[yarn]$ $HADOOP_HOME/bin/yarn --daemon stop nodemanager</code></pre><p>关闭YARN进程:</p><pre><code>[yarn]$ $HADOOP_HOME/sbin/stop-yarn.sh</code></pre><p>关闭proxyserver进程</p><pre><code>[yarn]$ $HADOOP_HOME/bin/yarn stop proxyserver</code></pre><p>关闭日志节点:</p><pre><code>[mapred]$ $HADOOP_HOME/bin/mapred --daemon stop historyserver</code></pre><p>开启所有HDFS、YARN节点</p><pre><code>$ $HADOOP_HOME/sbin/start-all.sh</code></pre><p>关闭所有HDFS、YARN节点</p><pre><code>$ $HADOOP_HOME/sbin/stop-all.sh</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala之方法</title>
      <link href="2019/03/21/scala02-fang-fa/"/>
      <url>2019/03/21/scala02-fang-fa/</url>
      
        <content type="html"><![CDATA[<pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>scalademo<span class="token punctuation">.</span>bigdata<span class="token keyword">object</span> HelloWorld <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   *   */</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">val</span> money <span class="token operator">=</span> <span class="token number">25000</span>  println<span class="token punctuation">(</span>money<span class="token punctuation">)</span>  <span class="token keyword">val</span> welcome <span class="token operator">=</span>    <span class="token string">"""      |你好,      |我是scala!      |"""</span><span class="token punctuation">.</span>stripMargin  <span class="token keyword">val</span> a <span class="token operator">=</span> s<span class="token string">"$welcome"</span>  println<span class="token punctuation">(</span>welcome<span class="token punctuation">)</span>  println<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>scalademo<span class="token punctuation">.</span>bigdata<span class="token keyword">object</span> OperatorApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里会丢失小数位,scala是有类型推测,默认是int类型</span>    <span class="token keyword">val</span> a <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">/</span> <span class="token number">3</span>    println<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//这里的输出结果为6.0,两个int类型的结果输出为6,转换为double是6.0</span>    <span class="token keyword">val</span> b<span class="token operator">:</span><span class="token builtin">Double</span> <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">/</span> <span class="token number">3</span>    println<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//取模</span>    <span class="token keyword">val</span> c <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">%</span> <span class="token number">3</span>    println<span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//运算符都支持,>,>=,&lt;,&lt;=,&amp;&amp;,||,!等</span>    <span class="token comment" spellcheck="true">//scala是没有++操作的,使用t += 10</span>    <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">10</span>    d <span class="token operator">+=</span> <span class="token number">10</span>    println<span class="token punctuation">(</span>d<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>scalademo<span class="token punctuation">.</span>bigdata<span class="token comment" spellcheck="true">/** * val  var * 值  变量 * * val修饰的是"不可变的" final val名字 * var修饰的是可变的 var 名字:类型 = xx */</span><span class="token keyword">object</span> ValVarApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> money <span class="token operator">=</span> <span class="token number">10000</span>    <span class="token comment" spellcheck="true">//money = 13000 这样是不可以改变的</span>    <span class="token comment" spellcheck="true">//这里的user.name的值是可变的,name是var修饰的,而user=null死不可以的</span>    <span class="token keyword">val</span> user <span class="token operator">=</span> <span class="token keyword">new</span> User<span class="token punctuation">(</span><span class="token punctuation">)</span>    user<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"xiaohong"</span>    println<span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//user = null 这里会空指针,NPE报错,指向的是空</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">class</span> User<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"xiaoming"</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>scalademo<span class="token punctuation">.</span>bigdata<span class="token comment" spellcheck="true">/** * if else * switch * */</span><span class="token keyword">object</span> IfApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> a <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span>s<span class="token string">"$a 是偶数"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span>s<span class="token string">"$a 是奇数"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token number">50</span>    <span class="token keyword">val</span> y <span class="token operator">=</span> <span class="token number">30</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> x    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> x    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> y    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//简化</span>   <span class="token keyword">val</span> res <span class="token operator">=</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>y<span class="token punctuation">)</span> x <span class="token keyword">else</span> y    println<span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>scalademo<span class="token punctuation">.</span>bigdata<span class="token keyword">import</span> util<span class="token punctuation">.</span>control<span class="token punctuation">.</span>Breaks<span class="token punctuation">.</span>_<span class="token keyword">object</span> DoWhile <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    //while的用法    var a = 1    while(a&lt;=10)&amp;#123;     // println(a)      a += 1    &amp;#125;    //do while用法    var b = 1    do&amp;#123;      //println(b)      b += 1    &amp;#125;while (b&lt;=10)    /**     * 返回值  方法体最后一行默认为返回值     * 这里返回的是(),是Unit类型,while返回值是Unit     */</span>    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      c <span class="token operator">+=</span> <span class="token number">1</span>      c    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      sum <span class="token operator">+=</span> num      num <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">/</span>    <span class="token comment" spellcheck="true">/**     *如果循环到某个值跳出的话,可以引用java的break     * import util.control.Breaks._ 导入java的break     */</span><span class="token comment" spellcheck="true">//    var x = 1</span><span class="token comment" spellcheck="true">//    //不能被2整除时会退出</span><span class="token comment" spellcheck="true">//    breakable&amp;#123;</span><span class="token comment" spellcheck="true">//      while(x&lt;20)&amp;#123;</span><span class="token comment" spellcheck="true">//        println(x + "...")</span><span class="token comment" spellcheck="true">//        x += 1</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        if (x %2 != 0 )&amp;#123;</span><span class="token comment" spellcheck="true">//          break</span><span class="token comment" spellcheck="true">//        &amp;#125;</span><span class="token comment" spellcheck="true">//      &amp;#125;</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    //取1-20的奇数</span><span class="token comment" spellcheck="true">//    var y = 0</span><span class="token comment" spellcheck="true">//    //不能被2整除时会退出</span><span class="token comment" spellcheck="true">//      while(y&lt;20)&amp;#123;</span><span class="token comment" spellcheck="true">//        breakable &amp;#123;</span><span class="token comment" spellcheck="true">//          y += 1</span><span class="token comment" spellcheck="true">//          if (y % 2 != 0) &amp;#123;</span><span class="token comment" spellcheck="true">//            println(y + "...")</span><span class="token comment" spellcheck="true">//            break</span><span class="token comment" spellcheck="true">//          &amp;#125;else&amp;#123;</span><span class="token comment" spellcheck="true">//            println(s"$y 偶数继续走")</span><span class="token comment" spellcheck="true">//          &amp;#125;</span><span class="token comment" spellcheck="true">//        &amp;#125;</span><span class="token comment" spellcheck="true">//      &amp;#125;</span><span class="token comment" spellcheck="true">//    //for循环</span><span class="token comment" spellcheck="true">//    for(i &lt;- 1 to 10)&amp;#123;  //to是左闭右闭的 = 1.to(10)</span><span class="token comment" spellcheck="true">//      println(i)</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    //until</span><span class="token comment" spellcheck="true">//    for(i &lt;- 1 until 10)&amp;#123;  //until是左闭右开的 = 1.until(10)</span><span class="token comment" spellcheck="true">//      println(i)</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    //1-10奇数</span><span class="token comment" spellcheck="true">//    for(i &lt;- 1.to(10,2))&amp;#123; //1.to(pram1,pram2) 第二哥参数是步长</span><span class="token comment" spellcheck="true">//      println(i)</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    for(i &lt;- 1 to 10 by 2)&amp;#123; //by 2等同步长</span><span class="token comment" spellcheck="true">//      println(i)</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    //逆序</span><span class="token comment" spellcheck="true">//    for(i &lt;- 10 to 1 by -1)&amp;#123; //by 2等同步长</span><span class="token comment" spellcheck="true">//      println(i)</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    //逆序</span><span class="token comment" spellcheck="true">//    for(i &lt;- 1 to 10 reverse)&amp;#123; //reverse 反转</span><span class="token comment" spellcheck="true">//      println(i)</span><span class="token comment" spellcheck="true">//    &amp;#125;</span>    <span class="token comment" spellcheck="true">/**     * Range 是左闭右开的     * Range(1,10,1) 第三个参数是步长,默认值是1     */</span><span class="token comment" spellcheck="true">//    //1-10 奇数</span><span class="token comment" spellcheck="true">//    for(i &lt;- 1 to 10)&amp;#123;</span><span class="token comment" spellcheck="true">//      if(i % 2 ==1)&amp;#123;</span><span class="token comment" spellcheck="true">//        println(i)</span><span class="token comment" spellcheck="true">//      &amp;#125;</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    //1-10 奇数 简化  循环守卫</span><span class="token comment" spellcheck="true">//    for(i &lt;- 1 to 10 if i % 2 == 1)&amp;#123;</span><span class="token comment" spellcheck="true">//        println(i)</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    //经典乘法口诀</span><span class="token comment" spellcheck="true">//    for(x &lt;- 1 to 9)&amp;#123;</span><span class="token comment" spellcheck="true">//      for(y &lt;- 1 to x)&amp;#123;</span><span class="token comment" spellcheck="true">//        print(s"$y * $x =$&amp;#123;x*y&amp;#125; \t")</span><span class="token comment" spellcheck="true">//      &amp;#125;</span><span class="token comment" spellcheck="true">//      println()</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    //简化</span><span class="token comment" spellcheck="true">//    for(x &lt;- 1 to 9;y &lt;- 1 to x)&amp;#123;</span><span class="token comment" spellcheck="true">//      print(s"$y * $x =$&amp;#123;x*y&amp;#125; \t")</span><span class="token comment" spellcheck="true">//      if(x == y)&amp;#123;</span><span class="token comment" spellcheck="true">//        println()</span><span class="token comment" spellcheck="true">//      &amp;#125;</span><span class="token comment" spellcheck="true">//    &amp;#125;</span>    <span class="token comment" spellcheck="true">/**     * for循环返回值问题     * 这里的输出结果为()     * 说明for的返回值也是Unit类型     */</span><span class="token comment" spellcheck="true">//    val res = for(x &lt;- 1 to 10) x*x</span><span class="token comment" spellcheck="true">//    println(res)</span><span class="token comment" spellcheck="true">//    //如果要取for循环的返回值,可以用yield</span><span class="token comment" spellcheck="true">//    val res = for(x &lt;- 1 to 10) yield x*x</span><span class="token comment" spellcheck="true">//    print(res)</span>    <span class="token comment" spellcheck="true">//转换大写</span>    <span class="token keyword">val</span> upper <span class="token operator">=</span><span class="token keyword">for</span><span class="token punctuation">(</span>x <span class="token keyword">&lt;-</span> <span class="token string">"Scala"</span><span class="token punctuation">)</span> <span class="token keyword">yield</span> x<span class="token punctuation">.</span>toUpper    println<span class="token punctuation">(</span>upper<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//链式写法</span>    println<span class="token punctuation">(</span><span class="token string">"Scala"</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> x<span class="token punctuation">.</span>toUpper<span class="token punctuation">)</span><span class="token punctuation">.</span>mkString<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>scalademo<span class="token punctuation">.</span>bigdata<span class="token keyword">import</span> scala<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>tailrec<span class="token keyword">object</span> FunctionApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * Scala中方法或者函数   * 方法和函数的区别   * 完整定义形式:def 方法名(参数名:参数类型):返回值类型=&amp;#123;方法体&amp;#125;   * 方法体最后一行默认为返回值   */</span><span class="token comment" spellcheck="true">//  def test01(): Unit =&amp;#123;</span><span class="token comment" spellcheck="true">//    val a = 10</span><span class="token comment" spellcheck="true">//    val b = 20</span><span class="token comment" spellcheck="true">//    val oper = "+"</span><span class="token comment" spellcheck="true">//    if(oper == "+")&amp;#123;</span><span class="token comment" spellcheck="true">//      println(a + b)</span><span class="token comment" spellcheck="true">//    &amp;#125;else if(oper == "-")&amp;#123;</span><span class="token comment" spellcheck="true">//      println(a - b)</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//  &amp;#125;</span>    <span class="token comment" spellcheck="true">//简单的求和</span><span class="token comment" spellcheck="true">//  def add(x:Int,y:Int):Int =&amp;#123;</span><span class="token comment" spellcheck="true">//    x + y</span><span class="token comment" spellcheck="true">//  &amp;#125;</span><span class="token comment" spellcheck="true">//  //当方法体只有一行时,=&amp;#123;&amp;#125;可以以直接省略</span><span class="token comment" spellcheck="true">//  def add2() = 1 + 2</span><span class="token comment" spellcheck="true">//  def sayHello=&amp;#123;</span><span class="token comment" spellcheck="true">//  println("Hello World ...")</span><span class="token comment" spellcheck="true">//&amp;#125;</span><span class="token comment" spellcheck="true">//  def fun1(a:Int): Unit =&amp;#123;</span><span class="token comment" spellcheck="true">//    def fun2(b:Int): Unit =&amp;#123;</span><span class="token comment" spellcheck="true">//      println(s"$a....$b...")</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    fun2(100)</span><span class="token comment" spellcheck="true">//  &amp;#125;</span><span class="token comment" spellcheck="true">//  def sayWorld(name:String): Unit =&amp;#123;</span><span class="token comment" spellcheck="true">//    println(s" $name World!")</span><span class="token comment" spellcheck="true">//  &amp;#125;</span>  <span class="token comment" spellcheck="true">/**   *命名参数  了解即可 命名参数,传入参数的顺序可以改变,但不建议   */</span>   <span class="token comment" spellcheck="true">// def speed(distance:Float,time:Float) = distance / time</span>  <span class="token comment" spellcheck="true">/**   * 变长参数   *  '*'表示可以传进来N个参数   *  注意变长参数只能放在入参的最后的参数中   */</span><span class="token comment" spellcheck="true">//  def sum2(x:Int,y:Int) = x + y</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//  def sum3(x:Int,y:Int,z:Int) = x + y +z</span>  <span class="token comment" spellcheck="true">//当有不确定个参数时,这样显然是行不通的</span>  <span class="token keyword">def</span> sum<span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">Int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token builtin">Int</span><span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ele <span class="token keyword">&lt;-</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      sum <span class="token operator">+=</span> ele    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    sum  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//打印出每个元素</span>  <span class="token keyword">def</span> printNums<span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">Int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    nums<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>x <span class="token keyword">=></span> println<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">val</span> array <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//阶乘  递归  一定要加参数类型</span>  <span class="token keyword">def</span> test<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span>    <span class="token keyword">else</span> x <span class="token operator">*</span> test<span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//当特别大时,堆栈溢出,可以使用尾递归</span>  <span class="token annotation punctuation">@tailrec</span>  <span class="token comment" spellcheck="true">//尾递归标识</span>  <span class="token keyword">def</span> test02<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span>acc<span class="token operator">:</span>BigInt<span class="token punctuation">)</span><span class="token operator">:</span>BigInt<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> acc    <span class="token keyword">else</span> test02<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>x <span class="token operator">*</span> acc<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//test01()</span>    <span class="token comment" spellcheck="true">//println(add(2, 3))</span>    <span class="token comment" spellcheck="true">//println(add2())</span>    <span class="token comment" spellcheck="true">//方法没有入参,括号都可以省略</span>    <span class="token comment" spellcheck="true">//println(add2)</span>    <span class="token comment" spellcheck="true">//println(sayHello)</span>    <span class="token comment" spellcheck="true">//fun1(10)</span>    <span class="token comment" spellcheck="true">//sayWorld("my")</span>   <span class="token comment" spellcheck="true">// println(speed(100,10))</span>    <span class="token comment" spellcheck="true">//println(sum2(2,3))</span>    <span class="token comment" spellcheck="true">//println(sum3(2,3,4))</span>    <span class="token comment" spellcheck="true">//println(sum(1,2,3,4,5))</span>    <span class="token comment" spellcheck="true">//也可以传入范围,但是需要特殊语法</span>    <span class="token comment" spellcheck="true">//println(sum(1 to 100 : _*))</span><span class="token comment" spellcheck="true">//    printNums(1,2,3,4,5)</span><span class="token comment" spellcheck="true">//    //打印数组的元素需要加:_*</span><span class="token comment" spellcheck="true">//    printNums(array :_*)</span>    println<span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//当传入5000时,就会报错</span>    println<span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>test02<span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span>acc<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala之方法</title>
      <link href="2019/03/21/scala03oo/"/>
      <url>2019/03/21/scala03oo/</url>
      
        <content type="html"><![CDATA[<pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>scalademo<span class="token punctuation">.</span>bigdata<span class="token keyword">object</span> HelloWorld <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   *   */</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">val</span> money <span class="token operator">=</span> <span class="token number">25000</span>  println<span class="token punctuation">(</span>money<span class="token punctuation">)</span>  <span class="token keyword">val</span> welcome <span class="token operator">=</span>    <span class="token string">"""      |你好,      |我是scala!      |"""</span><span class="token punctuation">.</span>stripMargin  <span class="token keyword">val</span> a <span class="token operator">=</span> s<span class="token string">"$welcome"</span>  println<span class="token punctuation">(</span>welcome<span class="token punctuation">)</span>  println<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>scalademo<span class="token punctuation">.</span>bigdata<span class="token keyword">object</span> OperatorApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里会丢失小数位,scala是有类型推测,默认是int类型</span>    <span class="token keyword">val</span> a <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">/</span> <span class="token number">3</span>    println<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//这里的输出结果为6.0,两个int类型的结果输出为6,转换为double是6.0</span>    <span class="token keyword">val</span> b<span class="token operator">:</span><span class="token builtin">Double</span> <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">/</span> <span class="token number">3</span>    println<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//取模</span>    <span class="token keyword">val</span> c <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">%</span> <span class="token number">3</span>    println<span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//运算符都支持,>,>=,&lt;,&lt;=,&amp;&amp;,||,!等</span>    <span class="token comment" spellcheck="true">//scala是没有++操作的,使用t += 10</span>    <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">10</span>    d <span class="token operator">+=</span> <span class="token number">10</span>    println<span class="token punctuation">(</span>d<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>scalademo<span class="token punctuation">.</span>bigdata<span class="token comment" spellcheck="true">/** * val  var * 值  变量 * * val修饰的是"不可变的" final val名字 * var修饰的是可变的 var 名字:类型 = xx */</span><span class="token keyword">object</span> ValVarApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> money <span class="token operator">=</span> <span class="token number">10000</span>    <span class="token comment" spellcheck="true">//money = 13000 这样是不可以改变的</span>    <span class="token comment" spellcheck="true">//这里的user.name的值是可变的,name是var修饰的,而user=null死不可以的</span>    <span class="token keyword">val</span> user <span class="token operator">=</span> <span class="token keyword">new</span> User<span class="token punctuation">(</span><span class="token punctuation">)</span>    user<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"xiaohong"</span>    println<span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//user = null 这里会空指针,NPE报错,指向的是空</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">class</span> User<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"xiaoming"</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>scalademo<span class="token punctuation">.</span>bigdata<span class="token comment" spellcheck="true">/** * if else * switch * */</span><span class="token keyword">object</span> IfApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> a <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span>s<span class="token string">"$a 是偶数"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span>s<span class="token string">"$a 是奇数"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token number">50</span>    <span class="token keyword">val</span> y <span class="token operator">=</span> <span class="token number">30</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> x    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> x    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> y    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//简化</span>   <span class="token keyword">val</span> res <span class="token operator">=</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>y<span class="token punctuation">)</span> x <span class="token keyword">else</span> y    println<span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>scalademo<span class="token punctuation">.</span>bigdata<span class="token keyword">import</span> util<span class="token punctuation">.</span>control<span class="token punctuation">.</span>Breaks<span class="token punctuation">.</span>_<span class="token keyword">object</span> DoWhile <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    //while的用法    var a = 1    while(a&lt;=10)&amp;#123;     // println(a)      a += 1    &amp;#125;    //do while用法    var b = 1    do&amp;#123;      //println(b)      b += 1    &amp;#125;while (b&lt;=10)    /**     * 返回值  方法体最后一行默认为返回值     * 这里返回的是(),是Unit类型,while返回值是Unit     */</span>    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      c <span class="token operator">+=</span> <span class="token number">1</span>      c    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      sum <span class="token operator">+=</span> num      num <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">/</span>    <span class="token comment" spellcheck="true">/**     *如果循环到某个值跳出的话,可以引用java的break     * import util.control.Breaks._ 导入java的break     */</span><span class="token comment" spellcheck="true">//    var x = 1</span><span class="token comment" spellcheck="true">//    //不能被2整除时会退出</span><span class="token comment" spellcheck="true">//    breakable&amp;#123;</span><span class="token comment" spellcheck="true">//      while(x&lt;20)&amp;#123;</span><span class="token comment" spellcheck="true">//        println(x + "...")</span><span class="token comment" spellcheck="true">//        x += 1</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        if (x %2 != 0 )&amp;#123;</span><span class="token comment" spellcheck="true">//          break</span><span class="token comment" spellcheck="true">//        &amp;#125;</span><span class="token comment" spellcheck="true">//      &amp;#125;</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    //取1-20的奇数</span><span class="token comment" spellcheck="true">//    var y = 0</span><span class="token comment" spellcheck="true">//    //不能被2整除时会退出</span><span class="token comment" spellcheck="true">//      while(y&lt;20)&amp;#123;</span><span class="token comment" spellcheck="true">//        breakable &amp;#123;</span><span class="token comment" spellcheck="true">//          y += 1</span><span class="token comment" spellcheck="true">//          if (y % 2 != 0) &amp;#123;</span><span class="token comment" spellcheck="true">//            println(y + "...")</span><span class="token comment" spellcheck="true">//            break</span><span class="token comment" spellcheck="true">//          &amp;#125;else&amp;#123;</span><span class="token comment" spellcheck="true">//            println(s"$y 偶数继续走")</span><span class="token comment" spellcheck="true">//          &amp;#125;</span><span class="token comment" spellcheck="true">//        &amp;#125;</span><span class="token comment" spellcheck="true">//      &amp;#125;</span><span class="token comment" spellcheck="true">//    //for循环</span><span class="token comment" spellcheck="true">//    for(i &lt;- 1 to 10)&amp;#123;  //to是左闭右闭的 = 1.to(10)</span><span class="token comment" spellcheck="true">//      println(i)</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    //until</span><span class="token comment" spellcheck="true">//    for(i &lt;- 1 until 10)&amp;#123;  //until是左闭右开的 = 1.until(10)</span><span class="token comment" spellcheck="true">//      println(i)</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    //1-10奇数</span><span class="token comment" spellcheck="true">//    for(i &lt;- 1.to(10,2))&amp;#123; //1.to(pram1,pram2) 第二哥参数是步长</span><span class="token comment" spellcheck="true">//      println(i)</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    for(i &lt;- 1 to 10 by 2)&amp;#123; //by 2等同步长</span><span class="token comment" spellcheck="true">//      println(i)</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    //逆序</span><span class="token comment" spellcheck="true">//    for(i &lt;- 10 to 1 by -1)&amp;#123; //by 2等同步长</span><span class="token comment" spellcheck="true">//      println(i)</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    //逆序</span><span class="token comment" spellcheck="true">//    for(i &lt;- 1 to 10 reverse)&amp;#123; //reverse 反转</span><span class="token comment" spellcheck="true">//      println(i)</span><span class="token comment" spellcheck="true">//    &amp;#125;</span>    <span class="token comment" spellcheck="true">/**     * Range 是左闭右开的     * Range(1,10,1) 第三个参数是步长,默认值是1     */</span><span class="token comment" spellcheck="true">//    //1-10 奇数</span><span class="token comment" spellcheck="true">//    for(i &lt;- 1 to 10)&amp;#123;</span><span class="token comment" spellcheck="true">//      if(i % 2 ==1)&amp;#123;</span><span class="token comment" spellcheck="true">//        println(i)</span><span class="token comment" spellcheck="true">//      &amp;#125;</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    //1-10 奇数 简化  循环守卫</span><span class="token comment" spellcheck="true">//    for(i &lt;- 1 to 10 if i % 2 == 1)&amp;#123;</span><span class="token comment" spellcheck="true">//        println(i)</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    //经典乘法口诀</span><span class="token comment" spellcheck="true">//    for(x &lt;- 1 to 9)&amp;#123;</span><span class="token comment" spellcheck="true">//      for(y &lt;- 1 to x)&amp;#123;</span><span class="token comment" spellcheck="true">//        print(s"$y * $x =$&amp;#123;x*y&amp;#125; \t")</span><span class="token comment" spellcheck="true">//      &amp;#125;</span><span class="token comment" spellcheck="true">//      println()</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    //简化</span><span class="token comment" spellcheck="true">//    for(x &lt;- 1 to 9;y &lt;- 1 to x)&amp;#123;</span><span class="token comment" spellcheck="true">//      print(s"$y * $x =$&amp;#123;x*y&amp;#125; \t")</span><span class="token comment" spellcheck="true">//      if(x == y)&amp;#123;</span><span class="token comment" spellcheck="true">//        println()</span><span class="token comment" spellcheck="true">//      &amp;#125;</span><span class="token comment" spellcheck="true">//    &amp;#125;</span>    <span class="token comment" spellcheck="true">/**     * for循环返回值问题     * 这里的输出结果为()     * 说明for的返回值也是Unit类型     */</span><span class="token comment" spellcheck="true">//    val res = for(x &lt;- 1 to 10) x*x</span><span class="token comment" spellcheck="true">//    println(res)</span><span class="token comment" spellcheck="true">//    //如果要取for循环的返回值,可以用yield</span><span class="token comment" spellcheck="true">//    val res = for(x &lt;- 1 to 10) yield x*x</span><span class="token comment" spellcheck="true">//    print(res)</span>    <span class="token comment" spellcheck="true">//转换大写</span>    <span class="token keyword">val</span> upper <span class="token operator">=</span><span class="token keyword">for</span><span class="token punctuation">(</span>x <span class="token keyword">&lt;-</span> <span class="token string">"Scala"</span><span class="token punctuation">)</span> <span class="token keyword">yield</span> x<span class="token punctuation">.</span>toUpper    println<span class="token punctuation">(</span>upper<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//链式写法</span>    println<span class="token punctuation">(</span><span class="token string">"Scala"</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> x<span class="token punctuation">.</span>toUpper<span class="token punctuation">)</span><span class="token punctuation">.</span>mkString<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>scalademo<span class="token punctuation">.</span>bigdata<span class="token keyword">import</span> scala<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>tailrec<span class="token keyword">object</span> FunctionApp <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * Scala中方法或者函数   * 方法和函数的区别   * 完整定义形式:def 方法名(参数名:参数类型):返回值类型=&amp;#123;方法体&amp;#125;   * 方法体最后一行默认为返回值   */</span><span class="token comment" spellcheck="true">//  def test01(): Unit =&amp;#123;</span><span class="token comment" spellcheck="true">//    val a = 10</span><span class="token comment" spellcheck="true">//    val b = 20</span><span class="token comment" spellcheck="true">//    val oper = "+"</span><span class="token comment" spellcheck="true">//    if(oper == "+")&amp;#123;</span><span class="token comment" spellcheck="true">//      println(a + b)</span><span class="token comment" spellcheck="true">//    &amp;#125;else if(oper == "-")&amp;#123;</span><span class="token comment" spellcheck="true">//      println(a - b)</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//  &amp;#125;</span>    <span class="token comment" spellcheck="true">//简单的求和</span><span class="token comment" spellcheck="true">//  def add(x:Int,y:Int):Int =&amp;#123;</span><span class="token comment" spellcheck="true">//    x + y</span><span class="token comment" spellcheck="true">//  &amp;#125;</span><span class="token comment" spellcheck="true">//  //当方法体只有一行时,=&amp;#123;&amp;#125;可以以直接省略</span><span class="token comment" spellcheck="true">//  def add2() = 1 + 2</span><span class="token comment" spellcheck="true">//  def sayHello=&amp;#123;</span><span class="token comment" spellcheck="true">//  println("Hello World ...")</span><span class="token comment" spellcheck="true">//&amp;#125;</span><span class="token comment" spellcheck="true">//  def fun1(a:Int): Unit =&amp;#123;</span><span class="token comment" spellcheck="true">//    def fun2(b:Int): Unit =&amp;#123;</span><span class="token comment" spellcheck="true">//      println(s"$a....$b...")</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token comment" spellcheck="true">//    fun2(100)</span><span class="token comment" spellcheck="true">//  &amp;#125;</span><span class="token comment" spellcheck="true">//  def sayWorld(name:String): Unit =&amp;#123;</span><span class="token comment" spellcheck="true">//    println(s" $name World!")</span><span class="token comment" spellcheck="true">//  &amp;#125;</span>  <span class="token comment" spellcheck="true">/**   *命名参数  了解即可 命名参数,传入参数的顺序可以改变,但不建议   */</span>   <span class="token comment" spellcheck="true">// def speed(distance:Float,time:Float) = distance / time</span>  <span class="token comment" spellcheck="true">/**   * 变长参数   *  '*'表示可以传进来N个参数   *  注意变长参数只能放在入参的最后的参数中   */</span><span class="token comment" spellcheck="true">//  def sum2(x:Int,y:Int) = x + y</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//  def sum3(x:Int,y:Int,z:Int) = x + y +z</span>  <span class="token comment" spellcheck="true">//当有不确定个参数时,这样显然是行不通的</span>  <span class="token keyword">def</span> sum<span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">Int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token builtin">Int</span><span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ele <span class="token keyword">&lt;-</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      sum <span class="token operator">+=</span> ele    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    sum  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//打印出每个元素</span>  <span class="token keyword">def</span> printNums<span class="token punctuation">(</span>nums<span class="token operator">:</span><span class="token builtin">Int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    nums<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>x <span class="token keyword">=></span> println<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">val</span> array <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//阶乘  递归  一定要加参数类型</span>  <span class="token keyword">def</span> test<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span>    <span class="token keyword">else</span> x <span class="token operator">*</span> test<span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//当特别大时,堆栈溢出,可以使用尾递归</span>  <span class="token annotation punctuation">@tailrec</span>  <span class="token comment" spellcheck="true">//尾递归标识</span>  <span class="token keyword">def</span> test02<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span>acc<span class="token operator">:</span>BigInt<span class="token punctuation">)</span><span class="token operator">:</span>BigInt<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> acc    <span class="token keyword">else</span> test02<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>x <span class="token operator">*</span> acc<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//test01()</span>    <span class="token comment" spellcheck="true">//println(add(2, 3))</span>    <span class="token comment" spellcheck="true">//println(add2())</span>    <span class="token comment" spellcheck="true">//方法没有入参,括号都可以省略</span>    <span class="token comment" spellcheck="true">//println(add2)</span>    <span class="token comment" spellcheck="true">//println(sayHello)</span>    <span class="token comment" spellcheck="true">//fun1(10)</span>    <span class="token comment" spellcheck="true">//sayWorld("my")</span>   <span class="token comment" spellcheck="true">// println(speed(100,10))</span>    <span class="token comment" spellcheck="true">//println(sum2(2,3))</span>    <span class="token comment" spellcheck="true">//println(sum3(2,3,4))</span>    <span class="token comment" spellcheck="true">//println(sum(1,2,3,4,5))</span>    <span class="token comment" spellcheck="true">//也可以传入范围,但是需要特殊语法</span>    <span class="token comment" spellcheck="true">//println(sum(1 to 100 : _*))</span><span class="token comment" spellcheck="true">//    printNums(1,2,3,4,5)</span><span class="token comment" spellcheck="true">//    //打印数组的元素需要加:_*</span><span class="token comment" spellcheck="true">//    printNums(array :_*)</span>    println<span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//当传入5000时,就会报错</span>    println<span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>test02<span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span>acc<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop MapReduce编程01</title>
      <link href="2019/03/20/mr-bian-cheng-01/"/>
      <url>2019/03/20/mr-bian-cheng-01/</url>
      
        <content type="html"><![CDATA[<p>Map: 一个任务拆解成多个</p><p>Reduce:  把拆解开的任务做最后的聚合操作</p><p>使用场景: 离线、批计算</p><p>不适应场景：实时计算、迭代计算</p><p>shuffle：按照key的hash进行分发的，相同的key分到同一个reduce任务做最后的汇总操作</p><p>MapTask和ReduceTask都是以进程的方式运行的。</p><p><strong>MapReduce编程核心要素：</strong></p><p>​    <strong>Mapper</strong></p><p>​    <strong>Reducer</strong></p><p>​    <strong>Driver</strong></p><p>数据:</p><pre><code>hive,hadoop,flumehadoop,sparkhadoop,hive</code></pre><p>编写Mapper==&gt;WordCountMapper.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>wordcount<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IntWritable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>LongWritable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Mapper<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Maps input key/value pairs to a set of intermediate key/value pairs. * LongWritable: 输入的key类型 * Text: 输入的value类型 * Text: 拆解开的每个单词 * IntWritable: 1 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCountMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>LongWritable<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> IntWritable<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    IntWritable ONE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span>LongWritable key<span class="token punctuation">,</span> Text value<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取到内容</span>        String line <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 按照分隔符进行拆分</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> splits <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String word <span class="token operator">:</span> splits<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//写到context</span>            context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">,</span> ONE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>编写Reducer==&gt;WordCountReducer.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>wordcount<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IntWritable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Reducer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Reduces a set of intermediate values which share a key to a smaller set of values * 相同key的数据落在一块 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCountReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> IntWritable<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> IntWritable<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Reduce的输入就是Map的输出  (a,(1,1,1,1,1))     * @param key   单词  a     * @param values    (1,1,1,1,1)     * @param context   写出     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span>Text key<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>IntWritable<span class="token operator">></span> values<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对每个key进行聚合操作</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>IntWritable value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            count <span class="token operator">+=</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>编写Driver==&gt;WordCountDriver.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>wordcount<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span>FileUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>Path<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IntWritable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Job<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span>FileInputFormat<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span>FileOutputFormat<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 使用MR进行词频统计 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCountDriver</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String input <span class="token operator">=</span> <span class="token string">"data/wc.data"</span><span class="token punctuation">;</span>        String output <span class="token operator">=</span> <span class="token string">"out"</span><span class="token punctuation">;</span>        Configuration configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1、获取Job对象</span>        Job job <span class="token operator">=</span> Job<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2、设置class</span>        job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span>WordCountDriver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除输出文件夹</span>        FileUtils<span class="token punctuation">.</span><span class="token function">deleteFile</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3、设置Mapper和Reducer</span>        job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span>WordCountMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span>WordCountReducer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4、设置Mapper阶段输出数据的key和value的类型</span>        job<span class="token punctuation">.</span><span class="token function">setMapOutputKeyClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setMapOutputValueClass</span><span class="token punctuation">(</span>IntWritable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5、设置Reducer阶段输出数据的key和value的类型</span>        job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span>IntWritable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6、设置输入和输出数据的路径</span>        FileInputFormat<span class="token punctuation">.</span><span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputFormat<span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 7、提交Job</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Client端Driver==&gt;WordCountDriverV2.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>mr<span class="token punctuation">.</span>wordcount<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span>FileUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>Path<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IntWritable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Job<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span>FileInputFormat<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span>FileOutputFormat<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 使用MR编程完成词频统计 * * 数据读取: InputFormat * * 八股文编程 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCountDriverV2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// clinet端输入/输出目录参数</span>        String input <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        String output <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Configuration configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1、获取Job对象</span>        <span class="token keyword">final</span> Job job <span class="token operator">=</span> Job<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除输出文件夹</span>        FileUtils<span class="token punctuation">.</span><span class="token function">deleteFile</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2、设置class</span>        job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span>WordCountDriverV2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3、设置Mapper和Reducer</span>        job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span>WordCountMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span>WordCountReducer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4、设置Mapper阶段输出数据的key和value的类型</span>        job<span class="token punctuation">.</span><span class="token function">setMapOutputKeyClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setMapOutputValueClass</span><span class="token punctuation">(</span>IntWritable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5、设置Reducer阶段输出数据的key和value的类型</span>        job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span>IntWritable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6、设置输入和输出数据的路径</span>        FileInputFormat<span class="token punctuation">.</span><span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputFormat<span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 7、提交Job</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>pom.xml加入日志框架:</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-1.2-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-slf4j-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>随便copy一份log4j.properties到resources,控制台就可以打印日志了,可以更加清晰的定位错误.</p><p>模板方法模式：</p><p>​    定义一个操作算法的骨架        Interface、trait、abstract等</p><p>​    而将一些步骤延迟到子类中去实现</p><p>​    junit map</p>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop HA之集群部署</title>
      <link href="2019/03/15/hadoopha02/"/>
      <url>2019/03/15/hadoopha02/</url>
      
        <content type="html"><![CDATA[<h3 id="1-版本"><a href="#1-版本" class="headerlink" title="1.版本"></a>1.版本</h3><table><thead><tr><th><strong>组件名</strong></th><th><strong>版本</strong></th></tr></thead><tbody><tr><td>Centos</td><td>7.2</td></tr><tr><td>JRE</td><td>jdk-8u45-linux-x64.gz</td></tr><tr><td>Hadoop</td><td>hadoop-2.6.0-cdh5.16.2.tar.gz</td></tr><tr><td>Zookeeper</td><td>zookeeper-3.4.5-cdh5.16.2.tar.gz</td></tr></tbody></table><h3 id="2-主机规划"><a href="#2-主机规划" class="headerlink" title="2.主机规划"></a>2.主机规划</h3><table><thead><tr><th><strong>IP</strong></th><th><strong>Host</strong></th><th><strong>安装软件</strong></th><th align="left"><strong>进程</strong></th></tr></thead><tbody><tr><td>139.224.209.21</td><td>bigdata001</td><td>Hadoop、zookeeper</td><td align="left"><strong>NameNode</strong> <br/>DFSZKFailoverController <br/>JournalNode <br/>DataNode <br/><strong>ResourceManager</strong> <br/>JobHistoryServer<br/>NodeManager <br/>QuorumPeerMain</td></tr><tr><td>139.224.47.142</td><td>bigdata002</td><td>Hadoop、zookeeper</td><td align="left"><strong>NameNode</strong> <br/>DFSZKFailoverController <br/>JournalNode <br/>DataNode <br/><strong>ResourceManager</strong> <br/>NodeManager <br/>QuorumPeerMain</td></tr><tr><td>139.224.46.223</td><td>bigdata003</td><td>Hadoop、zookeeper</td><td align="left">JournalNode <br/>DataNode <br/>NodeManager<br/>QuorumPeerMain</td></tr></tbody></table><p>#当前系统配置 NameNode,ResourceManager 进程的 HA</p><h3 id="3-目录规划"><a href="#3-目录规划" class="headerlink" title="3.目录规划"></a>3.目录规划</h3><table><thead><tr><th align="left">名称</th><th align="center">路径</th><th align="center">备注</th></tr></thead><tbody><tr><td align="left">$HADOOP_HOME</td><td align="center">/home/hadoop/app</td><td align="center">软件</td></tr><tr><td align="left">Data</td><td align="center">/home/hadoop/data</td><td align="center">数据</td></tr><tr><td align="left">Log</td><td align="center">/home/hadoop/log</td><td align="center">日志</td></tr><tr><td align="left">hadoop.tmp.dir</td><td align="center">/home/hadoop/tmp</td><td align="center">临时目录</td></tr><tr><td align="left">$ZOOKEEPER_HOME</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>软件规划:</p><p>统一放在:</p><p>/home/hadoop/software/</p><h4 id="3-1-添加用户"><a href="#3-1-添加用户" class="headerlink" title="3.1 添加用户:"></a>3.1 添加用户:</h4><p>[root@bigdata003 ~]# useradd hadoop</p><h4 id="3-2-切换用户"><a href="#3-2-切换用户" class="headerlink" title="3.2 切换用户:"></a>3.2 切换用户:</h4><p>[root@bigdata003 ~]# su - hadoop</p><h4 id="3-3-创建目录结构"><a href="#3-3-创建目录结构" class="headerlink" title="3.3 创建目录结构:"></a>3.3 创建目录结构:</h4><p>[hadoop@bigdata003 ~]$ mkdir software app tmp data log lib shell sourcecode<br>[hadoop@bigdata003 ~]$ </p><h4 id="3-4-添加hosts主机名ip"><a href="#3-4-添加hosts主机名ip" class="headerlink" title="3.4 添加hosts主机名ip:"></a>3.4 添加hosts主机名ip:</h4><p>[root@bigdata003 ~]# vi /etc/hosts</p><p>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4<br>::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<br>172.16.xxx.22 bigdata001<br>172.16.xxx.21 bigdata002<br>172.16.xxx23 bigdata003</p><p><strong>注意:这里配置内网ip,集群之间通信传输速度很快,否则走公网速度很慢的.三台都要配置!</strong></p><h4 id="3-5-配置ssh信任关系"><a href="#3-5-配置ssh信任关系" class="headerlink" title="3..5 配置ssh信任关系"></a>3..5 配置ssh信任关系</h4><p>切换用户:</p><p>su - hadoop</p><p>ll -a一下,如果有.ssh文件则先备份一下</p><p>mv .ssh .ssh.bak</p><p>生成ssh:</p><p>[hadoop@bigdata001 ~]$  ssh-keygen</p><p>三台都执行,生成秘钥</p><p><img src="https://i.loli.net/2021/01/18/yN5tov7CwcMjUxT.png"></p><p>然后到第二三台服务器的目录下把id_rsa.pub文件cp到第一台服务器</p><p>第二台服务器:</p><p>cd .ssh</p><p>[hadoop@bigdata002 .ssh]$ scp id_rsa.pub root@bigdata001:/home/hadoop/.ssh/id_rsa.pub2</p><p>第三台服务器:</p><p>cd .ssh</p><p>[hadoop@bigdata003 .ssh]$ scp id_rsa.pub root@bigdata001:/home/hadoop/.ssh/id_rsa.pub3</p><p>以第一台为主,把第二,三台的公钥给第一台,使集群能够保持通信.</p><p>第一台服务器执行:</p><p>[hadoop@bigdata001 .ssh]$ cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys<br>[hadoop@bigdata001 .ssh]$ cat ~/.ssh/id_rsa.pub2 &gt;&gt; ~/.ssh/authorized_keys<br>[hadoop@bigdata001 .ssh]$ cat ~/.ssh/id_rsa.pub3 &gt;&gt; ~/.ssh/authorized_keys</p><p>修改权限:</p><p>[hadoop@bigdata001 .ssh]$  chmod 0600 ~/.ssh/authorized_keys</p><p>再把第一台的authorized_keys文件传给第二三台,sz/rz、FTP等方式都可以，如果用root传的记得修改用户.</p><p>初始化:</p><p><strong>三台机器分别执行</strong></p><p>[hadoop@bigdata001 .ssh]$ ssh bigdata001 date</p><p>[hadoop@bigdata001 .ssh]$ ssh bigdata002 date</p><p>[hadoop@bigdata001 .ssh]$ ssh bigdata003 date</p><p>第一次输入yes是 在known_hosts文件有记录，下次不需要再输入yes.</p><p>ll一下看known_hosts文件是否生成.</p><h4 id="3-6-JDK部署"><a href="#3-6-JDK部署" class="headerlink" title="3.6 JDK部署"></a>3.6 JDK部署</h4><p>切换到root用户</p><p>解压:</p><p>[root@bigdata001 ~]# cd /home/hadoop/software</p><p>tar -zxvf jdk-8u45-linux-x64.gz -C /usr/java</p><p>修改用户:</p><p>[root@bigdata001 java]# cd /usr/java<br>[root@bigdata001 java]# chown -R root:root jdk1.8.0_45</p><p>配置环境变量:</p><p>vi /etc/profile</p><p>在最后追加:</p><p>export JAVA_HOME=/usr/java/jdk1.8.0_45<br>export PATH=$JAVA_HOME/bin:$PATH</p><p>source生效:</p><p>source /etc/profile</p><p>tips:曾经改/etc/profile不小心手抖PATH变量写错了,然后有的命令执行不了,source不能生效,可以直接先执行export PATH=/usr/bin:/usr/sbin:/bin:/sbin,再去修改source生效即可.</p><p>如果用的阿里云主机防火墙可以不用关闭,但是端口号记得开启安全组才可以访问,自己电脑的虚拟机记得关闭防火墙.</p><p>执行命:service iptables stop</p><p>验证:service iptables status</p><h4 id="3-7-部署Zookeeper"><a href="#3-7-部署Zookeeper" class="headerlink" title="3.7 部署Zookeeper"></a>3.7 部署Zookeeper</h4><p>切换用户:</p><p>su - hadoop</p><p>cd software</p><p>tar -zxvf zookeeper-3.4.5-cdh5.16.2.tar.gz -C ../app/</p><p>软连接:</p><p>cd app</p><p>ln -s zookeeper-3.4.5-cdh5.16.2 zookeeper</p><p>(软连接的好处可以在本博客搜)</p><p>cd zookeeper/conf</p><p>修改配置:</p><p>cp zoo_sample.cfg zoo.cfg</p><p>vi zoo.cfg</p><p>修改dataDir=/home/hadoop/tmp/zookeeper,为什么不用Linux的tmp目录,也可以在本博客搜.</p><p>追加</p><p>server.1=bigdata001:2888:3888<br>server.2=bigdata002:2888:3888<br>server.3=bigdata003:2888:3888</p><p>创建目录:</p><p>mkdir -p /home/hadoop/tmp/zookeeper</p><p>touch /home/hadoop/tmp/zookeeper/myid</p><p>echo 1 &gt; /home/hadoop/tmp/zookeeper/myid(其他两台追加2/3即可)</p><p>启动服务:</p><p>[hadoop@bigdata001 bin]$ sh zkServer.sh start</p><p>查看状态:</p><p>[hadoop@bigdata001 bin]$ sh zkServer.sh status</p><p><img src="https://i.loli.net/2021/01/18/gSRWyzJfwbhUjKV.png"></p><p><img src="https://i.loli.net/2021/01/18/RJ7PEnYWHgvlmkQ.png"></p><p>注意:三台都启动才可以看到zk的状态!</p><h4 id="3-8-Hadoop部署"><a href="#3-8-Hadoop部署" class="headerlink" title="3.8 Hadoop部署"></a>3.8 Hadoop部署</h4><p>cd software</p><p>tar -zxvf  hadoop-2.6.0-cdh5.16.2.tar.gz -C ../app/</p><p>软连接:</p><p>[hadoop@bigdata003 hadoop]$ ln -s hadoop-2.6.0-cdh5.16.2 hadoop</p><p>修改配置:</p><p>-rw-r–r– 1 hadoop hadoop  4224 Jun  3  2019 hadoop-env.sh<br>-rw-r–r– 1 hadoop hadoop   774 Jun  3  2019 core-site.xml<br>-rw-r–r– 1 hadoop hadoop   775 Jun  3  2019 hdfs-site.xml<br>-rw-r–r– 1 hadoop hadoop   758 Jun  3  2019 mapred-site.xml.template<br>-rw-r–r– 1 hadoop hadoop    10 Jun  3  2019 slaves<br>-rw-r–r– 1 hadoop hadoop  4567 Jun  3  2019 yarn-env.sh<br>-rw-r–r– 1 hadoop hadoop   690 Jun  3  2019 yarn-site.xml</p><p>core-site.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Yarn 需要使用 fs.defaultFS 指定NameNode URI --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://bigdata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--==============================Trash机制======================================= --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--多长时间创建CheckPoint NameNode截点上运行的CheckPointer 从Current文件夹创建CheckPoint;默认：0 由fs.trash.interval项指定 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.trash.checkpoint.interval<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--多少分钟.Trash下的CheckPoint目录会被删除,该配置服务器设置优先级大于客户端，默认：0 不删除 这里配置的是一周,参数可以按自己需求调节--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.trash.interval<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>10080<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--指定hadoop临时目录, hadoop.tmp.dir 是hadoop文件系统依赖的基础配置，很多路径都依赖它。如果hdfs-site.xml中不配 置namenode和datanode的存放位置，默认就放在这>个路径中 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/home/hadoop/tmp/hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 指定zookeeper地址 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>ha.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata001:2181,bigdata002:2181,bigdata003:2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--指定ZooKeeper超时间隔，单位毫秒 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>ha.zookeeper.session-timeout.ms<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.proxyuser.hadoop.hosts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.proxyuser.hadoop.groups<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>io.compression.codecs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.io.compress.GzipCodec,            org.apache.hadoop.io.compress.DefaultCodec,            org.apache.hadoop.io.compress.BZip2Codec,            org.apache.hadoop.io.compress.SnappyCodec          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>hdfs-site.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--HDFS超级用户 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.permissions.superusergroup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--开启web hdfs --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.webhdfs.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/home/hadoop/data/dfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span> namenode 存放name table(fsimage)本地目录（需要修改）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>dfs.namenode.name.dir<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>namenode粗放 transaction file(edits)本地目录（需要修改）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/home/hadoop/data/dfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>datanode存放block本地目录（需要修改）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 块大小128M （默认128M） --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.blocksize<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>134217728<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--======================================================================= --></span>    <span class="token comment" spellcheck="true">&lt;!--HDFS高可用配置 --></span>    <span class="token comment" spellcheck="true">&lt;!--指定hdfs的nameservice为ruozeclusterg7,需要和core-site.xml中的保持一致 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.nameservices<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--设置NameNode IDs 此版本最大只支持两个NameNode --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.namenodes.bigdata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>nn1,nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Hdfs HA: dfs.namenode.rpc-address.[nameservice ID] rpc 通信地址 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.rpc-address.bigdata.nn1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata001:8020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.rpc-address.bigdata.nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata002:8020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Hdfs HA: dfs.namenode.http-address.[nameservice ID] http 通信地址 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address.bigdata.nn1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata001:50070<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address.bigdata.nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata002:50070<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--==================Namenode editlog同步 ============================================ --></span>    <span class="token comment" spellcheck="true">&lt;!--保证数据恢复 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.journalnode.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>0.0.0.0:8480<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.journalnode.rpc-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>0.0.0.0:8485<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--设置JournalNode服务器地址，QuorumJournalManager 用于存储editlog --></span>        <span class="token comment" spellcheck="true">&lt;!--格式：qjournal://&lt;host1:port1>;&lt;host2:port2>;&lt;host3:port3>/&lt;journalId> 端口同journalnode.rpc-address --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.shared.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>qjournal://bigdata001:8485;bigdata002:8485;bigdata003:8485/bigdata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--JournalNode存放数据地址 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.journalnode.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/home/hadoop/data/dfs/jn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--==================DataNode editlog同步 ============================================ --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--DataNode,Client连接Namenode识别选择Active NameNode策略 --></span>                             <span class="token comment" spellcheck="true">&lt;!-- 配置失败自动切换实现方式 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.client.failover.proxy.provider.bigdata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--==================Namenode fencing：=============================================== --></span>    <span class="token comment" spellcheck="true">&lt;!--Failover后防止停掉的Namenode启动，造成两个服务 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.fencing.methods<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>sshfence<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.fencing.ssh.private-key-files<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/home/hadoop/.ssh/id_rsa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--多少milliseconds 认为fencing失败 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.fencing.ssh.connect-timeout<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>30000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--==================NameNode auto failover base ZKFC and Zookeeper====================== --></span>    <span class="token comment" spellcheck="true">&lt;!--开启基于Zookeeper  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.automatic-failover.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--动态许可datanode连接namenode列表 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.hosts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/home/hadoop/app/hadoop/etc/hadoop/slaves<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>mapred-site.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置 MapReduce Applications --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- JobHistory Server ============================================================== --></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置 MapReduce JobHistory Server 地址 ，默认端口10020 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.jobhistory.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>ruozedata001:10020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置 MapReduce JobHistory Server web ui 地址， 默认端口19888 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.jobhistory.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>ruozedata001:19888<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 配置 Map段输出的压缩,snappy--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.map.output.compress<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.map.output.compress.codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.io.compress.SnappyCodec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>yarn-site.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- nodemanager 配置 ================================================= --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.mapred.ShuffleHandler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.localizer.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>0.0.0.0:23344<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Address where the localizer IPC is.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>0.0.0.0:23999<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>NM Webapp address.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- HA 配置 =============================================================== --></span>    <span class="token comment" spellcheck="true">&lt;!-- Resource Manager Configs --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.connect.retry-interval.ms<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.ha.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.ha.automatic-failover.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 使嵌入式自动故障转移。HA环境启动，与 ZKRMStateStore 配合 处理fencing --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.ha.automatic-failover.embedded<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 集群名称，确保HA选举时对应的集群 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.cluster-id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn-cluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.ha.rm-ids<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>rm1,rm2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--这里RM主备结点需要单独指定,（可选）    &lt;property>         &lt;name>yarn.resourcemanager.ha.id&lt;/name>         &lt;value>rm2&lt;/value>     &lt;/property>     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.scheduler.class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.recovery.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.app.mapreduce.am.scheduler.connection.wait.interval-ms<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>5000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- ZKRMStateStore 配置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.store.class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.zk-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata001:2181,bigdata002:2181,bigdata003:2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.zk.state-store.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata001:2181,bigdata002:2181,bigdata003:2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Client访问RM的RPC地址 (applications manager interface) --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.address.rm1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata001:23140<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.address.rm2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata002:23140<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- AM访问RM的RPC地址(scheduler interface) --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.scheduler.address.rm1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata001:23130<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.scheduler.address.rm2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata002:23130<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- RM admin interface --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.admin.address.rm1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata001:23141<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.admin.address.rm2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata002:23141<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--NM访问RM的RPC端口 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.resource-tracker.address.rm1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata001:23125<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.resource-tracker.address.rm2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata002:23125<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- RM web application 地址 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.webapp.address.rm1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata001:8088<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.webapp.address.rm2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata002:8088<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.webapp.https.address.rm1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata001:23189<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.webapp.https.address.rm2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bigdata002:23189<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.log-aggregation-enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.log.server.url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>http://bigdata001:19888/jobhistory/logs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.resource.memory-mb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2048<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.minimum-allocation-mb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1024<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discription</span><span class="token punctuation">></span></span>单个任务可申请最少内存，默认1024MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discription</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.maximum-allocation-mb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2048<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discription</span><span class="token punctuation">></span></span>单个任务可申请最大内存，默认8192MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discription</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.resource.cpu-vcores<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>hadoop-env.sh修改</p><p>export JAVA_HOME=/usr/java/jdk1.8.0_45</p><p>否则会报错</p><p>slaves</p><pre><code>bigdata001bigdata002bigdata003</code></pre><p>注意slaves文件一定要是unix格式的,DOS会有换行符CRLF,否则可能会出现怪异的错误.</p><p>初始化:</p><p>先启动日志进程:</p><p>[hadoop@bigdata001 sbin]$ cd /home/hadoop/app/hadoop/sbin</p><p>sh hadoop-daemon.sh start journalnode</p><p>jps查看进程是否存在</p><p><img src="https://i.loli.net/2021/01/18/QosO5yYtIZ7KdPf.png"></p><p>在第一台机器上格式化:</p><p>[hadoop@bigdata001 sbin]$ cd ../bin</p><p>[hadoop@bigdata001 bin]$ sh hadoop namenode -format</p><p>把第一台初始化好的元数据传给第二三台,传输的路径为初始化好后打印出来的路径</p><p><img src="https://i.loli.net/2021/01/18/Wf2DQYaoNhkzTLE.png"></p><p>[hadoop@bigdata001 bin]$ scp -r /home/hadoop/data/dfs hadoop@bigdata002:/home/hadoop/data</p><p>[hadoop@bigdata001 bin]$ scp -r /home/hadoop/data/dfs hadoop@bigdata003:/home/hadoop/data</p><p>ZKFC初始化:</p><p>[hadoop@bigdata001 bin]$ sh hdfs zkfc -formatZK</p><p>zk只需在一台机器上执行初始化即可.</p><p><img src="https://i.loli.net/2021/01/18/FyjKhJ3zCf9bEiP.png"></p><p>启动:</p><p>[hadoop@bigdata001 bin]$ cd ../sbin</p><p>先关一下进程:</p><p>[hadoop@bigdata001 sbin]$ sh stop-all.sh</p><p>再启进程:</p><p>[hadoop@bigdata001 sbin]$ sh start-all.sh</p><p><img src="C:\Users\10090\Desktop\blogimg\image-20210118221416965.png" alt="image-20210118221416965"></p><p>注意这里启动的顺序,namenode–&gt;datanode–&gt;journalnode–&gt;ZKFC</p><p>jps查看进程:</p><p><img src="https://i.loli.net/2021/01/18/rWSE5NcdHfzPxKC.png"></p><p><img src="https://i.loli.net/2021/01/18/o9MYwNbKZxAleWF.png"></p><p><img src="https://i.loli.net/2021/01/18/X8yvkVOfoLRUSC5.png"></p><p>备机的resourcemanager需要手动启动:</p><p>[hadoop@bigdata002 sbin]$ sh yarn-daemon.sh start resourcemanager</p><p><img src="https://i.loli.net/2021/01/18/T9la7vymhGHzCok.png"></p><p>与预期进程一致,部署完成!</p><h4 id="3-9-查看web界面"><a href="#3-9-查看web界面" class="headerlink" title="3.9 查看web界面"></a>3.9 查看web界面</h4><p>自己本地虚出来的虚拟机需要关闭防火墙,阿里云主机则需要开启安全组端口号</p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop HA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala基础</title>
      <link href="2019/03/15/2021-1-21-scala-ji-chu-01/"/>
      <url>2019/03/15/2021-1-21-scala-ji-chu-01/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Scala"><a href="#1-Scala" class="headerlink" title="1.Scala"></a>1.Scala</h3><p>下载路径:</p><p><a href="https://www.scala-lang.org/download/2.12.10.html">https://www.scala-lang.org/download/2.12.10.html</a></p><p><a href="https://downloads.lightbend.com/scala/2.12.10/scala-2.12.10.tgz">scala-2.12.10.tgz</a>    –&gt;Linux版</p><p><a href="https://downloads.lightbend.com/scala/2.12.10/scala-2.12.10.zip">scala-2.12.10.zip</a>    –&gt;Windows版</p><h4 id="1-1-解压"><a href="#1-1-解压" class="headerlink" title="1.1 解压"></a>1.1 解压</h4><p>tar -zxvf scala-2.12.10.tgz -C ../app</p><h4 id="1-2-环境变量配置"><a href="#1-2-环境变量配置" class="headerlink" title="1.2 环境变量配置"></a>1.2 环境变量配置</h4><p>export SCALA_HOME=/home/hadoop/app/scala-2.12.10<br>export PATH=$SCALA_HOME/bin:$PATH</p><h4 id="1-3-Scala命令行"><a href="#1-3-Scala命令行" class="headerlink" title="1.3 Scala命令行"></a>1.3 Scala命令行</h4><p>REPL:Read-Eval-Print-Loop    交互式命令行</p><p>输入scala进入Scala命令行:</p><p>scala&gt; 1 + 3<br>res0: Int = 4</p><p>Scala自动推算结果为Int类型,底层是有类型推导功能.</p><p>4:运算结果</p><p>res0:交互式命令结果,自动增长的,也可以直接引用.</p><p>scala&gt; println(“Hello World!”)<br>Hello World!</p><p>编写Scala脚本:</p><p>[hadoop@warehouse001 scala]$ vi HelloWorld.scala</p><p>object HelloWorld{<br>        def main (args:Array[String]){<br>                println(“Hello World!”)<br>        }<br>}</p><p>执行脚本:</p><p>[hadoop@warehouse001 scala]$ scala HelloWorld.scala<br>Hello World!</p><p>编译scala文件:</p><p>[hadoop@warehouse001 scala]$ cd bin</p><p>[hadoop@warehouse001 bin]$ scalac ../HelloWorld.scala </p><p>-rw-rw-r– 1 hadoop hadoop  586 Jun 15 22:28 HelloWorld.class<br>-rw-rw-r– 1 hadoop hadoop  636 Jun 15 22:28 HelloWorld$.class</p><p>会生成两个.class的字节码文件</p><p>执行:</p><p>[hadoop@warehouse001 bin]$ scala HelloWorld<br>Hello World!</p><p>虽然未编译的文件也能执行,但是执行速度比编译后的文件慢得多.</p><h3 id="2-IDEA"><a href="#2-IDEA" class="headerlink" title="2.IDEA"></a>2.IDEA</h3><p>IDE:集成开发环境(Integrated Development Environment),包括代码编辑器、编译器、调试器和图形用户界面等工具。</p><p>IDEA是当前流行的开发工具，业界公认的最好的java开发工具，本次采用IDEA作为开发工具。</p><p><a href="https://www.jetbrains.com/idea/download/download-thanks.html?platform=windows&amp;code=IIC%E7%A4%BE%E5%8C%BA%E7%89%88%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80">https://www.jetbrains.com/idea/download/download-thanks.html?platform=windows&amp;code=IIC社区版下载地址</a></p><p>采用IDEA + Maven管理</p><p>Maven版本采用3.6.3,Spark要求Maven版本必须高于3.6.3版本.</p><p>JDK 1.7+,目前绝大多数JDK应该都是1.7以上的吧.</p><p>下载,解压,Windows+Linux</p><p>到conf目录修改:</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- localRepository   | The path to the local repository maven will use to store artifacts.   |   | Default: $&amp;#123;user.home&amp;#125;/.m2/repository  &lt;localRepository>/path/to/local/repo&lt;/localRepository>  --></span></code></pre><p>修改默认maven仓库路径,默认是在C盘,会存在风险.</p><p>添加阿里云镜像源:</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre><p>默认镜像源下载依赖包速度太慢,阿里云镜像源速度较快.</p><h3 id="3-IDEA创建Scala工程"><a href="#3-IDEA创建Scala工程" class="headerlink" title="3.IDEA创建Scala工程"></a>3.IDEA创建Scala工程</h3><p>打开IDEA</p><p>File–&gt;New–&gt;Project</p><p><img src="https://i.loli.net/2021/01/21/zSI9Fj6UVrgRuAk.png"></p><p>选择org.scala.tools</p><p><img src="https://i.loli.net/2021/01/21/kL1tfSTGzKryiOp.png"></p><p><img src="https://i.loli.net/2021/01/21/libhnHMz6OvGEj4.png"></p><p>设置本地maven的setting.xml路径.</p><p>初次打开可能会下载依赖包,慢慢等待下载即可.</p><p><img src="https://i.loli.net/2021/01/21/UG2OFqBkNz8jZYJ.png"></p><p>创建好后包含如下目录,没有的目录自己创建即可,java和scala目录图标必须为蓝色,右击–&gt;Mark Directory as –&gt; sources root即可.</p><p>File–&gt;settings–&gt;Build–&gt;compiler–&gt;Java Compiler修改Javac版本为8</p><p><img src="https://i.loli.net/2021/01/21/HK1ZgNzroWhMTVL.png"></p><p>File–&gt;Project Structure–&gt;Modules修改Language level为8</p><p><img src="https://i.loli.net/2021/01/21/TBksQUVcAb7vtME.png"></p><p>IDEA是默认没有Scala插件的,无法创建scala类,需要安装scala插件.</p><p>File–&gt;settings–&gt;Plugins</p><p><img src="https://i.loli.net/2021/01/21/unmYahtygDGkMez.png"></p><p>右击项目–&gt;add framework support–&gt;添加scala</p><p><img src="https://i.loli.net/2021/01/21/zc2ZO6Hq1Kso4aI.png"></p><p><a href="https://blog.csdn.net/weixin_43520450/article/details/108677784">https://blog.csdn.net/weixin_43520450/article/details/108677784</a></p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HadoopAPI编程01</title>
      <link href="2019/03/15/hdfsapi-bian-cheng-01/"/>
      <url>2019/03/15/hdfsapi-bian-cheng-01/</url>
      
        <content type="html"><![CDATA[<h3 id="一-环境配置"><a href="#一-环境配置" class="headerlink" title="一 环境配置"></a>一 环境配置</h3><p>pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>HadoopAPI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scala.version</span><span class="token punctuation">></span></span>2.12.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scala.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hadoop.version</span><span class="token punctuation">></span></span>2.6.0-cdh5.16.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hadoop.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.complier.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.complier.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--默认：建议你们所有的maven工程中都加上这个仓库 阿里云镜像 加快下载速度--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--如果你是使用CDH版本进行开发的，一定要加上--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>cloudera<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://repository.cloudera.com/artifactory/cloudera-repos/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--hadoop相关依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hadoop-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>hadoop.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- junit依赖 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>组织架构:</p><p><img src="https://i.loli.net/2021/02/21/mXncTINPxEQGgAs.png"></p><h3 id="二-API编写"><a href="#二-API编写" class="headerlink" title="二 API编写"></a>二 API编写</h3><p>在test单元测试目录下创建HadoopAPI</p><p><img src="https://i.loli.net/2021/02/21/2ifZwvajScAECxN.png"></p><p>在目录下创建测试文件:wc.data</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>FileSystem<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>Path<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URI<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Hadoop API操作 * * FileSystem:是整个文件系统编程的入口点 * API常用的操作都是和shell操作对应的 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HadoopAPI01</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 这里虽然执行通过,但是并没有创建成功,原因是没有关联hdfs uri,这里适用本地创建     * @throws Exception     */</span><span class="token comment" spellcheck="true">//    @Test</span><span class="token comment" spellcheck="true">//    public void mkdir() throws Exception &amp;#123;</span><span class="token comment" spellcheck="true">//        Configuration configuration = new Configuration();</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        //获取文件系统客户端对象</span><span class="token comment" spellcheck="true">//        FileSystem fileSystem = FileSystem.get(configuration);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        Path path = new Path("/HDFSAPI");</span><span class="token comment" spellcheck="true">//        final boolean isSucessed = fileSystem.mkdirs(path);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        Assert.assertEquals(true,isSucessed);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        fileSystem.close();</span><span class="token comment" spellcheck="true">//    &amp;#125;</span>    <span class="token comment" spellcheck="true">/**     * 这里报错     * 报错信息:org.apache.hadoop.security.AccessControlException: Permission denied: user=10090, access=WRITE, inode="/":hadoop:supergroup:drwxr-xr-x     * 报错原因默认给的权限不够     *  @throws Exception     */</span><span class="token comment" spellcheck="true">//    @Test</span><span class="token comment" spellcheck="true">//    public void mkdir() throws Exception &amp;#123;</span><span class="token comment" spellcheck="true">//        Configuration configuration = new Configuration();</span><span class="token comment" spellcheck="true">//        URI uri = new URI("hdfs://warehouse001:9000");</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        //获取文件系统客户端对象</span><span class="token comment" spellcheck="true">//        FileSystem fileSystem = FileSystem.get(uri, configuration);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        Path path = new Path("/HDFSAPI");</span><span class="token comment" spellcheck="true">//        final boolean isSucessed = fileSystem.mkdirs(path);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        Assert.assertEquals(true, isSucessed);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        fileSystem.close();</span><span class="token comment" spellcheck="true">//    &amp;#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Configuration configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URI uri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://warehouse001:9000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取文件系统客户端对象</span>        FileSystem fileSystem <span class="token operator">=</span> FileSystem<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span><span class="token string">"hadoop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Path path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/HDFSAPI"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> isSucessed <span class="token operator">=</span> fileSystem<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> isSucessed<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileSystem<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 报错:There are 1 datanode(s) running and 1 node(s) are excluded in this operation.     * 报错原因:dfs.client.use.datanode.hostname默认值是false,需要配置     */</span><span class="token comment" spellcheck="true">//    @Test</span><span class="token comment" spellcheck="true">//    public void copyFromLocal() throws Exception &amp;#123;</span><span class="token comment" spellcheck="true">//        Configuration configuration = new Configuration();</span><span class="token comment" spellcheck="true">//        URI uri = new URI("hdfs://warehouse001:9000");</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        //获取文件系统客户端对象</span><span class="token comment" spellcheck="true">//        FileSystem fileSystem = FileSystem.get(uri, configuration,"hadoop");</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        Path src = new Path("data/wc.data");</span><span class="token comment" spellcheck="true">//        Path dst = new Path("/HDFSAPI/");</span><span class="token comment" spellcheck="true">//        fileSystem.copyFromLocalFile(src, dst);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        fileSystem.close();</span><span class="token comment" spellcheck="true">//    &amp;#125;</span>    <span class="token comment" spellcheck="true">/**     * 这里HDFS可以创建成功,但是副本数是3     * 原因:默认的配置副本数是3 所以需要把副本数改为1     * @throws Exception     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyFromLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Configuration configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//user也可以配置到环境变量里 就可以直接用上面那种方式直接传了</span>        <span class="token comment" spellcheck="true">//System.setProperty("HADOOP_USER_NAME","hadoop");</span>        URI uri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://warehouse001:9000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把dfs.client.use.datanode.hostname配置true</span>        configuration<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"dfs.client.use.datanode.hostname"</span><span class="token punctuation">,</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把dfs.replication配置为1</span>        configuration<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"dfs.replication"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取文件系统客户端对象</span>        FileSystem fileSystem <span class="token operator">=</span> FileSystem<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span><span class="token string">"hadoop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Path src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"data/wc.data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Path dst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/HDFSAPI/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileSystem<span class="token punctuation">.</span><span class="token function">copyFromLocalFile</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileSystem<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这里的配置也可以在resources下创建hdfs-site.xml把配置放在里面</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.client.use.datanode.hostname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>configuration和FileSystem的总是需要创建,所以可以把这部分抽取出来</p><p>在java目录创建Cal.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>在test/java创建CalTest.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> hdfs<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>Cal<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>After<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Cal cal<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化操作     */</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------setUp-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 释放资源     */</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------tearDown-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cal <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------testAdd-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//断言</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 这里也能跑过,原因是异常直接走到exception,没有走到下面去     */</span>    <span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> ArithmeticException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//忽略算术异常报错</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDivide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------testDivide-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>整个逻辑的执行顺序是:</p><p>——-setUp——-<br>——-testAdd——-<br>——-tearDown——-<br>——-setUp——-<br>——-testDivide——-<br>——-tearDown——-</p><p>每调用一个方法都会初始化和实现一次,所以采用下面这种方法初始化整个类和释放整个类:</p><p>把Cal.java复制一份CalV2.java,CalTest.java复制一份CalTestV2.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalV2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> hdfs<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>Cal<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalTestV2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> Cal cal<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 整个程序执行的生命周期     * -------setUpBeforeClass-------     * -------setUp-------     * -------testAdd-------     * -------tearDown-------     * -------setUp-------     * -------testDivide-------     * -------tearDown-------     * -------setUpAfterClass-------     * 这里的@Before和@After这部分就可以注释掉了     */</span>    <span class="token comment" spellcheck="true">/**     * 初始化操作     */</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------setUp-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        cal = new Cal();</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 释放资源     */</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------tearDown-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        cal = null;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 上面的写法每走一个方法就初始化一次释放一次,所以采用这种写法     * 整个类只初始化一次     */</span>    <span class="token annotation punctuation">@BeforeClass</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setUpBeforeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------setUpBeforeClass-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *     */</span>    <span class="token annotation punctuation">@AfterClass</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setUpAfterClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------setUpAfterClass-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cal <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------testAdd-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 这里也能跑过,原因是异常直接走到exception,没有走到下面去     */</span>    <span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> ArithmeticException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//忽略算术异常报错</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDivide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------testDivide-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>现在回到上面的HDFS API的重复部分抽取:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>After<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URI<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URISyntaxException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Hadoop API操作 * * FileSystem:是整个文件系统编程的入口点 * API常用的操作都是和shell操作对应的 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HadoopAPI02</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    FileSystem fileSystem<span class="token punctuation">;</span>    Configuration configuration<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化     * @throws Exception     */</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"HADOOP_USER_NAME"</span><span class="token punctuation">,</span><span class="token string">"hadoop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URI uri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://warehouse001:9000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把dfs.client.use.datanode.hostname配置true</span>        configuration<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"dfs.client.use.datanode.hostname"</span><span class="token punctuation">,</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把dfs.replication配置为1</span>        configuration<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"dfs.replication"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取文件系统客户端对象</span>        fileSystem <span class="token operator">=</span> FileSystem<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 释放资源     * @throws Exception     */</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fileSystem<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建文件夹     * @throws Exception     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Path path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/HDFSAPI"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> isSucessed <span class="token operator">=</span> fileSystem<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> isSucessed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 上传到HDFS     * @throws Exception     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyFromLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Path src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"data/wc.data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Path dst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/HDFSAPI/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileSystem<span class="token punctuation">.</span><span class="token function">copyFromLocalFile</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 下载HDFS文件到本地     * @throws Exception     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyToLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Path src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/HDFSAPI/wc.data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Path dst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"out/a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileSystem<span class="token punctuation">.</span><span class="token function">copyToLocalFile</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 重命名     * @throws Exception     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Path src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/HDFSAPI/wc.data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Path dst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/HDFSAPI/wc-bak.data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileSystem<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查看文件信息     * @throws Exception     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listFiles</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RemoteIterator<span class="token operator">&lt;</span>LocatedFileStatus<span class="token operator">></span> files <span class="token operator">=</span> fileSystem<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/HDFSAPI/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            LocatedFileStatus fileStatus <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//是否是文件夹</span>            <span class="token keyword">boolean</span> isDir <span class="token operator">=</span> fileStatus<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取权限</span>            String permission <span class="token operator">=</span> fileStatus<span class="token punctuation">.</span><span class="token function">getPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取副本数</span>            <span class="token keyword">short</span> replication <span class="token operator">=</span> fileStatus<span class="token punctuation">.</span><span class="token function">getReplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取文件大小</span>            <span class="token keyword">long</span> len <span class="token operator">=</span> fileStatus<span class="token punctuation">.</span><span class="token function">getLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取路径</span>            Path path <span class="token operator">=</span> fileStatus<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isDir <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> permission <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> replication <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> len <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取Block块信息</span>            BlockLocation<span class="token punctuation">[</span><span class="token punctuation">]</span> blockLocations <span class="token operator">=</span> fileStatus<span class="token punctuation">.</span><span class="token function">getBlockLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>BlockLocation blockLocation <span class="token operator">:</span> blockLocations<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> hosts <span class="token operator">=</span> blockLocation<span class="token punctuation">.</span><span class="token function">getHosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String host <span class="token operator">:</span> hosts<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fileSystem<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/HDFSAPI/wc-bak.data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>IO流操作HDFSAPI</p><pre><code>package com.example.hadoop.hdfs;import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.*;import org.apache.hadoop.io.IOUtils;import org.junit.After;import org.junit.Before;import org.junit.Test;import java.io.BufferedInputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.net.URI;/** * Hadoop API操作 * * FileSystem:是整个文件系统编程的入口点 * API常用的操作都是和shell操作对应的 */public class HadoopAPI03 &#123;    FileSystem fileSystem;    Configuration configuration;    /**     * 初始化     * @throws Exception     */    @Before    public void setUp() throws Exception &#123;        System.setProperty(&quot;HADOOP_USER_NAME&quot;,&quot;hadoop&quot;);        configuration = new Configuration();        URI uri = new URI(&quot;hdfs://warehouse001:9000&quot;);        //把dfs.client.use.datanode.hostname配置true        configuration.set(&quot;dfs.client.use.datanode.hostname&quot;,&quot;true&quot;);        //把dfs.replication配置为1        configuration.set(&quot;dfs.replication&quot;,&quot;1&quot;);        //获取文件系统客户端对象        fileSystem = FileSystem.get(uri, configuration);    &#125;    /**     * 释放资源     * @throws Exception     */    @After    public void tearDown() throws Exception &#123;        fileSystem.close();    &#125;    /**     * IO流上传本地到HDFS     * @throws Exception     */    @Test    public void copyFromLocal() throws Exception &#123;        //local =&gt; hdfs        //source        BufferedInputStream inputStream = new BufferedInputStream(new FileInputStream(new File(&quot;data/wc.data&quot;)));        //dst        FSDataOutputStream outputStream = fileSystem.create(new Path(&quot;/HDFSAPI/wc-io&quot;), true);        //写入        IOUtils.copyBytes(inputStream,outputStream,4096);        //释放资源        IOUtils.closeStream(outputStream);        IOUtils.closeStream(inputStream);    &#125;    /**     * IO流下载HDFS文件到本地     * @throws Exception     */    @Test    public void copyToLocal() throws Exception &#123;        //hdfs =&gt; local        FSDataInputStream inputStream = fileSystem.open(new Path(&quot;/HDFSAPI/wc-io&quot;));        FileOutputStream out = new FileOutputStream(new File(&quot;out/a.txt&quot;));        IOUtils.copyBytes(inputStream,out, 4096);        IOUtils.closeStream(out);        IOUtils.closeStream(inputStream);    &#125;&#125;</code></pre><p>分类参数配置:</p><p>在resource下创建wc.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">INPUT_PATH</span><span class="token punctuation">=</span><span class="token attr-value">/HDFSAPI/wc-io</span><span class="token attr-name">OUTPUT_PATH</span><span class="token punctuation">=</span><span class="token attr-value">/HDFSAPI/wc-result.txt</span><span class="token attr-name">HDFS_URI</span><span class="token punctuation">=</span><span class="token attr-value">hdfs://warehouse001:9000</span><span class="token attr-name">MAPPER_CLASS</span><span class="token punctuation">=</span><span class="token attr-value">com.example.hadoop.hdfs.hdfs.wc.IgnoreWordCountMapper</span></code></pre><p>创建Constans.java类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>wc<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Constans</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String INPUT_PATH<span class="token operator">=</span><span class="token string">"INPUT_PATH"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String OUTPUT_PATH<span class="token operator">=</span><span class="token string">"OUTPUT_PATH"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String HDFS_URI<span class="token operator">=</span><span class="token string">"HDFS_URI"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String MAPPER_CLASS<span class="token operator">=</span><span class="token string">"MAPPER_CLASS"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>创建ParamsUtil.java工具类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>wc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParamsUtil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>ParamsUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"wc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Properties <span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> properties<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>修改代码参数配置:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>wc<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URI<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HDFSWCAPP002</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 使用HDFS API 完成词频统计     * 1. 读取待统计的数据     * 2. 业务逻辑: 词频统计 按照分隔符把数据拆分     * 3. 将结果存到某个地方 ==> Context     * 4. 将结果写到某个地方 ==> HDFS API     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Properties properties <span class="token operator">=</span> ParamsUtil<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"HADOOP_USER_NAME"</span><span class="token punctuation">,</span><span class="token string">"hadoop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ReadContext readContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReadContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        ReadMapper wordCountMapper = new IgnoreWordCountMapper();</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>Constans<span class="token punctuation">.</span>MAPPER_CLASS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ReadMapper mapper <span class="token operator">=</span> <span class="token punctuation">(</span>ReadMapper<span class="token punctuation">)</span>aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Configuration configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URI uri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>Constans<span class="token punctuation">.</span>HDFS_URI<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把dfs.client.use.datanode.hostname配置true</span>        configuration<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"dfs.client.use.datanode.hostname"</span><span class="token punctuation">,</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把dfs.replication配置为1</span>        configuration<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"dfs.replication"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取文件系统客户端对象</span>        FileSystem fileSystem <span class="token operator">=</span> FileSystem<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. 读数据</span>        Path path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>Constans<span class="token punctuation">.</span>INPUT_PATH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Path outputPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>Constans<span class="token punctuation">.</span>OUTPUT_PATH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FSDataOutputStream out <span class="token operator">=</span> fileSystem<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>outputPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        RemoteIterator<span class="token operator">&lt;</span>LocatedFileStatus<span class="token operator">></span> files <span class="token operator">=</span> fileSystem<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            LocatedFileStatus fileStatus <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FSDataInputStream in <span class="token operator">=</span> fileSystem<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>fileStatus<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String line <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//System.out.println(line);</span>                mapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span>readContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> cacheMap <span class="token operator">=</span> readContext<span class="token punctuation">.</span><span class="token function">getCacheMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> entry <span class="token operator">:</span> cacheMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==>"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HadoopAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop HA架构</title>
      <link href="2019/03/10/hadoopha01/"/>
      <url>2019/03/10/hadoopha01/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Linux"><a href="#1-Linux" class="headerlink" title="1.Linux"></a>1.Linux</h3><h4 id="1-1文件夹"><a href="#1-1文件夹" class="headerlink" title="1.1文件夹"></a>1.1文件夹</h4><p>mkdir dir1 dir2</p><p>mkdir -p dir3/dir4</p><p>cd /app/xxx    绝对路径</p><p>cd /app</p><p>cd xxx    相对路径</p><h4 id="1-2-文件"><a href="#1-2-文件" class="headerlink" title="1.2 文件"></a>1.2 文件</h4><p>touch bd1.txt</p><p>vi bd2.txt</p><h4 id="1-3-权限"><a href="#1-3-权限" class="headerlink" title="1.3 权限"></a>1.3 权限</h4><p>rwx    读写执    421</p><p>chown    -R     user:group    修改所属用户</p><p>chmod -R 777</p><h4 id="1-4-进程端口号"><a href="#1-4-进程端口号" class="headerlink" title="1.4 进程端口号"></a>1.4 进程端口号</h4><p>ps -eef | grep 关键词</p><p>netstat -nlp | grep pid</p><p>telnet ip port</p><h4 id="1-5-其他常用命令"><a href="#1-5-其他常用命令" class="headerlink" title="1.5 其他常用命令"></a>1.5 其他常用命令</h4><p>pwd</p><p>ll -rt 按时间排序</p><p>ll -a 查看隐藏文件</p><p>ll -h 查看文件大小</p><p>du -sh    查看文件和文件夹大小</p><p>cd ../    返回上级目录</p><p>cd ../../ 返回上上级目录</p><p>cd -     返回上次目录</p><p>cd /root、cd、cd ~ 切换到家目录</p><p>/etc/profile、<del>/.bash_profile、</del>/.bash_rc    全局环境变量和个人环境变量</p><p>cp、mv</p><p>cat    more    less</p><p>tail -f/-F</p><p>cat error.log | grep -C 10 ERROR    显示ERROR上下10行的内容</p><p>find / -name ‘*xxxx*’    查找文件</p><p>which ls    查看环境变量里有没有文件</p><p>top    查看内存/CPU</p><p>free -m    查看内存大小</p><p>df -h    查看磁盘大小 </p><p>zip/unzip    压缩/解压缩</p><p>tar -zcvf      压缩</p><p>tar -zxvf     解压</p><p>&gt;    重写</p><p>&gt;&gt;    追加</p><p>history    查看历史命令</p><p>sudo    临时赋予最大权限    vi /etc/sudoers</p><p>su -    切换用户</p><h4 id="1-6-高危操作"><a href="#1-6-高危操作" class="headerlink" title="1.6 高危操作"></a>1.6 高危操作</h4><p>vi修改生产配置文件,先cp备份</p><p>rm删除文件或者文件夹,确认清楚</p><p>kill -9 pid 先ps -ef | grep hadoop 确认杀进程是否是需要的,不要误杀</p><p>kill -9 $(pgrep -f hadoop)    全局杀死所有</p><h4 id="1-7-补充"><a href="#1-7-补充" class="headerlink" title="1.7 补充"></a>1.7 补充</h4><p>help    命令帮助</p><p>tab键    补全 </p><p>cat /dev/null &gt; 3.log    清空文件内容</p><p>echo “” &gt; 4.log    会有占位符,慎用</p><p>set -u </p><p>vi编辑时一定要i键进入编辑模式,否则第一行会缺失</p><h4 id="1-8-常见错误"><a href="#1-8-常见错误" class="headerlink" title="1.8 常见错误"></a>1.8 常见错误</h4><p>Permission denied 权限受限</p><p>command not find    命令找不到    (环境变量没配置、软件没安装、没有切换到bin目录)</p><h3 id="2-HDFS存储"><a href="#2-HDFS存储" class="headerlink" title="2.HDFS存储"></a>2.HDFS存储</h3><h4 id="2-1-Namenode"><a href="#2-1-Namenode" class="headerlink" title="2.1 Namenode"></a>2.1 Namenode</h4><p>存储:文件系统的命名空间</p><p>​    1.文件名称</p><p>​    2.文件目录结构</p><p>​    3.文件的属性(权限,创建时间,副本数)</p><p>​    4.文件对应哪些数据块–&gt;数据块对应datanode节点</p><p>作用:管理文件系统的命名空间.它维护着文件系统树及整棵树内所有的文件和目录.这写信息以两个文件形式永久保存在本地磁盘上:命名空间镜像文件fsimage和编辑日志文件editlog</p><h4 id="2-2-Datanode"><a href="#2-2-Datanode" class="headerlink" title="2.2 Datanode"></a>2.2 Datanode</h4><p>存储:数据块和数据块校验和</p><p>与Namenode通信:</p><p>​    1.每隔三秒发送一个心跳包</p><p>​    2.每十次心跳发送一次blockReport</p><p>作用:读写文件的数据块</p><h4 id="2-3-Secondarynode"><a href="#2-3-Secondarynode" class="headerlink" title="2.3 Secondarynode"></a>2.3 Secondarynode</h4><p>存储:fsimage+editlog</p><p>作用:定期合并fsimage+editlog文件为新的fsimage推送给namenode,俗称检查点动作,checkpoint.</p><p>参数:fs.checkpoint.period–&gt;1h</p><h4 id="2-4-HDFS的读写流程"><a href="#2-4-HDFS的读写流程" class="headerlink" title="2.4 HDFS的读写流程"></a>2.4 HDFS的读写流程</h4><h4 id="2-5-进程"><a href="#2-5-进程" class="headerlink" title="2.5 进程"></a>2.5 进程</h4><p>jps</p><p>1.namenode</p><p>2.datanode</p><p>3.secondarynamenode</p><h4 id="2-6-常用命令"><a href="#2-6-常用命令" class="headerlink" title="2.6 常用命令"></a>2.6 常用命令</h4><p>1.hadoop fs</p><p>​    hadoop fs -ls </p><p>​    hadoop fs -lsr</p><p>​    hadoop fs -put a.txt /user/hadoop</p><p>​    hadoop fs -mkdir /user/hadoop</p><p>​    hadoop fs -get /user/hadoop /</p><p>​    hadoop fs-cp </p><p>​    hadoop fs -mv</p><p>​    hadoop fs -cat </p><p>​    hadoop fs -rm </p><p>​    hadoop fs -rmr</p><p>​    hadoop fs -text</p><p>​    hadoop fs -copFromLocal    类似put</p><p>​    hadoop fs -moveFromLocal    将本地文件上传到HDFS,同时删除本地文件</p><p>2.hadoop fsadmin</p><p>​    hadoop dfsadmin -report</p><p>​    hadoop dfsadmin -safemode enter|leave|get|wait</p><p>​    hadoop dfsadmin -setBalancerBandwidth 1000</p><p>3.hadoop fsck 健康检查</p><p>4.start_balancer.sh    多节点数据平衡</p><p>5.hdfs diskbalancer    单节点多块磁盘数据平衡</p><p>6.–help    命令帮助</p><h3 id="2-HDFS-HA架构原理梳理"><a href="#2-HDFS-HA架构原理梳理" class="headerlink" title="2.HDFS HA架构原理梳理"></a>2.HDFS HA架构原理梳理</h3><p>bigdata001 Namenode    (active)    对外提供读写服务</p><p>bigdata001  Namenode    (standby)    当active nn节点挂掉了,此节点状态由standby切换为active,对外提供读写服务,对于外界使用来说，是无感知的，平滑过渡的！</p><p>Datanode</p><p>最小版的集群:</p><p>bigdata001:    zookeeper    namenode    zkfc(ZookeeperFailoverControl)    journalnode    datanode</p><p>bigdata002:    zookeeper    namenode    zkfc(ZookeeperFailoverControl)    journalnode    datanode</p><p>bigdata003:    zookeeper                                                                                       journalnode    datanode</p><p><strong>架构图:</strong></p><p><img src="https://i.loli.net/2021/01/14/RpGjcm9XNFYQTq5.png"></p><p>各个组件的作用:</p><p><strong>active namenode:</strong></p><p>接收client的rpc请求,同时自己的editlig文件写一条记录,同时发给jn日志集群一条,也同时datanode的心跳和块报告.</p><p><strong>standby namenode:</strong></p><p>同时会接收jn日志集群的这条记录,在自己本身执行这条记录,使得自己的元数据和active namenode的元数据一致,这步叫做重演.也同时接收datanode的心跳和块报告.也随时等待从standby转为active状态,对外提供服务.</p><p><strong>jn:</strong></p><p>是nn active/standby的同步数据,至少3台(奇数台),允许失败(N-1)/2台</p><p><strong>datanode:</strong></p><p>同时向两个nn发送心跳和块报告</p><p><strong>zkfc:</strong></p><p>监控nn的健康状态,向zk集群定期发送心跳,使得自己被选举上,当该节点被zk选举为active时,zkfc进程通过rpc调用nn状态变为active.</p><p>tips:集群一般不会出现两个active或者standby的情况,如果出现先确认日志是否报错,如没报错则使用haadmin命令强制切换状态即可,如报错解决之后切换状态.</p><h3 id="3-Yarn-HA架构"><a href="#3-Yarn-HA架构" class="headerlink" title="3.Yarn HA架构"></a>3.Yarn HA架构</h3><p>yarn是Hadoop的资源作业调度</p><p>最小版集群:</p><p>bigdata001:    zookeeper    resoucemanager    nodemanager</p><p>bigdata002:    zookeeper    resoucemanager    nodemanager</p><p>bigdata003:    zookeeper                                      nodemanager</p><p>架构图:</p><p><img src="https://i.loli.net/2021/01/14/IgvftihZoJRDXn5.png"></p><p>各个组件的作用:</p><p><strong>resourcemanager:</strong></p><p>1.启动时回向zk集群的hadoop-ha目录写个lock文件,写成功就标识为active,否则为standby.standby rm会一直监控lock文件是否存在,如果不存在就尝试去创建，争取成为active.</p><p>2.会接收client客户端的请求,接收和监控nm的资源资源汇报，负责资源的分配和调度，启动和监控application master.</p><p><strong>nodemanager:</strong></p><p>启动container,运行task计算,上报资源和计算情况给application master.</p><p><strong>rmsotre:</strong></p><p>1.rm的作业信息是存储在zk的/restore,active rm会向这个目录写作业app信息.</p><p>2.当active rm挂掉了,另外一个standby rm成功转为active状态,就会从这个目录读取对应的作业的信息重新构建作业的内存信息,启动内部服务,开始接受NM心跳,构建集群资源信息,且开始接受客户端提交的作业请求.</p><p><strong>HDFS HA与Yarn HA的对比:</strong></p><table><thead><tr><th>HDFS</th><th>YARN</th></tr></thead><tbody><tr><td>ZKFC是进程</td><td>ZKFC是线程</td></tr><tr><td>DN是汇报给两个NN</td><td>NM汇报的是active节点</td></tr><tr><td>NN的状态存储是专门的日志集群</td><td>利用现成的zk集群</td></tr></tbody></table><h3 id="4-官网研读"><a href="#4-官网研读" class="headerlink" title="4.官网研读"></a>4.官网研读</h3><p><a href="https://hadoop.apache.org/docs/r2.10.1/hadoop-project-dist/hadoop-hdfs/HDFSHighAvailabilityWithQJM.html">https://hadoop.apache.org/docs/r2.10.1/hadoop-project-dist/hadoop-hdfs/HDFSHighAvailabilityWithQJM.html</a></p><h4 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h4><p>Prior to Hadoop 2.0.0, the NameNode was a single point of failure (SPOF) in an HDFS cluster. Each cluster had a single NameNode, and if that machine or process became unavailable, the cluster as a whole would be unavailable until the NameNode was either restarted or brought up on a separate machine.</p><p>在Hadoop2.0.0之前,一个HDFS集群只有一个NameNode是存在单点故障的(SPOF).每个集群只有一个单独的NameNOde,如果这个机器或者进程不可用了,则整个集群就变的不可用了,直到NameNode重启或者在其他机器重启.</p><p>This impacted the total availability of the HDFS cluster in two major ways:</p><ul><li>In the case of an unplanned event such as a machine crash, the cluster would be unavailable until an operator restarted the NameNode.</li><li>Planned maintenance events such as software or hardware upgrades on the NameNode machine would result in windows of cluster downtime.</li></ul><p>The HDFS High Availability feature addresses the above problems by providing the option of running two redundant NameNodes in the same cluster in an Active/Passive configuration with a hot standby. This allows a fast failover to a new NameNode in the case that a machine crashes, or a graceful administrator-initiated failover for the purpose of planned maintenance.</p><p>这从两个主要方面影响了HDFS集群的总可用性:</p><ul><li>如果反生不可预料的事故就像机器崩溃了,这个机器将不可用直到操作者重启NameNode</li><li>计划的维修情况,如NameNode所在的机器硬件或软件升级会导致windows集群停机</li></ul><p>HDFS高可用性功能通过提供在具有热备用功能的主动/被动配置中在同一群集中运行两个冗余NameNode的选项来解决上述问题.这可以在计算机崩溃的情况下快速故障转移到新的NameNode，或者出于计划维护的目的由管理员发起的正常故障转移。</p><h4 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h4><p>In a typical HA cluster, two separate machines are configured as NameNodes. At any point in time, exactly one of the NameNodes is in an <em>Active</em> state, and the other is in a <em>Standby</em> state. The Active NameNode is responsible for all client operations in the cluster, while the Standby is simply acting as a slave, maintaining enough state to provide a fast failover if necessary.</p><p>在典型的HA机器,在两台分开的机器上配置NameNode.在任何时间点,确保一个NameNode处于Active状态,另外一个处于standby状态.这个Active NameNode负责为集群所有的client操作者提供服务,而StandBy只充当从属,或者出于计划维护的目的由管理员发起的正常故障转移。</p><p>In order for the Standby node to keep its state synchronized with the Active node, both nodes communicate with a group of separate daemons called “JournalNodes” (JNs). When any namespace modification is performed by the Active node, it durably logs a record of the modification to a majority of these JNs. The Standby node is capable of reading the edits from the JNs, and is constantly watching them for changes to the edit log. As the Standby Node sees the edits, it applies them to its own namespace. In the event of a failover, the Standby will ensure that it has read all of the edits from the JournalNodes before promoting itself to the Active state. This ensures that the namespace state is fully synchronized before a failover occurs.</p><p>为了实现Standby节点保持其状态与Active节点保持一致,两个节点都与一组叫做JN的但单独的守护进程通信.当Active节点执行修改命名空间时,它将会持久地将修改记录记录到这些JN大多数节点中.Standby节点可以读取这些JNs的日志,并且不断的监控edit log中的修改内容.当Standby节点查看到这些日志,它会将其应用在自己所属的命名空间中.当失败转移时,Standby节点在转化为Active状态之前将会确保它读到JNs的所有编辑内容.这样确保它的命名空间状态和发生故障转移之前完全同步.</p><p>In order to provide a fast failover, it is also necessary that the Standby node have up-to-date information regarding the location of blocks in the cluster. In order to achieve this, the DataNodes are configured with the location of both NameNodes, and send block location information and heartbeats to both.</p><p>为了实现快速故障转移,Standby节点也必须能够同步最新的集群块的位置信息.为了实现这点,DataNodes配置了这两个NameNodes的位置,并且给它们两个发送block位置信息和心跳报告.</p><p>It is vital for the correct operation of an HA cluster that only one of the NameNodes be Active at a time. Otherwise, the namespace state would quickly diverge between the two, risking data loss or other incorrect results. In order to ensure this property and prevent the so-called “split-brain scenario,” the JournalNodes will only ever allow a single NameNode to be a writer at a time. During a failover, the NameNode which is to become active will simply take over the role of writing to the JournalNodes, which will effectively prevent the other NameNode from continuing in the Active state, allowing the new Active to safely proceed with failover.</p><p>对于HA集群的操作至关重要,一次只能有一个NameNode是Active状态.否则命名空间状态将会在这两者之间迅速分散,导致数据丢失的风险或者其他不正确的结果.为了确保这种属性和预防这种叫做”脑裂”情况,JNs将每次只允许一个NameNode进行写操作,当故障转移时,那个将变为active的Namenode讲仅作为写入JN的角色,这将有效的防止另一个NameNode继续是Active状态,从而使新的Active节点安全的实现故障转移.</p><h4 id="Hardware-resources"><a href="#Hardware-resources" class="headerlink" title="Hardware resources"></a>Hardware resources</h4><p>In order to deploy an HA cluster, you should prepare the following:</p><p>为了部署高可用的集群,你需要准备如下几点:</p><ul><li><strong>NameNode machines</strong> - the machines on which you run the Active and Standby NameNodes should have equivalent hardware to each other, and equivalent hardware to what would be used in a non-HA cluster.</li><li>NameNode机器-这个机器用来跑Active和Standby NameNodes需要为两个都准备相同硬件环境,和非HA集群的使用相同的硬件.</li><li><strong>JournalNode machines</strong> - the machines on which you run the JournalNodes. The JournalNode daemon is relatively lightweight, so these daemons may reasonably be collocated on machines with other Hadoop daemons, for example NameNodes, the JobTracker, or the YARN ResourceManager. <strong>Note:</strong> There must be at least 3 JournalNode daemons, since edit log modifications must be written to a majority of JNs. This will allow the system to tolerate the failure of a single machine. You may also run more than 3 JournalNodes, but in order to actually increase the number of failures the system can tolerate, you should run an odd number of JNs, (i.e. 3, 5, 7, etc.). Note that when running with N JournalNodes, the system can tolerate at most (N - 1) / 2 failures and continue to function normally.</li><li>JN机器-这些机器用来运行JNs几点,JN的守护进程相对轻量级,因此可以将这些进程合理的和其他的Hadoop守护进程并置在机器上,例如:NameNodes, the JobTracker, or the YARN ResourceManager.注意:这里必须有至少三个JN守护进程,且当edit log发生修改必须写入大多数JNs.这将允许系统容忍一个单独的机器故障.你也可以运行超过3个JNs,但是为了实际增加系统容忍故障机器的个数,你需要运行奇数个JNs.注意当运行N个JNs时,系统最多可容忍(N-1)/2故障,并且继续正常运行.</li></ul><p>Note that, in an HA cluster, the Standby NameNode also performs checkpoints of the namespace state, and thus it is not necessary to run a Secondary NameNode, CheckpointNode, or BackupNode in an HA cluster. In fact, to do so would be an error. This also allows one who is reconfiguring a non-HA-enabled HDFS cluster to be HA-enabled to reuse the hardware which they had previously dedicated to the Secondary NameNode.</p><p>注意,在高可用集群中,Standby NameNode也执行检查点动作和命名空间状态,因此在HA集群不必在去运行SNN, CheckpointNode, or BackupNode 节点,事实上,这样做是错误的.这还允许正在重新配置未启用HA的HDFS群集的用户启用HA，以重用他们先前专用于SNN的硬件。</p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop HA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux总结</title>
      <link href="2019/02/22/linux-zong-jie/"/>
      <url>2019/02/22/linux-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="一-Linux"><a href="#一-Linux" class="headerlink" title="一 Linux"></a>一 Linux</h3><h4 id="1-1-文件-文件夹"><a href="#1-1-文件-文件夹" class="headerlink" title="1.1 文件/文件夹"></a>1.1 文件/文件夹</h4><p>ls -l -a     #显示隐藏文件</p><p>#以.开头的文件或文件夹就是隐藏文件</p><p>ls -l -h #仅仅查看文件的大小</p><p>ls -l -r -t #按时间排序 =&gt; ls -lrt</p><p>mkdir xx</p><p>mkdir -p xxx/xxx </p><p>cd #切换目录</p><p>cd ../ #退回上层目录</p><p>cd ../../  #退回上两层目录</p><p>#回到当前用户家目录</p><p>cd 回车</p><p>cd ~</p><p>cd - #回退到上一次目录</p><p>创建文件:</p><p>touch xxx</p><p>vi xxx.log</p><p>查看文件:</p><p>cat</p><p>tail</p><p>less</p><p>more</p><h4 id="1-2-用户"><a href="#1-2-用户" class="headerlink" title="1.2 用户"></a>1.2 用户</h4><p>用户信息文件:</p><p>/etc/passwd</p><p>hadoop:<code>x</code>:1000:1000::/home/hadoop:/bin/bash</p><p>添加用户:</p><p>useradd xxxx</p><p>删除用户:</p><p>userdel xxx</p><p>切换用户:</p><p>su - xxx</p><p>修改用户:</p><p>chown</p><p>创建用户组:</p><p>groupadd xxx</p><pre class=" language-shell"><code class="language-shell">usermod -d /tmp #单独使用时，只是把保存在/etc/passwd这个配置文件当中的源目录名改成指定的新目录名，并不会把源目录下的内容移动到新目录下，如果要把源目录下的内容移动新目录下，则要和-m选项一起使用，才会把源目录下的内容移动到新目录下。</code></pre><pre class=" language-shell"><code class="language-shell">usermod -a -G dw xx  #添加用户xx  到组dw 里</code></pre><pre class=" language-shell"><code class="language-shell">usermod -g dw xx     #修改用户所属的群组</code></pre><pre class=" language-shell"><code class="language-shell">groupsmems -g xx -l #查看组的所有成员</code></pre><pre class=" language-shell"><code class="language-shell">sudo #普通用户临时使用root的最大权限</code></pre><h4 id="1-3-权限"><a href="#1-3-权限" class="headerlink" title="1.3 权限"></a>1.3 权限</h4><pre class=" language-shell"><code class="language-shell">d    rwx    r-x    r-x 第一个字符d代表文件夹 -文件接下来三组的三个字母 分别是代表 读r 4,写w 2,执行x 1,-没有权限 0rwx:7        r-x:5        r-x :5#所属用户    所属组的成员    其他组的成员777 rwxrwxrwx755 rwxr-xr-xchmod 640 xxx.log    所属成员可读可写,所属组其他成员可读,其他组成员不可读写执chmod u+x xxx     给xxx加x权限</code></pre><h4 id="1-4-网络"><a href="#1-4-网络" class="headerlink" title="1.4 网络"></a>1.4 网络</h4><p>ping ip        测试网络是否连通</p><p>telnet ip port        用来确定远程服务的状态，探测远程服务器的某个端口是否能访问</p><p>netstat -nlp | grep pid        查看进程信息</p><h4 id="1-5-常用命令"><a href="#1-5-常用命令" class="headerlink" title="1.5 常用命令"></a>1.5 常用命令</h4><p>top    查看内存的使用情况</p><p>df    文件系统的磁盘使用情况</p><p>​    -h选项，通过它可以产生可读的格式输出</p><p>ps    </p><p>​    -ef | grep xxx 查看关于xxx的进程</p><p>aux</p><p>tail    </p><p>​    -f    从文件尾部监控文件</p><p>​    -F    从文件尾部监控文件,如果文件不存在则retry</p><p>less    查看文件</p><p>date    返回系统日期</p><p>netstat    </p><p>​        -a 显示所有socket，包括正在监听的。<br>　　-c 每隔1秒就重新显示一遍，直到用户中断它。<br>　　-i 显示所有网络接口的信息，格式“netstat -i”。<br>　　-n 以网络IP地址代替名称，显示出网络连接情形。<br>　　-r显示核心路由表，格式同“route -e”。<br>　　-t 显示TCP协议的连接情况<br>　　-u 显示UDP协议的连接情况。<br>　　-v 显示正在进行的工作。<br>　　-p 显示建立相关连接的程序名和PID。<br>　　-b 显示在创建每个连接或侦听端口时涉及的可执行程序。<br>　　-e 显示以太网统计。此选项可以与 -s 选项结合使用。<br>　　-f 显示外部地址的完全限定域名(FQDN)。<br>　　-o显示与与网络计时器相关的信息。</p><p>awk    按域拆分文本</p><p>​    #取第一列的域,如果需要取多个域加逗号即可<br>​    awk ‘{print $1}’</p><p>​    #取第一行数据<br>​    awk ‘NR==1{print}’</p><p>​    #取第二行第二列<br>​    awk ‘NR==2{print $2}’</p><p>sed    替换文本</p><p>​    #把t.log的a替换为aa<br>​    sed -i ‘s/a/aa’ t.log</p><p>​    #全局替换后面加g即可<br>​    sed -i ‘s/a/cc/g’ t.log</p><p>​    #特殊字符替换,如’/‘<br>​    sed -i ‘s///d/g’ t.log</p><h3 id="二-Shell"><a href="#二-Shell" class="headerlink" title="二 Shell"></a>二 Shell</h3><h4 id="2-1-shell实现wordcount"><a href="#2-1-shell实现wordcount" class="headerlink" title="2.1 shell实现wordcount"></a>2.1 shell实现wordcount</h4><pre class=" language-shell"><code class="language-shell">#!/bin/bashcat $1 | tr 'A-Z' 'a-z' |\egrep -o "\b[[:alpha:]]+\b" | \awk '&#123; count[$0]++ &#125;END&#123;for(ind in count)&#123; printf("%-14s%d\n",ind,count[ind]); &#125;&#125;' | sort -k2 -n -r</code></pre><p>参考网址为：<a href="https://www.poets.org/poetsorg/poem/road-not-taken">https://www.poets.org/poetsorg/poem/road-not-taken</a> </p><h4 id="2-2-对emp-txt的sal求和"><a href="#2-2-对emp-txt的sal求和" class="headerlink" title="2.2 对emp.txt的sal求和"></a>2.2 对emp.txt的sal求和</h4><pre class=" language-shell"><code class="language-shell"> awk -F'\t' '&#123;sum += $6&#125;;END &#123;print sum&#125;' emp.txt</code></pre><h4 id="2-3-判断文件是否存在"><a href="#2-3-判断文件是否存在" class="headerlink" title="2.3 判断文件是否存在"></a>2.3 判断文件是否存在</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#!/bin/bash</span>FILENAME<span class="token operator">=</span>$<span class="token number">1</span><span class="token comment" spellcheck="true">#find ./ -name $FILENAME</span>PATH<span class="token operator">=</span><span class="token punctuation">`</span>pwd<span class="token punctuation">`</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">-</span><span class="token number">f</span> $PATH<span class="token operator">/</span>$FILENAME <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        echo "$PATH<span class="token operator">/</span>$<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;FILENAME&amp;#125;"</span><span class="token keyword">else</span>         touch $PATH<span class="token operator">/</span>$FILENAMEfi</code></pre><h4 id="2-4-查看一个目录下包含子目录xxxx后缀的文件数"><a href="#2-4-查看一个目录下包含子目录xxxx后缀的文件数" class="headerlink" title="2.4 查看一个目录下包含子目录xxxx后缀的文件数"></a>2.4 查看一个目录下包含子目录xxxx后缀的文件数</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#!/bin/bash</span>find <span class="token operator">/</span>home<span class="token operator">/</span>hadoop<span class="token operator">/</span>test<span class="token operator">/</span><span class="token operator">*</span> <span class="token operator">-</span>name <span class="token string">'*.scala'</span> <span class="token operator">></span> find<span class="token punctuation">.</span>logwc <span class="token operator">-</span>l find<span class="token punctuation">.</span>log</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flume基础03</title>
      <link href="2019/02/20/flume03/"/>
      <url>2019/02/20/flume03/</url>
      
        <content type="html"><![CDATA[<p>一进多出:</p><p>vi channel-replicating-selector.conf</p><pre><code>a1.sources = r1a1.channels = c1 c2 a1.sinks = k1 k2#sourcea1.sources.r1.type = netcata1.sources.r1.bind = localhosta1.sources.r1.port = 44444a1.sources.r1.selector.type = replicatinga1.sources.r1.channels = c1 c2 a1.channels.c1.type = memorya1.channels.c2.type = memory#sinka1.sinks.k1.type = hdfsa1.sinks.k1.hdfs.path = /flume/%Y%m%d%H%Ma1.sinks.k1.hdfs.fileSuffix = hdfsa1.sinks.k1.hdfs.fileType = DataStreama1.sinks.k1.hdfs.writeFormat = Writablea1.sinks.k1.hdfs.round = truea1.sinks.k1.hdfs.useLocalTimeStamp = truea1.sinks.k1.hdfs.roundValue = 1a1.sinks.k1.hdfs.roundUnit = minutea1.sinks.k1.hdfs.callTimeout = 6000a1.sinks.k2.type = logger#sink to channela1.sinks.k1.channel = c1a1.sinks.k2.channel = c2</code></pre><p>执行:</p><pre><code>flume-ng agent \--name a1 \--conf $FLUME_HOME/conf \--conf-file $FLUME_HOME/conf/channel-replicating-selector.conf \-Dflume.root.logger=INFO,console</code></pre><p>连接44444并发送数据:</p><p>[hadoop@warehouse001 data]$ telnet localhost 44444<br>Trying 127.0.0.1…<br>Connected to localhost.<br>Escape character is ‘^]’.<br>hello world<br>OK<br>1111<br>OK</p><p>查看数据:</p><p>[hadoop@warehouse001 ~]$ hdfs dfs -text /flume/2019102172109/*</p><p>hello world</p>]]></content>
      
      
      <categories>
          
          <category> Flume </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flume </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flume基础</title>
      <link href="2019/02/15/flume01/"/>
      <url>2019/02/15/flume01/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Flume"><a href="#1-Flume" class="headerlink" title="1 Flume"></a>1 Flume</h3><h4 id="1-1-解压"><a href="#1-1-解压" class="headerlink" title="1.1 解压"></a>1.1 解压</h4><p>tar -zxvf flume-ng-1.6.0-cdh5.16.2.tar.gz -C  ../app/</p><h4 id="1-2-配置环境变量"><a href="#1-2-配置环境变量" class="headerlink" title="1.2 配置环境变量"></a>1.2 配置环境变量</h4><p>环境变量下追加:</p><p>export FLUME_HOME=/home/hadoop/app/apache-flume-1.6.0-cdh5.16.2-bin<br>export PATH=$FLUME_HOME/bin:$PATH</p><h4 id="1-3-Flume的三个核心组件"><a href="#1-3-Flume的三个核心组件" class="headerlink" title="1.3 Flume的三个核心组件"></a>1.3 Flume的三个核心组件</h4><p><strong>Source:</strong>    对接数据源</p><p>​    <strong>avro</strong></p><p>​    exec</p><p>​    kafka</p><p>​    Splooling Directory</p><p>​    <strong>Taildir</strong> </p><p>​    nc</p><p>​    http</p><p>​    Custom</p><p><strong>Channel:</strong>    聚集</p><p>​    Source和Sink之间的缓冲区</p><p>​    memory</p><p>​    file</p><p>​    kafka</p><p><strong>Sink:</strong>    对接目的地</p><p>​    HDFS</p><p>​    Hive</p><p>​    Logger</p><p>​    <strong>Kafka</strong></p><p>​    <strong>Avro</strong></p><p>​    Custom</p><h4 id="1-4-Flume-Agent配置文件"><a href="#1-4-Flume-Agent配置文件" class="headerlink" title="1.4 Flume Agent配置文件"></a>1.4 Flume Agent配置文件</h4><pre><code># example.conf: A single-node Flume configuration# Name the components on this agent# a1: agent名字    r1:Source名字        k1:Sink的名字        c1:Channel的名字a1.sources = r1a1.sinks = k1a1.channels = c1# Describe/configure the sourcea1.sources.r1.type = netcata1.sources.r1.bind = localhosta1.sources.r1.port = 44444# Describe the sinka1.sinks.k1.type = logger# Use a channel which buffers events in memorya1.channels.c1.type = memory# Bind the source and sink to the channel    这里把source,chanel,sink连接起来a1.sources.r1.channels = c1a1.sinks.k1.channel = c1</code></pre><p>起agent进程:</p><pre><code>flume-ng agent \--name a1 \--conf $FLUME_HOME/config \--conf-file $FLUME_HOME/config/example.conf \-Dflume.root.logger=INFO,console</code></pre><p>先起agent进程,再起netcat:</p><p>telnet localhost 44444</p><p>传输信息:</p><p>INFO sink.LoggerSink: Event: { headers:{} body: 31 0D                                           1. }</p><h4 id="1-5-监控文件到HDFS"><a href="#1-5-监控文件到HDFS" class="headerlink" title="1.5 监控文件到HDFS"></a>1.5 监控文件到HDFS</h4><p>架构选型:</p><p>​    exec source</p><p>​    HDFS Sink</p><p>​    </p><pre class=" language-shell"><code class="language-shell">exec2HDFS.sources = exec-sourceexec2HDFS.channels = exec-memory-channelexec2HDFS.sinks = hdfs-sink# Describe/configure the sourceexec2HDFS.sources.exec-source.type = execexec2HDFS.sources.exec-source.command = tail -F ~/data/data.logexec2HDFS.sources.exec-source.shell = /bin/sh -c# Describe the sinkexec2HDFS.sinks.hdfs-sink.type = hdfsexec2HDFS.sinks.hdfs-sink.hdfs.path = hdfs://warehouse001:8020/tmp/dataexec2HDFS.sinks.hdfs-sink.hdfs.fileType = DataStreamexec2HDFS.sinks.hdfs-sink.hdfs.writeFormat = Textexec2HDFS.sinks.hdfs-sink.hdfs.batchSize = 10# Use a channel which buffers events in memoryexec2HDFS.channels.exec-memory-channel.type = memory# Bind the source and sink to the channel    exec2HDFS.sources.exec-source.channels = exec-memory-channel  exec2HDFS.sinks.hdfs-sink.channel = exec-memory-channel</code></pre><p>起agent进程:</p><pre><code>flume-ng agent \--name exec2HDFS \--conf $FLUME_HOME/config \--conf-file $FLUME_HOME/config/exec2HDFS.conf \-Dflume.root.logger=INFO,console</code></pre><p>写数据到data.log</p><p>for i in {1..100};do echo “hello $i” &gt;&gt; ~/data/data.log;sleep 0.1;done</p><p>日志内容:</p><p>INFO hdfs.BucketWriter: Renaming hdfs://warehouse001:9000/tmp/data/FlumeData.1612794514315.tmp to hdfs://warehouse001:9000/tmp/data/FlumeData.1612794514315</p><p>会先写一个tmp的文件,写完后rename为FlumeData.1612794514315</p>]]></content>
      
      
      <categories>
          
          <category> Flume </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flume </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell基础</title>
      <link href="2019/02/15/shell-ji-chu-01/"/>
      <url>2019/02/15/shell-ji-chu-01/</url>
      
        <content type="html"><![CDATA[<h3 id="1-脚本规范"><a href="#1-脚本规范" class="headerlink" title="1.脚本规范"></a>1.脚本规范</h3><h4 id="1-1-第一行"><a href="#1-1-第一行" class="headerlink" title="1.1 第一行:"></a>1.1 第一行:</h4><p>#!/bin/bash</p><p>第一行是解释器,脚本后缀一般是.sh</p><p>/etc/passwd文件保存的是用户信息和命令解释器</p><p>/bin/bash</p><p>/bin/false</p><p>/sbin/nologin</p><p>后面两种是切换不到用户的.</p><h4 id="1-2-脚本的执行"><a href="#1-2-脚本的执行" class="headerlink" title="1.2 脚本的执行:"></a>1.2 脚本的执行:</h4><p>1.给脚本加x权限</p><p>./xxx.sh或者脚本的绝对路径</p><p>2.sh xxx.sh</p><p>这种是不关心绝对路径还是相对路径,第一行没有也可以执行,无视权限的.</p><h4 id="1-3-debug语法"><a href="#1-3-debug语法" class="headerlink" title="1.3 debug语法:"></a>1.3 debug语法:</h4><p>sh -x xxx.sh</p><h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h3><h4 id="2-1-变量定义规范"><a href="#2-1-变量定义规范" class="headerlink" title="2.1 变量定义规范"></a>2.1 变量定义规范</h4><p>DATE=”date”</p><p>D1=’date’</p><p>D2=`date`</p><pre class=" language-shell"><code class="language-shell">#!/bin/bashDATE="date"D1='date'D2=`date`echo $DATEecho $D1echo $D2</code></pre><p>执行结果:</p><p>date<br>date<br>Sat Jan 23 17:26:10 CST 2019</p><p>注意事项:</p><p>1.变量名要大写</p><p>2.=前后不能有空格</p><p>3.使用变量名称时尽量使用{}括起来,如${DATE}</p><p>当把echo $D2改为echo $D222时,输出的结果为</p><p>date<br>date</p><p>但是加上将D2变量加上{},执行结果则为</p><p>date<br>date<br>Sat Jan 23 17:32:34 CST 2019222</p><p>所以使用参数时尽量使用${XXX}格式,避免不必要的错误.</p><p>4.静态表达</p><p>K=”V”</p><p>K=’V’</p><p>K=V</p><p>动态表达</p><p>K=`V`</p><p>当脚本执行的时候才会调用值.</p><h4 id="2-2-参数"><a href="#2-2-参数" class="headerlink" title="2.2 参数"></a>2.2 参数</h4><p>$#:参数的个数</p><p>$*:所有的参数</p><p>$$:获取当前进程PID</p><h4 id="2-3-数组"><a href="#2-3-数组" class="headerlink" title="2.3 数组"></a>2.3 数组</h4><pre class=" language-shell"><code class="language-shell">#!/bin/bashARRAY=(hello world !)echo $&#123;ARRAY[@]&#125;echo $&#123;ARRAY[1]&#125;echo $&#123;#ARRAY[@]&#125;               </code></pre><p>执行结果:</p><p>hello world !<br>world<br>3</p><pre class=" language-shell"><code class="language-shell">$&#123;ARRAY[@]&#125;:数组内容$&#123;ARRAY[1]&#125;:取第几个参数$&#123;#ARRAY[@]&#125; :数组个数</code></pre><h4 id="2-4-if判断"><a href="#2-4-if判断" class="headerlink" title="2.4 if判断"></a>2.4 if判断</h4><pre class=" language-shell"><code class="language-shell">#!/bin/bashA='a'B='b'if [ $&#123;A&#125; == $&#123;B&#125; ];then        echo "=="else        echo "!"fi</code></pre><p>注意:</p><p><strong>[    ] 前后需要有空格</strong></p><p><strong>== 前后需要投空格</strong></p><p>并或判断:</p><pre class=" language-shell"><code class="language-shell">#!/bin/bashA='a'B='b'C='c'if [ $&#123;A&#125; == $&#123;B&#125; ] && [[$&#123;B&#125; == $&#123;C&#125; ];then        echo 'a==b or b==c'else        echo 'a!=b and b!=c'fiif [ $&#123;A&#125; == $&#123;B&#125; ] || [ $&#123;B&#125; == $&#123;C&#125; ];then        echo "a==b and b==c"else        echo "a!=b or b!=c"fi</code></pre><h4 id="2-5-for-while循环"><a href="#2-5-for-while循环" class="headerlink" title="2.5 for while循环"></a>2.5 for while循环</h4><pre class=" language-shell"><code class="language-shell">#!/bin/bashfor x in a b c ddo    echo $xdonefor ((i=1;i<10;i++))do    echo $idoney=1while (($y<10))do    echo $y    let "y++"done</code></pre><h4 id="2-6-分隔字符串"><a href="#2-6-分隔字符串" class="headerlink" title="2.6 分隔字符串"></a>2.6 分隔字符串</h4><p>第一种:</p><pre class=" language-shell"><code class="language-shell">#!/bin/bashSTR="Hello,world,!"OLD_IFS="$IFS"IFS=","ARR=($STR)IFS="$OLD_IFS"echo $&#123;ARR[*]&#125;for x in $&#123;ARR[*]&#125;do    echo $xdone</code></pre><h4 id="2-7-awk语法"><a href="#2-7-awk语法" class="headerlink" title="2.7 awk语法"></a>2.7 awk语法</h4><pre class=" language-shell"><code class="language-shell">#取第一列的域,如果需要取多个域加逗号即可awk '&#123;print $1&#125;'#取第一行数据awk 'NR==1&#123;print&#125;'#取第二行第二列awk 'NR==2&#123;print $2&#125;'</code></pre><h4 id="2-8-sed语法"><a href="#2-8-sed语法" class="headerlink" title="2.8 sed语法"></a>2.8 sed语法</h4><pre class=" language-shell"><code class="language-shell">#把t.log的a替换为aased -i 's/a/aa' t.log#全局替换后面加g即可sed -i 's/a/cc/g' t.log#特殊字符替换,如'/'sed -i 's/\//d/g' t.log</code></pre><p>补充:</p><p>1.尾行</p><p>exit 0 正常结束</p><p>exit 1 异常结束</p><p>2.在第二行加set -u</p><p>作业就是在脚本中变量未定义时执行会报错</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive总结</title>
      <link href="2019/01/31/hive-zong-jie/"/>
      <url>2019/01/31/hive-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="一-Hive基础总结"><a href="#一-Hive基础总结" class="headerlink" title="一 Hive基础总结"></a>一 Hive基础总结</h3><h4 id="1-1-Hive简介"><a href="#1-1-Hive简介" class="headerlink" title="1.1 Hive简介"></a>1.1 Hive简介</h4><p>Hive是构建在Hadoop之上的数据仓库</p><p>Hive主要是用来跑离线批处理作业,时效性较差.</p><h4 id="1-2-Hive与RDBMS对比"><a href="#1-2-Hive与RDBMS对比" class="headerlink" title="1.2 Hive与RDBMS对比"></a>1.2 Hive与RDBMS对比</h4><p>从以下几点对比:</p><p>分布式</p><p>节点数</p><p>成本</p><p>数据量</p><p>事务</p><h4 id="1-3-Hive架构"><a href="#1-3-Hive架构" class="headerlink" title="1.3 Hive架构"></a>1.3 Hive架构</h4><p><img src="https://i.loli.net/2020/12/07/Ct2pr6bKSjJonc7.png"></p><h4 id="1-4-加载数据到Hive表中"><a href="#1-4-加载数据到Hive表中" class="headerlink" title="1.4 加载数据到Hive表中"></a>1.4 加载数据到Hive表中</h4><p>load data local inpath ‘/home/hadoop/data/emp.txt’ overwrite into table emp;</p><p>load data inpath ‘/home/data/emp.txt’ overwrite into table emp;</p><p>insert into emp select * from xxx</p><p>CTAS</p><h4 id="1-5-内外部表的互相转换"><a href="#1-5-内外部表的互相转换" class="headerlink" title="1.5 内外部表的互相转换"></a>1.5 内外部表的互相转换</h4><p>ALTER TABLE emp_external SET TBLPROPERTIES (‘EXTERNAL’ = ‘false’);</p><p><strong>EXTERNAL</strong>参数必须为大写</p><p>内部表同理转换.</p><p>内部表与外部表的区别:内部表删除表会删除元数据和hdfs上的数据文件,而外部表则只删除元数据信息.所以外部表比内部表更安全.</p><h4 id="1-6-order-by、sort-by、distribute-by、cluster-by区别"><a href="#1-6-order-by、sort-by、distribute-by、cluster-by区别" class="headerlink" title="1.6 order by、sort by、distribute by、cluster by区别"></a>1.6 order by、sort by、distribute by、cluster by区别</h4><p><strong>order By</strong>：全局排序，一个ReducerTask,也就是对所有的数据进行排序.如果多个Reduce的话是无用的.</p><p><strong>sort by</strong>: 使用Sort By 的话, 需要将ReduceTask最少要大于1,不然没效果. 一个ReduceTask就是一个分区,五个ReduceTask就是五个分区.每个Reduce内部进行排序，对全局结果集来说不是排序。</p><p>设置reduce个数:</p><p>set mapreduce.job.reduces=3;</p><p>查看reduce个数:</p><p>set mapreduce.job.reduces;</p><p>使用sort by查看结果:</p><p>select *  from emp sort by sal desc;</p><p>此时的结果是无序的:</p><p>emp.empno       emp.ename       emp.job emp.mgr emp.hiredate    emp.sal emp.comm        emp.deptno<br>7839    KING    PRESIDENT       NULL    1981-11-17      5000.0  NULL    10<br>7788    SCOTT   ANALYST 7566    1987-4-19       3000.0  NULL    20<br>7698    BLAKE   MANAGER 7839    1981-5-1        2850.0  NULL    30<br>7782    CLARK   MANAGER 7839    1981-6-9        2450.0  NULL    10<br>7844    TURNER  SALESMAN        7698    1981-9-8        1500.0  0.0     30<br>7654    MARTIN  SALESMAN        7698    1981-9-28       1250.0  1400.0  30<br>7566    JONES   MANAGER 7839    1981-4-2        2975.0  NULL    20<br>7499    ALLEN   SALESMAN        7698    1981-2-20       1600.0  300.0   30<br>7934    MILLER  CLERK   7782    1982-1-23       1300.0  NULL    10<br>7521    WARD    SALESMAN        7698    1981-2-22       1250.0  500.0   30<br>7876    ADAMS   CLERK   7788    1987-5-23       1100.0  NULL    20<br>7900    JAMES   CLERK   7698    1981-12-3       950.0   NULL    30<br>7902    FORD    ANALYST 7566    1981-12-3       3000.0  NULL    20<br>7369    SMITH   CLERK   7902    1980-12-17      800.0   NULL    20</p><p>导出数据到指定目录到指定文件才可以看出结果:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> overwrite <span class="token keyword">local</span> directory <span class="token string">'/home/hadoop/data/sortby/emp.data'</span>    <span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">'\t'</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> emp sort <span class="token keyword">by</span> sal <span class="token keyword">desc</span><span class="token punctuation">;</span></code></pre><p>在/home/hadoop/data/sortby/emp.data会有三个文件,此时每个文件是有序的,原因是在每个reduce中进行了排序.</p><p>[hadoop@warehouse001 emp.data]$ cat 000000_0<br>7839    KING    PRESIDENT       \N      1981-11-17      5000.0  \N      10<br>7788    SCOTT   ANALYST 7566    1987-4-19       3000.0  \N      20<br>7698    BLAKE   MANAGER 7839    1981-5-1        2850.0  \N      30<br>7782    CLARK   MANAGER 7839    1981-6-9        2450.0  \N      10<br>7844    TURNER  SALESMAN        7698    1981-9-8        1500.0  0.0     30<br>7654    MARTIN  SALESMAN        7698    1981-9-28       1250.0  1400.0  30<br>[hadoop@warehouse001 emp.data]$ cat 000001_0<br>7566    JONES   MANAGER 7839    1981-4-2        2975.0  \N      20<br>7499    ALLEN   SALESMAN        7698    1981-2-20       1600.0  300.0   30<br>7934    MILLER  CLERK   7782    1982-1-23       1300.0  \N      10<br>7521    WARD    SALESMAN        7698    1981-2-22       1250.0  500.0   30<br>7876    ADAMS   CLERK   7788    1987-5-23       1100.0  \N      20<br>7900    JAMES   CLERK   7698    1981-12-3       950.0   \N      30</p><p>[hadoop@warehouse001 emp.data]$ cat 000002_0<br>7902    FORD    ANALYST 7566    1981-12-3       3000.0  \N      20<br>7369    SMITH   CLERK   7902    1980-12-17      800.0   \N      20</p><p><strong>distribute by</strong>:分区排序</p><p>分区和排序都是在shuffle阶段完成,分区是在MapTask阶段的Shuffle完成, 排序是在MapTask完成,在ReduceTask也有完成.<br>分区是使用partition分区器来进行分区的,当你的ReduceTask的个数大于1的时候,先设置用户自己定义的分区器,如果没有的话,缺省使用hash分区器,hash分区器特点是只用key的hashCode来分区.</p><p>你在输入查询语句执行查询的时候,底层是经过了MapReduce程序,会给你输入的字段都封装成key和value,分区只是对key来分区.那么你不知道你哪些数据分散到哪个ReduceTask里面.</p><p>如果你只写sort by的话,那么就是随机分区.如果你希望自己定义使用哪个字段来分区,那么你就需要使用Distribute By字段,这个Distribute By是指定你按哪个字段分区的. Distribute By在全排序是没有意义的,因为全排序是只有一个ReduceTask,那么不管你key是什么的话,全都是0号分区,所以说Distribute By只有结合部分排序才有意义的.所以一般情况下Distribute By 是结合sort by 来使用的</p><p>注意，Hive要求DISTRIBUTE BY语句要写在SORT BY语句之前。</p><p>对于distribute by进行测试，一定要分配多reduce进行处理，否则无法看到distribute by的效果。</p><p>同上,设置3个reduce.</p><p>执行导出语句:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> overwrite <span class="token keyword">local</span> directory <span class="token string">'/home/hadoop/data/distribute'</span>    <span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">'\t'</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> emp distribute <span class="token keyword">by</span> deptno    sort <span class="token keyword">by</span> sal <span class="token keyword">desc</span><span class="token punctuation">;</span></code></pre><p>[hadoop@warehouse001 distribute]$ cat 000000_0<br>7698    BLAKE   MANAGER 7839    1981-5-1        2850.0  \N      30<br>7499    ALLEN   SALESMAN        7698    1981-2-20       1600.0  300.0   30<br>7844    TURNER  SALESMAN        7698    1981-9-8        1500.0  0.0     30<br>7521    WARD    SALESMAN        7698    1981-2-22       1250.0  500.0   30<br>7654    MARTIN  SALESMAN        7698    1981-9-28       1250.0  1400.0  30<br>7900    JAMES   CLERK   7698    1981-12-3       950.0   \N      30<br>[hadoop@warehouse001 distribute]$ cat 000001_0<br>7839    KING    PRESIDENT       \N      1981-11-17      5000.0  \N      10<br>7782    CLARK   MANAGER 7839    1981-6-9        2450.0  \N      10<br>7934    MILLER  CLERK   7782    1982-1-23       1300.0  \N      10<br>[hadoop@warehouse001 distribute]$ cat 000002_0<br>7788    SCOTT   ANALYST 7566    1987-4-19       3000.0  \N      20<br>7902    FORD    ANALYST 7566    1981-12-3       3000.0  \N      20<br>7566    JONES   MANAGER 7839    1981-4-2        2975.0  \N      20<br>7876    ADAMS   CLERK   7788    1987-5-23       1100.0  \N      20<br>7369    SMITH   CLERK   7902    1980-12-17      800.0   \N      20</p><p>这个是根据部门进行分区,对sal进行排序的结果.</p><p><strong>cluster by</strong>:</p><p>当distribute by和sorts by字段相同时，可以使用cluster by方式说白了就是如果你分区的字段和排序的字段一致的话,可以简写为Cluster By</p><p>cluster by就是distribute by+sort by的组合，但是只能默认升序。<br>cluster by除了具有distribute by的功能外还兼具sort by的功能。但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。</p><h4 id="1-7-动态分区VS静态分区"><a href="#1-7-动态分区VS静态分区" class="headerlink" title="1.7 动态分区VS静态分区"></a>1.7 动态分区VS静态分区</h4><h5 id="静态分区"><a href="#静态分区" class="headerlink" title="静态分区:"></a>静态分区:</h5><p><strong>创建</strong>:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> dept_partition<span class="token punctuation">(</span>deptno <span class="token keyword">int</span><span class="token punctuation">,</span>dname string<span class="token punctuation">,</span>loc string<span class="token punctuation">)</span>partitioned <span class="token keyword">by</span> <span class="token punctuation">(</span>day string<span class="token punctuation">)</span><span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> ‘\t’<span class="token punctuation">;</span></code></pre><p><strong>加载数据</strong>:</p><p>load data local inpath ‘/home/hadoop/data/dept_20300901.txt’ overwrite into table dept_partition partition (day=20300901);</p><p><strong>查看数据</strong>:</p><p>select * from dept_partition where day = ‘20300901’;<br>OK<br>dept_partition.deptno dept_partition.dname dept_partition.loc dept_partition.day<br>10 ACCOUNTING NEW YORK 20300901<br>20 RESEARCH DALLAS 20300901<br>30 SALES CHICAGO 20300901<br>40 OPERATIONS BOSTON 20300901</p><p><strong>20300901这一列的数据是不存在HDFS上的</strong></p><p>分区表查询一般都要加分区字段:</p><p>select * from dept_partition where day = ‘20300901’;</p><p>分区表的分区元数据信息维护在partitions表中:</p><p><strong>修改分区语法</strong>:</p><pre><code>ALTER TABLE table_name ADD [IF NOT EXISTS] PARTITION partition_spec [LOCATION &#39;location&#39;][, PARTITION partition_spec [LOCATION &#39;location&#39;], ...];</code></pre><p>alter table dept_partition add partition (day=’20300904’);</p><p><strong>删除分区语法</strong>:</p><pre><code>ALTER TABLE table_name DROP [IF EXISTS] PARTITION partition_spec[, PARTITION partition_spec, ...]  [IGNORE PROTECTION] [PURGE];            -- (Note: PURGE available in Hive 1.2.0 and later, IGNORE PROTECTION not available 2.0.0 and later)</code></pre><p>alter table dept_partition drop partition (day=’20300904’);</p><p><strong>查看分区信息</strong>:</p><p>show partitions dept_partition;</p><p><strong>多级分区</strong>:</p><p>在数据量特别大的时候坑需要多级分区,在分区关键字后面再加其他字段即可</p><p>如:partitioned by (day string,hour string)</p><h4 id="动态分区"><a href="#动态分区" class="headerlink" title="动态分区:"></a>动态分区:</h4><p><strong>创建:</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp_partition<span class="token punctuation">(</span><span class="token punctuation">`</span>empno<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token punctuation">`</span>ename<span class="token punctuation">`</span> string<span class="token punctuation">,</span><span class="token punctuation">`</span>job<span class="token punctuation">`</span> string<span class="token punctuation">,</span><span class="token punctuation">`</span>mgr<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token punctuation">`</span>hiredate<span class="token punctuation">`</span> string<span class="token punctuation">,</span><span class="token punctuation">`</span>sal<span class="token punctuation">`</span> <span class="token keyword">double</span><span class="token punctuation">,</span><span class="token punctuation">`</span>comm<span class="token punctuation">`</span> <span class="token keyword">double</span><span class="token punctuation">)</span>partitioned <span class="token keyword">by</span><span class="token punctuation">(</span>deptno <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">ROW</span> FORMAT DELIMITED <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED BY</span> ‘\t’<span class="token punctuation">;</span></code></pre><p><strong>插入数据</strong>:</p><p>insert into table emp_dynamic_partition partition(deptno) select empno,ename,job,mgr,hiredate,sal,comm, deptno from emp;</p><p>根据deptno插入不同分区,不用手动指定插入分区,适用于分区特别多的情况.</p><p>如执行时报错:</p><p>FAILED: SemanticException [Error 10096]: Dynamic partition strict mode requires at least one static partition column. To turn this off set hive.exec.dynamic.partition.mode=nonstrict</p><p>只需执行set hive.exec.dynamic.partition.mode=nonstrict;再执行加载操作即可</p><h4 id="1-8-Hive的各种join"><a href="#1-8-Hive的各种join" class="headerlink" title="1.8 Hive的各种join"></a>1.8 Hive的各种join</h4><p><img src="https://i.loli.net/2021/02/17/1NFcTZPIBsKVaQH.png"></p><p>hive (student)&gt; create table student(id int,name string) row format delimited fields terminated by ‘\t’;</p><p>hive (student)&gt;create table grade(id int,grade string) row format delimited fields terminated by ‘\t’;</p><p>数据:</p><p>student.txt</p><p>[hadoop@warehouse001 data]$ cat student.txt<br>1    xiaoming<br>2    xiaohong<br>3    lisi</p><p>[hadoop@warehouse001 data]$ cat grade.txt<br>1    junior<br>2    high<br>5    junior</p><p>加载数据:</p><p>load data local inpath ‘/home/hadoop/data/student.txt’ overwrite into table student;</p><p>load data local inpath ‘/home/hadoop/data/grade.txt’ overwrite into table grade;</p><p>hive (student)&gt; select * from student;<br>OK<br>student.id      student.name<br>1       xiaoming<br>2       xiaohong<br>3       lisi</p><p>hive (student)&gt; select * from grade;<br>OK<br>grade.id        grade.grade<br>1       junior<br>2       high<br>5       junior</p><p><strong>LEFT JOIN</strong>:select * from student A left join grade B on A.id=B.id;</p><p>result:</p><p>a.id    a.name  b.id    b.grade<br>1       xiaoming        1       junior<br>2       xiaohong        2       high<br>3       lisi    NULL    NULL</p><p><strong>RIGHT JOIN</strong>:select * from student  A right join grade  B on A.id=B.id;</p><p>result:</p><p>a.id    a.name  b.id    b.grade<br>1       xiaoming        1       junior<br>2       xiaohong        2       high<br>NULL    NULL    5       junior</p><p><strong>LEFT JOIN EXCLUDING INNER JOIN</strong>: select * from student  A left join grade  B on A.id=B.id where B.id is null;</p><p>result:</p><p>a.id    a.name  b.id    b.grade<br>3       lisi    NULL    NULL</p><p><strong>FULL OUTER JOIN</strong>:select * from student  A full join grade  B on A.id=B.id;</p><p>a.id    a.name  b.id    b.grade<br>1       xiaoming        1       junior<br>2       xiaohong        2       high<br>3       lisi    NULL    NULL<br>NULL    NULL    5       junior</p><p><strong>RIGHT JOIN EXCLUDING INNER JOIN</strong>: select * from student  A right join grade  B on A.id=B.id where A.id is null;</p><p>result:</p><p>a.id    a.name  b.id    b.grade<br>NULL    NULL    5       junior</p><p><strong>INNER JOIN</strong>:select * from student  A inner join grade  B on A.id=B.id ;</p><p>result:</p><p>a.id    a.name  b.id    b.grade<br>1       xiaoming        1       junior<br>2       xiaohong        2       high</p><p><strong>FULL JOIN EXCLUDING INNER JOIN</strong>: select * from student  A full join grade  B on A.id=B.id where A.id is null or B.id is null;</p><p>reslut:</p><p>3       lisi    NULL    NULL<br>NULL    NULL    5       junior</p><h4 id="1-9-Hive内置函数的适用"><a href="#1-9-Hive内置函数的适用" class="headerlink" title="1.9 Hive内置函数的适用"></a>1.9 Hive内置函数的适用</h4><p>查看内置函数:</p><p>show functions;</p><p>查看函数使用方法:</p><p>desc function extended xxx;</p><h5 id="常用内置函数"><a href="#常用内置函数" class="headerlink" title="常用内置函数:"></a>常用内置函数:</h5><h6 id="日期相关"><a href="#日期相关" class="headerlink" title="日期相关"></a>日期相关</h6><p><strong>current_date</strong></p><p><strong>current_timestamp</strong></p><p><strong>unix_timestamp</strong></p><p>select unix_timestamp(“2018-12-14 22:26:06.679”);</p><p>1544797566</p><p>非标准格式可以转化:</p><p>select unix_timestamp(“20181214 222606”,”yyyyMMdd HHmmss”);</p><p>1544797566</p><p><strong>from_unixtime(时间戳转time)</strong></p><p>select from_unixtime(1544797566);</p><p><strong>to_date(转化成日期格式)</strong></p><p><strong>year</strong></p><p><strong>day</strong></p><p><strong>hour</strong></p><p><strong>minuite</strong></p><p><strong>second</strong></p><p><strong>weekofyear(一年的第几周)</strong></p><p><strong>dayofmonth</strong></p><p><strong>month_between(两个时间相差几个月)</strong></p><p><strong>add_month(加…月)</strong></p><p><strong>datediff(两个时间相差多少天)</strong></p><p><strong>date_add(加..天)</strong></p><p><strong>date_sub(减..天)</strong></p><p><strong>last_day(本月的最后一天)</strong></p><h6 id="算术相关"><a href="#算术相关" class="headerlink" title="算术相关:"></a>算术相关:</h6><p><strong>round(四舍五入)</strong></p><p><strong>ceil(向上取整)</strong></p><p><strong>floor(向下取整)</strong></p><h6 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h6><p><strong>upper</strong></p><p><strong>lower</strong></p><p><strong>length(求字符串长度)</strong></p><p><strong>trim(去空格)</strong></p><p><strong>lpad(指定长度向左用指定字符补齐)</strong></p><p><strong>rpad</strong></p><p><strong>regexp_replace(用指定字符串替换字符串)</strong></p><p>select regexp_replace(“2030/09/01”,”/“,”-“);</p><p><strong>substr(从某个位置开始截取几位)</strong></p><p><strong>concat(拼接)</strong></p><p><strong>concat_ws(用第一个参数拼接后面的字符串)</strong></p><p>select concat_ws(“.”,”192”,”168”,”1”,”1”);</p><p><strong>split(根据指定字符拆分)</strong></p><p>select split(“192.168.1.1”,”.”);(需要转义特定字符)</p><p><strong>json_tuple(拆分json字符串)</strong></p><p><strong>parse_url_tuple</strong></p><h4 id="1-10-行列互转"><a href="#1-10-行列互转" class="headerlink" title="1.10 行列互转"></a>1.10 行列互转</h4><p><strong>列转行:</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp_info<span class="token punctuation">(</span>id string<span class="token punctuation">,</span>name string<span class="token punctuation">,</span>dept string<span class="token punctuation">,</span>sex string<span class="token punctuation">)</span><span class="token keyword">ROW</span> FORMAT DELIMITED <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED BY</span> ‘<span class="token punctuation">,</span>’<span class="token punctuation">;</span></code></pre><p>数据:</p><p>1,ZHANGSAN,RD,1<br>2,LISI,RD,1<br>3,XIAOHEI,RD,2<br>4,XIAOBAI,QA,1<br>5,ERGOU,QA,2<br>6,DAZHUANG,QA,2</p><p>相同部门、性别的人合在一起两列展示部门性别和姓名：</p><p>RD,1 PK|RUOZE<br>RD,2 XIAOHONG<br>QA,1 XIAOZHANG<br>QA,2 XIAOLI|XIAOFANG</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>dept_sex<span class="token punctuation">,</span>concat_ws<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">,</span>collect_set<span class="token punctuation">(</span>t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> name<span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span>     name<span class="token punctuation">,</span>    concat_ws<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span>dept<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> dept_sex<span class="token keyword">from</span> emp_info<span class="token punctuation">)</span> t <span class="token keyword">group</span> <span class="token keyword">by</span> dept_sex<span class="token punctuation">;</span></code></pre><p><strong>行转列</strong>:</p><p>建表:</p><p>create table column2row(name string, courses string)<br>row format delimited fields terminated by ‘\t’;</p><p>数据:</p><p>PK    MapReduce,Hive,Spark,Flink<br>J    Hadoop,HBase,Kafka</p><p>最终转化为:</p><p>PK MapReduce<br>PK Hive<br>PK Spark<br>PK Flink<br>J Hadoop<br>J HBase<br>J Kafka</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>name<span class="token punctuation">,</span>course<span class="token keyword">from</span> column2rowlateral <span class="token keyword">view</span> explode<span class="token punctuation">(</span>split<span class="token punctuation">(</span>courses<span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span> course_tmp <span class="token keyword">as</span> course<span class="token punctuation">;</span></code></pre><p><strong>lateral view + UDTF 使用 UDTF一进多出函数<br>explode() 函数是UDTF函数,接收一个数组或者map函数</strong></p><p><strong>split(column,sp) split 接收一个字符串函数,指定分隔符返回一个数组<br>这里使用 lateral view explode(split(列名,分隔符)) 表名(随便写) as 列名(新列名)</strong></p><h4 id="1-11-分组TopN"><a href="#1-11-分组TopN" class="headerlink" title="1.11 分组TopN"></a>1.11 分组TopN</h4><p>创建表:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">table</span> datatable <span class="token punctuation">(</span>  province string<span class="token punctuation">,</span>  city string<span class="token punctuation">,</span>  people <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">ROW</span> FORMAT DELIMITED <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">','</span><span class="token punctuation">;</span></code></pre><p>数据:</p><pre><code>浙江,杭州,300浙江,宁波,150浙江,温州,200浙江,嘉兴,100江苏,南京,270江苏,苏州,299江苏,某市,200江苏,某某市,100</code></pre><p>求各省top3</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> province<span class="token punctuation">,</span>people<span class="token punctuation">,</span>row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> province <span class="token keyword">order</span> <span class="token keyword">by</span> people <span class="token keyword">desc</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rank<span class="token keyword">from</span> datatable<span class="token punctuation">)</span> <span class="token number">a</span><span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>rank<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span></code></pre><p>result:</p><p>a.province      a.people        a.rank<br>江苏    299     1<br>江苏    270     2<br>浙江    300     1<br>浙江    200     2</p><h4 id="1-12-拉链表"><a href="#1-12-拉链表" class="headerlink" title="1.12 拉链表"></a>1.12 拉链表</h4><p>拉链表的优势:拉链表比全量表占用更小的空间,每天只需要更新增量数据,开链,关链,数据展示更直观.可以展示一条数据的各个阶段的历史状态,使用时只需要加上日期限制即可.</p><p>建表:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orders <span class="token punctuation">(</span>orderid <span class="token keyword">INT</span><span class="token punctuation">,</span>createtime STRING<span class="token punctuation">,</span>modifiedtime STRING<span class="token punctuation">,</span><span class="token keyword">status</span> STRING<span class="token punctuation">)</span> <span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">'\t'</span><span class="token punctuation">;</span></code></pre><p>每日增量表:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ods_orders_inc <span class="token punctuation">(</span>orderid <span class="token keyword">INT</span><span class="token punctuation">,</span>createtime STRING<span class="token punctuation">,</span>modifiedtime STRING<span class="token punctuation">,</span><span class="token keyword">status</span> STRING<span class="token punctuation">)</span> PARTITIONED <span class="token keyword">BY</span> <span class="token punctuation">(</span>day STRING<span class="token punctuation">)</span><span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">'\t'</span><span class="token punctuation">;</span></code></pre><p>拉链表:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> dw_orders_his <span class="token punctuation">(</span>orderid <span class="token keyword">INT</span><span class="token punctuation">,</span>createtime STRING<span class="token punctuation">,</span>modifiedtime STRING<span class="token punctuation">,</span><span class="token keyword">status</span> STRING<span class="token punctuation">,</span>dw_start_date STRING<span class="token punctuation">,</span>dw_end_date STRING<span class="token punctuation">)</span> <span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">'\t'</span> <span class="token punctuation">;</span></code></pre><p>数据:</p><p>001   2016-08-20  2016-08-20  创建<br>002   2016-08-20  2016-08-20  创建<br>003   2016-08-20  2016-08-20  创建<br>001   2016-08-20  2016-08-21  支付<br>002   2016-08-20  2016-08-21  完成<br>004   2016-08-21  2016-08-21  创建<br>001   2016-08-20  2016-08-22  完成<br>003   2016-08-20  2016-08-22  支付<br>004   2016-08-21  2016-08-22  支付<br>005   2016-08-22  2016-08-22  创建</p><p>历史数据全量接入：以时间节点为2016-08-20</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> overwrite <span class="token keyword">TABLE</span> ods_orders_inc <span class="token keyword">PARTITION</span> <span class="token punctuation">(</span>day <span class="token operator">=</span> <span class="token string">'2016-08-20'</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> orderid<span class="token punctuation">,</span>createtime<span class="token punctuation">,</span>modifiedtime<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token keyword">FROM</span> orders<span class="token keyword">WHERE</span> createtime <span class="token operator">&lt;</span> <span class="token string">'2016-08-21'</span> <span class="token operator">and</span> modifiedtime <span class="token operator">&lt;</span><span class="token string">'2016-08-21'</span><span class="token punctuation">;</span></code></pre><p>加载至拉链表中:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> dw_orders_his <span class="token keyword">select</span> orderid<span class="token punctuation">,</span>createtime<span class="token punctuation">,</span>modifiedtime<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">,</span>createtime <span class="token keyword">as</span> dw_start_date<span class="token punctuation">,</span><span class="token string">'9999-12-31'</span> <span class="token keyword">AS</span> dw_end_date<span class="token keyword">FROM</span> ods_orders_inc<span class="token keyword">WHERE</span> day <span class="token operator">=</span> <span class="token string">'2016-08-20'</span><span class="token punctuation">;</span></code></pre><p>result:</p><p>hive (order)&gt; select * from dw_orders_his;<br>OK<br>dw_orders_his.orderid   dw_orders_his.createtime        dw_orders_his.modifiedtime      dw_orders_his.status   dw_orders_his.dw_start_date     dw_orders_his.dw_end_date<br>1       2016-08-20      2016-08-20      创建    2016-08-20      9999-12-31<br>2       2016-08-20      2016-08-20      创建    2016-08-20      9999-12-31<br>3       2016-08-20      2016-08-20      创建    2016-08-20      9999-12-31</p><p>接入2016-08-21增量数据:</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#把2016-08-21新增或修改的数据放入增量表中</span><span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> ods_orders_inc <span class="token keyword">partition</span> <span class="token punctuation">(</span>day <span class="token operator">=</span> <span class="token string">'2016-08-21'</span><span class="token punctuation">)</span><span class="token keyword">select</span>  orderid<span class="token punctuation">,</span>createtime<span class="token punctuation">,</span>modifiedtime<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token keyword">FROM</span> orders<span class="token keyword">WHERE</span> <span class="token punctuation">(</span>createtime <span class="token operator">=</span> <span class="token string">'2016-08-21'</span>  <span class="token operator">and</span> modifiedtime <span class="token operator">=</span> <span class="token string">'2016-08-21'</span><span class="token punctuation">)</span> <span class="token operator">OR</span> modifiedtime <span class="token operator">=</span> <span class="token string">'2016-08-21'</span><span class="token punctuation">;</span></code></pre><p>把2016-08-21的增量数据写入拉链表:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> dw_orders_his_tmp<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> dw_orders_his_tmp <span class="token keyword">AS</span><span class="token keyword">SELECT</span> orderid<span class="token punctuation">,</span>createtime<span class="token punctuation">,</span>modifiedtime<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">,</span>dw_start_date<span class="token punctuation">,</span>dw_end_date<span class="token keyword">FROM</span> <span class="token punctuation">(</span>     <span class="token comment" spellcheck="true">//2016-08-21修改的数据失效</span>    <span class="token keyword">SELECT</span>         <span class="token number">a</span><span class="token punctuation">.</span>orderid<span class="token punctuation">,</span>        <span class="token number">a</span><span class="token punctuation">.</span>createtime<span class="token punctuation">,</span>        <span class="token number">a</span><span class="token punctuation">.</span>modifiedtime<span class="token punctuation">,</span>        <span class="token number">a</span><span class="token punctuation">.</span><span class="token keyword">status</span><span class="token punctuation">,</span>        <span class="token number">a</span><span class="token punctuation">.</span>dw_start_date<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//2016-08-21修改的数据,把dw_end_date改为2016-08-20</span>        <span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token number">b</span><span class="token punctuation">.</span>orderid <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token operator">AND</span> <span class="token number">a</span><span class="token punctuation">.</span>dw_end_date <span class="token operator">></span> <span class="token string">'2016-08-21'</span>         <span class="token keyword">THEN</span> <span class="token string">'2016-08-20'</span> <span class="token keyword">ELSE</span> <span class="token number">a</span><span class="token punctuation">.</span>dw_end_date <span class="token keyword">END</span> <span class="token keyword">AS</span> dw_end_date    <span class="token keyword">FROM</span> dw_orders_his <span class="token number">a</span>    <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> ods_orders_inc <span class="token keyword">WHERE</span> day <span class="token operator">=</span> <span class="token string">'2016-08-21'</span><span class="token punctuation">)</span> <span class="token number">b</span>    <span class="token keyword">ON</span> <span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">.</span>orderid <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>orderid<span class="token punctuation">)</span>    <span class="token keyword">union</span> <span class="token keyword">all</span>    <span class="token keyword">select</span>     orderid<span class="token punctuation">,</span>    createtime<span class="token punctuation">,</span>    modifiedtime<span class="token punctuation">,</span>    <span class="token keyword">status</span><span class="token punctuation">,</span>    modifiedtime <span class="token keyword">AS</span> dw_start_date<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//2016-08-21新增的数据dw_end_date改为'9999-12-31',表示有效</span>    <span class="token string">'9999-12-31'</span> <span class="token keyword">AS</span> dw_end_date    <span class="token keyword">FROM</span> ods_orders_inc    <span class="token keyword">WHERE</span> day <span class="token operator">=</span> <span class="token string">'2016-08-21'</span><span class="token punctuation">)</span> <span class="token number">c</span><span class="token keyword">order</span> <span class="token keyword">by</span> orderid<span class="token punctuation">,</span>dw_start_date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//临时表的数据插入拉链表</span><span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> dw_orders_his<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> dw_orders_his_tmp<span class="token punctuation">;</span></code></pre><p>dw_orders_his.orderid   dw_orders_his.createtime        dw_orders_his.modifiedtime      dw_orders_his.status   dw_orders_his.dw_start_date     dw_orders_his.dw_end_date<br>1       2016-08-20      2016-08-20      创建    2016-08-20      2016-08-20<br>1       2016-08-20      2016-08-21      支付    2016-08-21      9999-12-31<br>2       2016-08-20      2016-08-20      创建    2016-08-20      2016-08-20<br>2       2016-08-20      2016-08-21      完成    2016-08-21      9999-12-31<br>3       2016-08-20      2016-08-20      创建    2016-08-20      9999-12-31<br>4       2016-08-21      2016-08-21      创建    2016-08-21      9999-12-31</p><p>总结:拉链表有一份初始的全量数据,然后把全量中包含每天增量修改的数据失效化,也就是闭链,再对修改的数据重新按今日的日期开链,union all每日新增的开链数据形成一份完整的拉链表.拉链表也需要支持重跑,也就是回退到昨日的状态,实现逻辑也很简单,找到今日修改的数据并重新开链,再删除掉今日新增的开链数据即可.</p><h4 id="1-13-Hive元数据"><a href="#1-13-Hive元数据" class="headerlink" title="1.13 Hive元数据"></a>1.13 Hive元数据</h4><p>Hive元数据默认是管理在derby数据库的,但是derby数据库只支持单session访问,所以需要把元数据库交给其他数据库如mysql等管理,但是需要连接的驱动.Hive元数据维护了Hive的数据库、表、字段、分区、hdfs存放地址、内外部表等各种的信息。</p><p>元数据库常用表的存放信息：</p><p>dbs：存放数据库的文件存放路径、名字、用户等信息</p><p><img src="https://i.loli.net/2021/02/17/fktRJIuzcAHvpVF.png"></p><p>tbls：存放表的创建时间、用户、数据库、表名、内外部表等信息。</p><p><img src="https://i.loli.net/2021/02/17/zsiPjxOTod5qA2g.png"></p><p>column_v2:存放字段的名称、类型、索引、注释等信息。</p><p><img src="https://i.loli.net/2021/02/17/LVJ9dXqWayklhsf.png"></p><p>partition_keys:存放了分区字段的名称、类型、索引等信息。</p><p><img src="https://i.loli.net/2021/02/17/Hj3d6CGliBuqKnD.png"></p><p>partition_key_vals：存放分区字段的值等信息</p><p><img src="https://i.loli.net/2021/02/17/z4oFUxIVaZdtebH.png"></p><h3 id="二-SQL练习"><a href="#二-SQL练习" class="headerlink" title="二 SQL练习"></a>二 SQL练习</h3><h4 id="2-1-每个域名截止到每月为止的-最大单月访问次数-和-累计到该月的总访问次数"><a href="#2-1-每个域名截止到每月为止的-最大单月访问次数-和-累计到该月的总访问次数" class="headerlink" title="2.1 每个域名截止到每月为止的  最大单月访问次数 和 累计到该月的总访问次数"></a>2.1 每个域名截止到每月为止的  最大单月访问次数 和 累计到该月的总访问次数</h4><p>字段含义：域名,天,访问数量<br>B,2019-01-02,5<br>B,2019-01-03,15<br>B,2019-01-01,5<br>B,2019-01-04,8<br>B,2019-01-02,25<br>B,2019-01-05,5<br>B,2019-02-01,4<br>B,2019-02-02,6<br>B,2019-02-01,10<br>B,2019-02-02,5<br>B,2019-03-01,16<br>B,2019-03-02,22<br>B,2019-03-01,23<br>B,2019-03-02,10<br>B,2019-03-03,11</p><p>统计结果：<br>域名            月份   当月次数  最大次数  总次数<br>A  2019-01 33      33      33<br>A  2019-02 10      33      43<br>A 2019-03 38      38      81<br>B 2019-01 30      30      30<br>B 2019-02 15      30      45<br>B 2019-03 44      44      89</p><p>创建表:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> user_click<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> user_click<span class="token punctuation">(</span>domain STRING<span class="token punctuation">,</span>visit_time STRING<span class="token punctuation">,</span>num <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">','</span><span class="token punctuation">;</span></code></pre><p>加载数据:</p><p>load data local inpath ‘/home/hadoop/data/access.log’ overwrite into table user_click;</p><p>1.先求出每个月的小计</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_click <span class="token keyword">as</span><span class="token keyword">select</span> <span class="token number">c</span><span class="token punctuation">.</span>domain<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>month<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">c</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span> sumnum<span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span>     domain<span class="token punctuation">,</span>    substr<span class="token punctuation">(</span>visit_time<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token keyword">as</span> month<span class="token punctuation">,</span>    num<span class="token keyword">from</span> user_click<span class="token punctuation">)</span> <span class="token number">c</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">c</span><span class="token punctuation">.</span>domain<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>month<span class="token punctuation">;</span></code></pre><p>result:</p><p>t_click.domain  t_click.month   t_click.sumnum<br>B 2019-01 30<br>B 2019-02 15<br>B 2019-03 44<br>A  2019-01 33<br>A  2019-02 10<br>A 2019-03 38</p><p>2.求出到当月为止的每月最大次数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> domain<span class="token punctuation">,</span>month<span class="token punctuation">,</span>sumnum<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sumnum<span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> domain <span class="token keyword">order</span> <span class="token keyword">by</span> month<span class="token punctuation">)</span> maxnum<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>sumnum<span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> domain <span class="token keyword">order</span> <span class="token keyword">by</span> month<span class="token punctuation">)</span> totalnum<span class="token keyword">from</span> t_click<span class="token punctuation">;</span></code></pre><p>result:</p><p>domain  month   sumnum  maxnum  totalnum<br>B 2019-01 30      30      30<br>B 2019-02 15      30      45<br>B 2019-03 44      44      89<br>A   2019-01 33      33      33<br>A   2019-02 10      33      43<br>A   2019-03 38      38      81</p><h4 id="2-2-分组TopN扩展"><a href="#2-2-分组TopN扩展" class="headerlink" title="2.2 分组TopN扩展"></a>2.2 分组TopN扩展</h4><p>字段的意义：<br>id,name,age,skills</p><p>数据:</p><p>1,xiaoming,35,Spark-CDH-Hive-Hadoop<br>2,xiaohong,37,Flink-CDH-Hive-Hadoop<br>3,zhangsan,32,CDH-Hive-Hadoop<br>4,lisi,21,Spark-Hive-Hadoop<br>5,ergou,25,Hadoop-HBase-Hive<br>6,tiezhu,28,Spark-Hive-Hadoop</p><p>需求： 求出每种技能中，年龄最大的两个人</p><p>建表:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>name string<span class="token punctuation">,</span>age <span class="token keyword">int</span><span class="token punctuation">,</span>skills string<span class="token punctuation">)</span> <span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">','</span><span class="token punctuation">;</span></code></pre><p>每种技能中，年龄最大的两个人:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>skill<span class="token punctuation">,</span> row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> skill <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">desc</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rank<span class="token keyword">from</span> emplateral <span class="token keyword">view</span> explode<span class="token punctuation">(</span>split<span class="token punctuation">(</span>skills<span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> skills_tmp <span class="token keyword">as</span> skill<span class="token punctuation">)</span> t<span class="token keyword">where</span> t<span class="token punctuation">.</span>rank<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>result:</p><p>t.id    t.name  t.age   t.skill t.rank<br>2       xiaohong        37      CDH     1<br>1       xiaoming        35      CDH     2<br>2       xiaohong        37      Flink   1<br>5       ergou   25      HBase   1<br>2       xiaohong        37      Hadoop  1<br>1       xiaoming        35      Hadoop  2<br>2       xiaohong        37      Hive    1<br>1       xiaoming        35      Hive    2<br>1       xiaoming        35      Spark   1<br>6       tiezhu  28      Spark   2</p><h4 id="1-3-年度最大连续登录天数统计"><a href="#1-3-年度最大连续登录天数统计" class="headerlink" title="1.3 年度最大连续登录天数统计"></a>1.3 年度最大连续登录天数统计</h4><p>数据:</p><p>A,20190101<br>A,20190102<br>A,20190103<br>A,20190104<br>A,20190106<br>A,20190107<br>A,20190108<br>A,20190111<br>A,20190112<br>B,20190227<br>B,20190228<br>B,20190301<br>B,20190104<br>B,20190106</p><p>统计结果:</p><p>A    4<br>B   3</p><p>建表:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> visit<span class="token punctuation">(</span>name string<span class="token punctuation">,</span>visit_time string<span class="token punctuation">)</span><span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">','</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> visit_tmp <span class="token keyword">as</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>concat_ws<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span>substr<span class="token punctuation">(</span>visit_time<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>substr<span class="token punctuation">(</span>visit_time<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>substr<span class="token punctuation">(</span>visit_time<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">date</span><span class="token keyword">from</span> visit<span class="token punctuation">;</span></code></pre><p>第一步：先使用日期函数将日期date_sub’归元’，得到持续的日期都有哪些</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span>date_sub<span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span>row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span>distribute <span class="token keyword">by</span> name sort <span class="token keyword">by</span> <span class="token keyword">date</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ds<span class="token keyword">from</span> visit_tmp<span class="token punctuation">;</span></code></pre><p>第二步：按照用name和持续的日期进行分组，求出每个用户所有持续日期的持续天数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span> ct<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>date_sub<span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span>row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span>distribute <span class="token keyword">by</span> name sort <span class="token keyword">by</span> <span class="token keyword">date</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ds<span class="token keyword">from</span> visit_tmp<span class="token punctuation">)</span> t1<span class="token keyword">group</span> <span class="token keyword">by</span> name<span class="token punctuation">,</span>ds<span class="token punctuation">;</span></code></pre><p>第三步：按照name进行分组，求出每个用户连续登陆的最大天数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span> ct<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>date_sub<span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span>row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span>distribute <span class="token keyword">by</span> name sort <span class="token keyword">by</span> <span class="token keyword">date</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ds<span class="token keyword">from</span> visit_tmp<span class="token punctuation">)</span> t1<span class="token keyword">group</span> <span class="token keyword">by</span> name<span class="token punctuation">,</span>ds<span class="token punctuation">)</span> t2<span class="token keyword">group</span> <span class="token keyword">by</span> name<span class="token punctuation">;</span></code></pre><h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive基础之数据导出Sqoop</title>
      <link href="2018/12/13/2020-12-13-quannnxu-hive5/"/>
      <url>2018/12/13/2020-12-13-quannnxu-hive5/</url>
      
        <content type="html"><![CDATA[<h4 id="Sqoop"><a href="#Sqoop" class="headerlink" title="Sqoop"></a><strong>Sqoop</strong></h4><p>RDBMS    ==&gt;    Hadoop(HDFS/Hive/HBase…)</p><p>Hadoop(HDFS/Hive/HBase…)    ==&gt;    RDBMS</p><p>以Hadoop作为参照物,如果数据是进Hadoop的,那就是导入,反之就是导出</p><p>import导入</p><p>export导出</p><p>1.4.7 版本  Sqoop1<br>1.99.7 版本 Sqoop2</p><p><strong>配置Sqoop:</strong></p><p>$SQOOP_HOME/conf/sqoop-env.sh<br>export HADOOP_COMMON_HOME=/home/hadoop/app/hadoop-2.6.0-cdh5.16.2<br>export HADOOP_MAPRED_HOME=/home/hadoop/app/hadoop-2.6.0-cdh5.16.2<br>export HIVE_HOME=/home/hadoop/app/hive-1.1.0-cdh5.16.2</p><p>拷贝MySQL驱动包到$SQOOP_HOME/lib/目录下</p><p><strong>系统环境变量:</strong><br>export SQOOP_HOME=/home/hadoop/app/sqoop-1.4.6-cdh5.16.2<br>export PATH=$SQOOP_HOME/bin:$PATH<br>export SQOOP_HOME=/home/hadoop/app/sqoop-1.4.6-cdh5.16.2<br>export PATH=$SQOOP_HOME/bin:$PATH</p><p>[hadoop@warehouse001 bin]$ sqoop help</p><p>Available commands:<br>  codegen            Generate code to interact with database records<br>  create-hive-table  Import a table definition into Hive<br>  <strong>eval</strong>               Evaluate a SQL statement and display the results<br>  <strong>export             Export an HDFS directory to a database table</strong><br>  help               List available commands<br>  <strong>import             Import a table from a database to HDFS</strong><br>  import-all-tables  Import tables from a database to HDFS<br>  import-mainframe   Import datasets from a mainframe server to HDFS<br>  <strong>job</strong>                Work with saved jobs<br>  <strong>list-databases     List available databases on a server</strong><br>  <strong>list-tables        List available tables in a database</strong><br>  merge              Merge results of incremental imports<br>  metastore          Run a standalone Sqoop metastore<br>  version            Display version information</p><p>查看mysql数据库</p><pre><code>sqoop list-databases \--connect jdbc:mysql://localhost:3306 \--username root \--password &#39;xxxxx&#39;</code></pre><p>查看表:</p><pre><code>sqoop list-tables \--connect jdbc:mysql://localhost:3306/hive_metadata \--username root \--password &#39;xxxxx&#39;</code></pre><p>sqoop import <br>–connect jdbc:mysql://localhost:3306/hive_metadata \    jdbc的URL<br>–username root \        –用户<br>–password ‘xxxxx’ <br>–delete-target-dir \        –删除目标文件夹<br>–columns “EMPNO,ENAME,JOB,SAL,COMM” \        –指定字段<br>–mapreduce-job-name EmpFromMySQL2HDFS \    –修改mapreduce任务名称<br>–table emp <br>–null-string ‘’ \        –指定字符串替换null<br>–null-non-string 0 \        –指定字符替换非string类型字段<br>–fields-terminated-by ‘\t’ \    –指定分隔符<br>–where ‘SAL&gt;2000’ <br>–target-dir EMP_COLUMN</p><p>-e   “sql语句” 指定导出条件</p><p>-e和–table不能同时使用</p><p>-e sql语句后需要加$CONDITIONS</p><p>如果是””加sql语句则需要转义\$CONDITIONS”</p><p>导出没有主键的表,则需要设置参数–split-by 字段或者-m 1</p><p>原因sqoop默认开启的是4个map,默认是按主键切分任务的</p><p>–options-file 文件</p><p>文件格式:</p><p>import<br>–connect<br>jdbc:mysql://localhost:3306/mydatabase<br>–username<br>root<br>–password<br>‘xxxx’<br>–delete-target-dir<br>–columns<br>“EMPNO,ENAME,JOB,SAL,COMM”<br>–mapreduce-job-name<br>EmpFromMySQL2HDFS<br>–table<br>emp<br>–target-dir<br>EMP_COLUMN</p><p><strong>sqoop job –create封装到job中</strong></p><p>sqoop job –create my_job  <br>–import –connect jdbc:mysql://localhost:3306/mydatabase <br>–username root <br>–password ‘xxxx’ <br>–delete-target-dir <br>–table product_info <br>–split-by product_id</p><p>查看job</p><p>sqoop job -list </p><p>执行job</p><p>sqoop job -exec ruozedata_job</p><p>删除job</p><p>sqoop job -delete ruozedata_job</p><p><strong>RDBMS导入到Hive中:</strong></p><p>sqoop import <br>–connect jdbc:mysql://localhost:3306/mydatabase <br>–username root <br>–password ‘xxxxx’ <br>–delete-target-dir <br>–hive-database hive<br>–hive-import <br>–hive-overwrite <br>–hive-table emp_column <br>–columns “EMPNO,ENAME,JOB,SAL,COMM” <br>–mapreduce-job-name EmpFromMySQL2Hive <br>–table emp <br>–null-string ‘’ <br>–null-non-string 0 <br>–fields-terminated-by ‘\t’ </p><p>需提前创建好表结构</p><p>分区表需要加:</p><p>–hive-partition-key ‘day’ \            分区字段<br>–hive-partition-value ‘yyyyMMdd’ \        分区字段值</p><p>导出数据</p><p>sqoop export <br>–connect jdbc:mysql://localhost:3306/product <br>–username root <br>–password ‘xxxxx’ <br>–table city_info <br>–fields-terminated-by ‘\t’ <br>–export-dir /user/hadoop/emp            –导出文件的路径</p><p><strong>案例:</strong></p><p>city_info.sql  product_info.sql  user_click.txt</p><p>城市表：MySQL<br>商品表：MySQL<br>用户行为日志：Hive</p><p>create table user_click(<br>user_id string,<br>session_id string,<br>time string,<br>city_id int,<br>product_id int<br>) partitioned by(day string)<br>row format delimited fields terminated by ‘,’;    </p><p>按照区域求最受欢迎商品的TopN</p><p>1.首先使用sqoop导出数据到Hive中</p><pre><code>sqoop import \--connect jdbc:mysql://localhost:3306/product  \--username root --password &#39;xxxxx&#39; \--table city_info \--delete-target-dir \--hive-import  --hive-database product --hive-table city_info --hive-overwrite  \--fields-terminated-by &#39;\t&#39; \--split-by city_id \-m 2 \--verbose</code></pre><pre><code>sqoop import --connect jdbc:mysql://localhost:3306/product \--username root --password &#39;xxxxx&#39; \--table product_info \--delete-target-dir \--hive-import --hive-database product --hive-table product_info --hive-overwrite \--fields-terminated-by &#39;\t&#39; \--split-by product_id \-m 2</code></pre><p>city_info.city_id       city_info.city_name     city_info.area<br>1       BEIJING NC<br>2       SHANGHAI        EC<br>3       NANJING EC</p><p>product_info.product_id product_info.product_name       product_info.extend_info<br>1       product1        {“product_status”:1}<br>2       product2        {“product_status”:1}<br>3       product3        {“product_status”:1}</p><p>user_click.user_id      user_click.session_id   user_click.time user_click.city_id      user_click.product_id    user_click.day<br>95      2bf501a7637549c89cf55342331b15db        2016-05-05 21:01:56     1       72      2016-05-05<br>95      2bf501a7637549c89cf55342331b15db        2016-05-05 21:52:26     1       68      2016-05-05<br>95      2bf501a7637549c89cf55342331b15db        2016-05-05 21:17:03     1       40      2016-05-05</p><p>作业:分组TopN的结果export到mysql</p><p>一.获取商品信息及城市区域信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> tmp_product_basic_info<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> tmp_product_basic_info <span class="token keyword">as</span><span class="token keyword">select</span>u<span class="token punctuation">.</span>product_id<span class="token punctuation">,</span>u<span class="token punctuation">.</span>city_id<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>city_name<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>area<span class="token keyword">from</span> user_click u<span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> city_id<span class="token punctuation">,</span>city_name<span class="token punctuation">,</span>area <span class="token keyword">from</span> city_info<span class="token punctuation">)</span> <span class="token number">c</span><span class="token keyword">on</span> <span class="token number">c</span><span class="token punctuation">.</span>city_id<span class="token operator">=</span>u<span class="token punctuation">.</span>city_id<span class="token punctuation">;</span></code></pre><p><img src="https://i.loli.net/2020/12/21/8ygt4VsP31irkxv.png"></p><p>二.获取区域的商品点击次数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> tmp_area_product_click_cnt<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> tmp_area_product_click_cnt <span class="token keyword">as</span><span class="token keyword">select</span> t<span class="token punctuation">.</span>product_id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>area<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> click_cnt<span class="token keyword">from</span> tmp_product_basic_info t <span class="token keyword">join</span> user_click <span class="token number">c</span> <span class="token keyword">on</span><span class="token number">c</span><span class="token punctuation">.</span>product_id<span class="token operator">=</span>t<span class="token punctuation">.</span>product_id<span class="token keyword">group</span> <span class="token keyword">by</span> t<span class="token punctuation">.</span>product_id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>area<span class="token punctuation">;</span></code></pre><p><img src="https://i.loli.net/2020/12/21/poYCckqfmvT42rK.png"></p><p>三.获取完整的商品点击次数信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> tmp_product_full_click_cnt<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> tmp_product_full_click_cnt <span class="token keyword">as</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>product_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>area<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>click_cnt<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>product_name<span class="token punctuation">,</span><span class="token keyword">if</span><span class="token punctuation">(</span>get_json_object<span class="token punctuation">(</span>extend_info<span class="token punctuation">,</span><span class="token string">'$.product_status'</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'self'</span><span class="token punctuation">,</span><span class="token string">'third'</span> <span class="token punctuation">)</span> <span class="token keyword">status</span><span class="token keyword">from</span> tmp_area_product_click_cnt <span class="token number">a</span><span class="token keyword">join</span> product_info <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>product_id<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>product_id<span class="token punctuation">;</span></code></pre><p><img src="https://i.loli.net/2020/12/21/hUnDfFR8ljNGCXQ.png"><br>获取json格式的value</p><p>select extend_info,get_json_object(extend_info,’$.product_status’) from product_info limit 5;</p><p>四.分组topN</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> product_click_top<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> product_click_top <span class="token keyword">as</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>product_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>area<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>click_cnt<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>product_name<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">,</span>row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> area <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">.</span>click_cnt <span class="token keyword">desc</span><span class="token punctuation">)</span> rank<span class="token keyword">from</span> tmp_product_full_click_cnt <span class="token number">a</span><span class="token punctuation">)</span> <span class="token number">b</span><span class="token keyword">where</span> <span class="token number">b</span><span class="token punctuation">.</span>rank<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span></code></pre><p><img src="https://i.loli.net/2020/12/21/vmclfgHBVFwKpTh.png"></p><p>导出数据到mysql:</p><pre><code>sqoop export \--connect jdbc:mysql://localhost:3306/product \--username root \--password &#39;ruozedata&#39; \--table product_click_top \--fields-terminated-by &#39;\001&#39; \--export-dir /user/hive/warehouse/product.db/product_click_top \--verbose</code></pre><p>注意指定分隔符,hive默认是\001,mysql表需要自己预先创建好.</p><p><img src="https://i.loli.net/2020/12/21/58bQW7XHYUTOVks.png"></p><p>常见的sqoop报错:</p><p><a href="http://blog.itpub.net/25854343/viewspace-2565234/">http://blog.itpub.net/25854343/viewspace-2565234/</a></p>]]></content>
      
      
      <categories>
          
          <category> Sqoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sqoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive基础之Hive DML语法</title>
      <link href="2018/12/10/2020-12-07-quannnxu-hive3/"/>
      <url>2018/12/10/2020-12-07-quannnxu-hive3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DML">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DML</a></p><h4 id="Loading-files-into-tables"><a href="#Loading-files-into-tables" class="headerlink" title="Loading files into tables"></a>Loading files into tables</h4><p>语法:</p><pre><code>LOAD DATA [LOCAL] INPATH &#39;filepath&#39; [OVERWRITE] INTO TABLE tablename [PARTITION (partcol1=val1, partcol2=val2 ...)]LOAD DATA [LOCAL] INPATH &#39;filepath&#39; [OVERWRITE] INTO TABLE tablename [PARTITION (partcol1=val1, partcol2=val2 ...)] [INPUTFORMAT &#39;inputformat&#39; SERDE &#39;serde&#39;] (3.0 or later)</code></pre><p>​    LOAD DATA:加载数据</p><p>​    LOCAL:可选    从本地加载到Hive表</p><p>​    INPATH:加载数据的路径</p><p>​    OVERWRITE:可选</p><p>​        有参数就是覆盖,没有参数就是追加</p><p>​    INTO TABLE:加载到那张表</p><p>如:LOAD DATA LOCAL INPATH ‘/home/hadoop/data/emp.txt’ OVERWRITE INTO TABLE EMP;</p><h4 id="Inserting-data-into-Hive-Tables-from-queries"><a href="#Inserting-data-into-Hive-Tables-from-queries" class="headerlink" title="Inserting data into Hive Tables from queries"></a>Inserting data into Hive Tables from queries</h4><p>语法:</p><pre><code>INSERT OVERWRITE TABLE tablename1 [PARTITION (partcol1=val1, partcol2=val2 ...) [IF NOT EXISTS]] select_statement1 FROM from_statement;INSERT INTO TABLE tablename1 [PARTITION (partcol1=val1, partcol2=val2 ...)] select_statement1 FROM from_statement;INSERT INTO TABLE tablename PARTITION (partcol1[=val1], partcol2[=val2] ...) select_statement FROM from_statement;</code></pre><p>如:INSERT OVERWRITE TABLE emp3 select * from emp;</p><p>hive (hive)&gt; INSERT OVERWRITE TABLE emp3 select * from emp;<br>FAILED: SemanticException [Error 10001]: Line 1:23 Table not found ‘emp3’</p><p><strong>这种插入方式的前提是表得存在</strong></p><p>create table emp3 like emp;快速创建表结构</p><p>create table dept (</p><p>deptno int,</p><p>dname string,</p><p>loc string</p><p>)ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’;</p><p>LOAD DATA LOCAL INPATH ‘/home/hadoop/data/dept.txt’ OVERWRITE INTO TABLE dept;</p><p>insert into table Dept values (999,’DEV’,’BJ’),(1000,’QA’,’SH’);</p><p><img src="https://i.loli.net/2020/12/11/RJw6pxDNIjiasWg.png"></p><p><strong>这种插入会出现小文件,所以我们一般不用insert values的方式</strong></p><h4 id="Writing-data-into-the-filesystem-from-queries"><a href="#Writing-data-into-the-filesystem-from-queries" class="headerlink" title="Writing data into the filesystem from queries"></a>Writing data into the filesystem from queries</h4><pre><code>INSERT OVERWRITE [LOCAL]   directory1  [ROW FORMAT row_format] [STORED AS file_format] (Note: Only available starting with Hive 0.11.0)  SELECT ... FROM ...</code></pre><p>指定分隔符:</p><p>INSERT OVERWRITE  LOCAL DIRECTORY ‘/home/hadoop/data/‘ ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’ select * from dept ;</p><p>不指定分隔符:</p><p>INSERT OVERWRITE  LOCAL DIRECTORY ‘/home/hadoop/data/‘  select * from dept ;</p><p>get HDFS文件:</p><p>hdfs dfs -get /user/hive/warehouse/hive.db/dept/*.txt /home/hadoop/data/</p><p>hive -e:</p><p>hive -e “select * from hive.dept” &gt; dept.txt</p><h4 id="Import-Export"><a href="#Import-Export" class="headerlink" title="Import/Export"></a>Import/Export</h4><h5 id="Export-Syntax"><a href="#Export-Syntax" class="headerlink" title="Export Syntax"></a>Export Syntax</h5><pre><code>EXPORT TABLE tablename [PARTITION (part_column=&quot;value&quot;[, ...])]  TO &#39;export_target_path&#39; [ FOR replication(&#39;eventid&#39;) ]</code></pre><h5 id="Import-Syntax"><a href="#Import-Syntax" class="headerlink" title="Import Syntax"></a>Import Syntax</h5><pre><code>IMPORT [[EXTERNAL] TABLE new_or_original_tablename [PARTITION (part_column=&quot;value&quot;[, ...])]]  FROM &#39;source_path&#39;  [LOCATION &#39;import_target_path&#39;]</code></pre><p>适合做库表迁移,导出包含元数据的数据.</p><p>EXPORT TABLE hive.emp TO “/home/hadoop/data”;</p><p>IMPORT TABLE hive.emp_import FROM ‘/home/hadoop/data’;</p><h4 id="Drop-Truncate-Table"><a href="#Drop-Truncate-Table" class="headerlink" title="Drop/Truncate Table"></a>Drop/Truncate Table</h4><p><strong>truncate只删除元数据,不删除数据文件.</strong></p><p><strong>外部表不能truncate.</strong></p><h4 id="Select-Syntax"><a href="#Select-Syntax" class="headerlink" title="Select Syntax"></a>Select Syntax</h4><pre><code>[WITH CommonTableExpression (, CommonTableExpression)*]    (Note: Only available starting with Hive 0.13.0)SELECT [ALL | DISTINCT] select_expr, select_expr, ...  FROM table_reference  [WHERE where_condition]  [GROUP BY col_list]  [ORDER BY col_list]  [CLUSTER BY col_list    | [DISTRIBUTE BY col_list] [SORT BY col_list]  ] [LIMIT [offset,] rows]</code></pre><ul><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select#LanguageManualSelect-SelectSyntax">Select Syntax</a><ul><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select#LanguageManualSelect-WHEREClause">WHERE Clause</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select#LanguageManualSelect-ALLandDISTINCTClauses">ALL and DISTINCT Clauses</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select#LanguageManualSelect-PartitionBasedQueries">Partition Based Queries</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select#LanguageManualSelect-HAVINGClause">HAVING Clause</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select#LanguageManualSelect-LIMITClause">LIMIT Clause</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select#LanguageManualSelect-REGEXColumnSpecification">REGEX Column Specification</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select#LanguageManualSelect-MoreSelectSyntax">More Select Syntax</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive基础之Hive分区和常用函数</title>
      <link href="2018/12/10/2020-12-12-quannnxu-hive4/"/>
      <url>2018/12/10/2020-12-12-quannnxu-hive4/</url>
      
        <content type="html"><![CDATA[<h4 id="1-PARTITIONED-BY"><a href="#1-PARTITIONED-BY" class="headerlink" title="1.PARTITIONED BY"></a>1.PARTITIONED BY</h4><h5 id="1-1-分区表"><a href="#1-1-分区表" class="headerlink" title="1.1 分区表"></a>1.1 分区表</h5><p>​    如:操作日志表    需记录时间,事件等信息,数据量大</p><p>​    所以就需要分区</p><p>语法:</p><p>[PARTITIONED BY (col_name data_type [COMMENT col_comment], …)]</p><h5 id="1-2-建表"><a href="#1-2-建表" class="headerlink" title="1.2 建表:"></a>1.2 建表:</h5><p>create table dept_partition(</p><p>deptno int,</p><p>dname string,</p><p>loc string</p><p>)partitioned by (day string)</p><p>row format delimited fields terminated by ‘\t’;</p><h5 id="1-3-加载数据"><a href="#1-3-加载数据" class="headerlink" title="1.3 加载数据"></a>1.3 加载数据</h5><p>load data local inpath ‘/home/hadoop/data/dept_20300901.txt’ overwrite into table dept_partition partition (day=20300901);</p><p>hive (hive)&gt; select * from dept_partition;<br>OK<br>dept_partition.deptno   dept_partition.dname    dept_partition.loc      dept_partition.day<br>10      ACCOUNTING      NEW YORK        20300901<br>20      RESEARCH        DALLAS  20300901<br>30      SALES   CHICAGO 20300901<br>40      OPERATIONS      BOSTON  20300901<br>Time taken: 0.17 seconds, Fetched: 4 row(s)</p><p><strong>20300901这一列的数据是不存在HDFS上的</strong></p><p>分区表查询一般都要加分区字段:</p><p>select * from dept_partition where day = ‘20300901’;</p><p>分区表的分区元数据信息维护在partitions表中:</p><p>tbls表信息:</p><p><img src="https://i.loli.net/2020/12/14/q7eRKVshm16StPE.png"></p><p>partitions表信息:</p><p><img src="https://i.loli.net/2020/12/14/YSHcVox27wjsMrB.png"></p><h5 id="1-4-也可以先创建hdfs路径-再数据put到指定目录下"><a href="#1-4-也可以先创建hdfs路径-再数据put到指定目录下" class="headerlink" title="1.4 也可以先创建hdfs路径,再数据put到指定目录下"></a>1.4 也可以先创建hdfs路径,再数据put到指定目录下</h5><p>hdfs dfs -mkdir -p /user/hive/warehouse/hive.db/dept_partition/day=20300904</p><p>hdfs dfs -cp /user/hive/warehouse/hive.db/dept_partition/day=20300903/* /user/hive/warehouse/hive.db/dept_partition/day=20300904/</p><p>但是这种操作插入数据需要刷新元数据.</p><p>语法:</p><pre><code>MSCK [REPAIR] TABLE table_name [ADD/DROP/SYNC PARTITIONS];</code></pre><p>msck repair table dept_partition;</p><p>这种操作会非常消耗资源,一般不建议用,可以使用下面的方式去修改分区信息:</p><pre><code>ALTER TABLE table_name ADD [IF NOT EXISTS] PARTITION partition_spec [LOCATION &#39;location&#39;][, PARTITION partition_spec [LOCATION &#39;location&#39;], ...];</code></pre><h5 id="1-5-删除分区"><a href="#1-5-删除分区" class="headerlink" title="1.5 删除分区"></a>1.5 删除分区</h5><pre><code>ALTER TABLE table_name DROP [IF EXISTS] PARTITION partition_spec[, PARTITION partition_spec, ...]  [IGNORE PROTECTION] [PURGE];            -- (Note: PURGE available in Hive 1.2.0 and later, IGNORE PROTECTION not available 2.0.0 and later)</code></pre><p>alter table dept_partition drop partition (day=’20300904’);</p><h5 id="1-6-查看分区信息"><a href="#1-6-查看分区信息" class="headerlink" title="1.6 查看分区信息:"></a>1.6 查看分区信息:</h5><p>show partitions dept_partition;</p><p>insert在分区别里也可以使用</p><p>语法:</p><p>insert overwrite table dept_partiton partition(day = ‘20300904’);</p><h5 id="1-7-多级分区"><a href="#1-7-多级分区" class="headerlink" title="1.7 多级分区"></a>1.7 多级分区</h5><p>在数据量特别大的时候坑需要多级分区,在分区关键字后面再加其他字段即可</p><p>如:partitioned by (day string,hour string)</p><h5 id="1-8-静态分区vs动态分区"><a href="#1-8-静态分区vs动态分区" class="headerlink" title="1.8 静态分区vs动态分区"></a>1.8 静态分区vs动态分区</h5><p>上述都是静态分区</p><p>动态分区:</p><p>案例:将emp表中的数据按照deptno将数据插入到emp对应的分区表中</p><p>create table emp_partition(<br>  <code>empno</code> int,<br>  <code>ename</code> string,<br>  <code>job</code> string,<br>  <code>mgr</code> int,<br>  <code>hiredate</code> string,<br>  <code>sal</code> double,<br>  <code>comm</code> double)<br>partitioned by(deptno int)<br>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’;</p><p>插入数据:</p><p>insert into table emp_partition partition(deptno=30)<br>select empno,ename,job,mgr,hiredate,sal,comm from emp where deptno=30;</p><p>如果部门很多很多时,这样执行肯定是有问题的,所以就引进了动态分区.</p><p>create table emp_dynamic_partition(<br>  <code>empno</code> int,<br>  <code>ename</code> string,<br>  <code>job</code> string,<br>  <code>mgr</code> int,<br>  <code>hiredate</code> string,<br>  <code>sal</code> double,<br>  <code>comm</code> double)<br>partitioned by(deptno int)<br>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’;</p><p>插入数据:</p><p>insert into table emp_dynamic_partition partition(deptno) select empno,ename,job,mgr,hiredate,sal,comm, deptno from emp;</p><p>但是执行时报错:</p><p>FAILED: SemanticException [Error 10096]: Dynamic partition strict mode requires at least one static partition column. To turn this off set hive.exec.dynamic.partition.mode=nonstrict</p><p>只需执行set hive.exec.dynamic.partition.mode=nonstrict;再执行加载操作即可</p><p>hive (hive)&gt; show partitions emp_dynamic_partition<br>           &gt; ;<br>OK<br>partition<br>deptno=10<br>deptno=20<br>deptno=30<br>deptno=__HIVE_DEFAULT_PARTITION__</p><h4 id="2-Hive中的函数"><a href="#2-Hive中的函数" class="headerlink" title="2.Hive中的函数"></a>2.Hive中的函数</h4><p>内置函数</p><p>UDF函数</p><h5 id="2-1-查看内置函数"><a href="#2-1-查看内置函数" class="headerlink" title="2.1 查看内置函数:"></a>2.1 查看内置函数:</h5><p>show functions;</p><h5 id="2-2查看函数使用方法"><a href="#2-2查看函数使用方法" class="headerlink" title="2.2查看函数使用方法:"></a>2.2查看函数使用方法:</h5><p>desc function extended xxx;</p><h5 id="2-3-常用内置函数"><a href="#2-3-常用内置函数" class="headerlink" title="2.3 常用内置函数"></a>2.3 常用内置函数</h5><h6 id="日期相关"><a href="#日期相关" class="headerlink" title="日期相关"></a>日期相关</h6><p><strong>current_date</strong></p><p>2018-12-14</p><p><strong>current_timestamp</strong></p><p>2018-12-14 22:26:06.679</p><p><strong>unix_timestamp</strong></p><p>select unix_timestamp(“2018-12-14 22:26:06.679”);</p><p>1544797566</p><p>非标准格式可以转化:</p><p>select unix_timestamp(“20181214 222606”,”yyyyMMdd HHmmss”);</p><p>1544797566</p><p><strong>from_unixtime(时间戳转time)</strong></p><p>select from_unixtime(1544797566);</p><p>2018-12-14 22:26:06</p><p><strong>to_date(转化成日期格式)</strong></p><p><strong>year</strong></p><p><strong>day</strong></p><p><strong>hour</strong></p><p><strong>minuite</strong></p><p><strong>second</strong></p><pre><code>hive (hive)&gt; select year(&quot;2018-12-14 22:26:06&quot;);OK_c02018Time taken: 0.035 seconds, Fetched: 1 row(s)hive (hive)&gt; select month(&quot;2018-12-14 22:26:06&quot;);OK_c012Time taken: 0.025 seconds, Fetched: 1 row(s)hive (hive)&gt; select day(&quot;2018-12-14 22:26:06&quot;);OK_c014Time taken: 0.024 seconds, Fetched: 1 row(s)hive (hive)&gt; select hour(&quot;2018-12-14 22:26:06&quot;);OK_c022Time taken: 0.025 seconds, Fetched: 1 row(s)hive (hive)&gt; select minute(&quot;2018-12-14 22:26:06&quot;);OK_c026Time taken: 0.03 seconds, Fetched: 1 row(s)hive (hive)&gt; select second(&quot;2018-12-14 22:26:06&quot;);OK_c06Time taken: 0.023 seconds, Fetched: 1 row(s)</code></pre><p><strong>weekofyear(一年的第几周)</strong></p><p><strong>dayofmonth</strong></p><p><strong>month_between(两个时间相差几个月)</strong></p><p><strong>add_month(加…月)</strong></p><p><strong>datediff(两个时间相差多少天)</strong></p><p><strong>date_add(加..天)</strong></p><p><strong>date_sub(减..天)</strong></p><p><strong>last_day(本月的最后一天)</strong></p><h6 id="算术相关"><a href="#算术相关" class="headerlink" title="算术相关:"></a>算术相关:</h6><p><strong>round(四舍五入)</strong></p><p><strong>ceil(向上取整)</strong></p><p><strong>floor(向下取整)</strong></p><h6 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h6><p><strong>upper</strong></p><p><strong>lower</strong></p><p><strong>length(求字符串长度)</strong></p><p><strong>trim(去空格)</strong></p><p><strong>lpad(指定长度向左用指定字符补齐)</strong></p><p><strong>rpad</strong></p><p><strong>regexp_replace(用指定字符串替换字符串)</strong></p><p>select regexp_replace(“2030/09/01”,”/“,”-“);</p><p><strong>substr(从某个位置开始截取几位)</strong></p><p><strong>concat(拼接)</strong></p><p><strong>concat_ws(用第一个参数拼接后面的字符串)</strong></p><p>select concat_ws(“.”,”192”,”168”,”1”,”1”);</p><p><strong>split(根据指定字符拆分)</strong></p><p>select split(“192.168.1.1”,”\.”);(需要转义特定字符)</p><p><strong>json_tuple(拆分json字符串)</strong></p><p><strong>parse_url_tuple</strong></p><p><a href="http://www.google.com/test/film?param1=value1&amp;param2=value2">http://www.google.com/test/film?param1=value1&amp;param2=value2</a></p><p>http/https: 协议<br><a href="http://www.google.com/">www.google.com</a>: domain<br>test/film: path<br>param1=value1&amp;param2=value2: param</p><h4 id="3-案例"><a href="#3-案例" class="headerlink" title="3.案例:"></a>3.案例:</h4><p><strong>案例一</strong>:</p><p>有一张部门表,求出每个部门的男女人数</p><p>create table emp_info(<br>id string,<br>name string,<br>dept string,<br>sex string<br>)ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘,’;</p><p>数据:</p><p>1,ZHANGSAN,RD,1<br>2,LISI,RD,1<br>3,XIAOHEI,RD,2<br>4,XIAOBAI,QA,1<br>5,ERGOU,QA,2<br>6,DAZHUANG,QA,2</p><p>方法一:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> dept<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> dept<span class="token operator">=</span><span class="token string">"1"</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> m_cnt<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> dept<span class="token operator">=</span><span class="token string">"2"</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f_cnt<span class="token keyword">from</span> emp_info<span class="token keyword">group</span> <span class="token keyword">by</span> dept<span class="token punctuation">;</span></code></pre><p>方法二:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> dept<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">(</span>dept<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> m_cnt<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">(</span>dept<span class="token operator">=</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f_cnt<span class="token keyword">from</span> emp_info<span class="token keyword">group</span> <span class="token keyword">by</span> dept<span class="token punctuation">;</span></code></pre><p><strong>案例二(行转列)</strong>:</p><p>相同部门、性别的人合在一起两列展示部门性别和姓名：</p><p>RD,1 PK|RUOZE<br>RD,2 XIAOHONG<br>QA,1 XIAOZHANG<br>QA,2 XIAOLI|XIAOFANG</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> dept_sex<span class="token punctuation">,</span>concat_ws<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">,</span>collect_set<span class="token punctuation">(</span>t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>concat_ws<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span>dept<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> dept_sex<span class="token keyword">from</span> emp_info<span class="token punctuation">)</span> t<span class="token keyword">group</span> <span class="token keyword">by</span> dept_sex<span class="token punctuation">;</span></code></pre><p><strong>案例三(列转行)</strong>:</p><p>数据:</p><p>PK MapReduce<br>PK Hive<br>PK Spark<br>PK Flink<br>J Hadoop<br>J HBase<br>J Kafka</p><p>最终转化为:</p><p>PK      MapReduce,Hive,Spark,Flink<br>J       Hadoop,HBase,Kafka</p><p>建表:</p><p>create table column2row(name string, courses string)<br>row format delimited fields terminated by ‘\t’;</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>name<span class="token punctuation">,</span>course<span class="token keyword">from</span>column2rowlateral <span class="token keyword">view</span> explode<span class="token punctuation">(</span>split<span class="token punctuation">(</span>courses<span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span> course_tmp <span class="token keyword">as</span> course<span class="token punctuation">;</span></code></pre><p><strong>案例四</strong></p><p>按月统计每个网站的点击次数:</p><p>create table user_click (</p><p>domain string,</p><p>time string,</p><p>traffic int)ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘,’;</p><p>数据:</p><p>gifshow.com,2019/01/01,5<br>yy.com,2019/01/01,4<br>huya.com,2019/01/01,1<br>gifshow.com,2019/01/20,6<br>gifshow.com,2019/02/01,8<br>yy.com,2019/01/20,5<br>gifshow.com,2019/02/02,7</p><p>最终展示为:</p><p>域名               月份    小计   累计<br>gifshow.com     2019-01  11    11<br>gifshow.com     2019-02  15    26<br>yy.com          2019-01  9     9<br>huya.com        2019-01  1     1</p><p>1.先求出每个月的小计</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_user_click <span class="token keyword">as</span> <span class="token keyword">select</span>domain<span class="token punctuation">,</span>month<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>traffic<span class="token punctuation">)</span> sum<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span>domain<span class="token punctuation">,</span>substr<span class="token punctuation">(</span>regexp_replace<span class="token punctuation">(</span>time<span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span> month<span class="token punctuation">,</span>traffic<span class="token keyword">from</span>user_click<span class="token punctuation">)</span> <span class="token number">c</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">c</span><span class="token punctuation">.</span>domain<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>month<span class="token punctuation">;</span></code></pre><p>2.求出当前月的累计数量</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>t<span class="token punctuation">.</span>domain<span class="token punctuation">,</span>t<span class="token punctuation">.</span>month<span class="token punctuation">,</span>sum<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token keyword">from</span> t_user_click t<span class="token keyword">inner</span> <span class="token keyword">join</span> t_user_click u<span class="token keyword">on</span> t<span class="token punctuation">.</span>domain<span class="token operator">=</span>u<span class="token punctuation">.</span>domain<span class="token keyword">where</span> t<span class="token punctuation">.</span>month<span class="token operator">>=</span>u<span class="token punctuation">.</span>month<span class="token keyword">group</span> <span class="token keyword">by</span> t<span class="token punctuation">.</span>domain<span class="token punctuation">,</span>t<span class="token punctuation">.</span>month<span class="token punctuation">,</span>t<span class="token punctuation">.</span>sum<span class="token punctuation">;</span></code></pre><p><strong>案例五</strong>:</p><p>请用Hive完成wc统计<br>hello,hello,hello<br>world,world<br>welcome</p><p>建表:</p><p>create table hive_wc(sentence string);</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>word<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> cnt<span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> explode<span class="token punctuation">(</span>split<span class="token punctuation">(</span>sentence<span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> word<span class="token keyword">from</span> hive_wc<span class="token punctuation">)</span> t<span class="token keyword">group</span> <span class="token keyword">by</span> word<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive基础之Hive参数配置及语法</title>
      <link href="2018/12/08/2020-12-06-quannnxu-hive2/"/>
      <url>2018/12/08/2020-12-06-quannnxu-hive2/</url>
      
        <content type="html"><![CDATA[<h4 id="1-参数修改"><a href="#1-参数修改" class="headerlink" title="1.参数修改"></a>1.参数修改</h4><h5 id="1-1获取hive执行引擎"><a href="#1-1获取hive执行引擎" class="headerlink" title="1.1获取hive执行引擎:"></a>1.1获取hive执行引擎:</h5><p>set hive.execution.engine;</p><h5 id="1-2修改hive执行引擎"><a href="#1-2修改hive执行引擎" class="headerlink" title="1.2修改hive执行引擎:"></a>1.2修改hive执行引擎:</h5><p>set hive.execution.engine=tez;(看情况修改)</p><h5 id="1-3修改hive-site-xml"><a href="#1-3修改hive-site-xml" class="headerlink" title="1.3修改hive-site.xml"></a>1.3修改hive-site.xml</h5><p>打印头信息:<br>    <property><br>      <name>hive.cli.print.header</name><br>      <value>true</value><br>    </property><br>显示最近使用的库:<br>    <property><br>      <name>hive.cli.print.current.db</name><br>      <value>true</value><br>    </property></p><p>显示如下:</p><p>hive (default)&gt; select * from test1;<br>OK<br>test1.id<br>100<br>Time taken: 0.035 seconds, Fetched: 1 row(s)</p><h4 id="2-Hive中参数设置的几种方式"><a href="#2-Hive中参数设置的几种方式" class="headerlink" title="2.Hive中参数设置的几种方式:"></a>2.Hive中参数设置的几种方式:</h4><p>​    hive-site.xml    全局</p><p>​    hive –hiveconf</p><p>​    命令行set a=b;</p><p>优先级:hive-site.xml &lt; hive –hiveconf &lt; set a=b</p><h4 id="3-Hive命令行"><a href="#3-Hive命令行" class="headerlink" title="3.Hive命令行"></a>3.Hive命令行</h4><p>​    -e：SQL语句<br>​    -f：SQL文件<br>​    –hiveconf：设置参数<br>​    -i：定义UDF函数<br>​    exit</p><h5 id="3-1-hive-e使用"><a href="#3-1-hive-e使用" class="headerlink" title="3.1 hive -e使用:"></a>3.1 hive -e使用:</h5><p>[hadoop@warehouse001 bin]$ hive -e “select * from test1”;<br>OK<br>test1.id<br>100<br>Time taken: 3.248 seconds, Fetched: 1 row(s)</p><p><strong>hive -e以后shell封装脚本使用</strong></p><h5 id="3-2-hive-f使用"><a href="#3-2-hive-f使用" class="headerlink" title="3.2 hive -f使用:"></a>3.2 hive -f使用:</h5><p>[hadoop@warehouse001 bin]$ vi 1.sql</p><p>select * from test1;</p><p>[hadoop@warehouse001 bin]$ hive -f 1.sql<br>OK<br>test1.id<br>100<br>Time taken: 3.363 seconds, Fetched: 1 row(s)</p><h4 id="4-Hive-SQL"><a href="#4-Hive-SQL" class="headerlink" title="4.Hive SQL"></a>4.Hive SQL</h4><p><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL%E5%AE%98%E6%96%B9%E8%AF%AD%E6%B3%95,%E6%9C%ACblog%E8%AF%AD%E6%B3%95%E6%9D%A5%E8%87%AA%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL官方语法,本blog语法来自官方文档</a></p><p><strong>Create Database</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">(</span><span class="token keyword">DATABASE</span><span class="token operator">|</span><span class="token keyword">SCHEMA</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> database_name  <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> database_comment<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">--描述信息</span>  <span class="token punctuation">[</span>LOCATION hdfs_path<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">--自定义HDFS路径</span>  <span class="token punctuation">[</span>MANAGEDLOCATION hdfs_path<span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token keyword">WITH</span> DBPROPERTIES <span class="token punctuation">(</span>property_name<span class="token operator">=</span>property_value<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>如:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> hive<span class="token punctuation">;</span></code></pre><p>HDFS路径:/user/hive/warehouse/hive.db</p><p>元数据库DBS表信息</p><p><img src="https://i.loli.net/2020/12/08/Tp7k1thB6cSVN5R.png"></p><p><strong>Drop Database</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token punctuation">(</span><span class="token keyword">DATABASE</span><span class="token operator">|</span><span class="token keyword">SCHEMA</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> database_name <span class="token punctuation">[</span><span class="token keyword">RESTRICT</span><span class="token operator">|</span><span class="token keyword">CASCADE</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>hive (hive)&gt; show tables;<br>OK<br>tab_name<br>test<br>Time taken: 0.018 seconds, Fetched: 1 row(s)<br>hive (hive)&gt; drop database hive;<br>FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.DDLTask. InvalidOperationException(message:Database hive is not empty. One or more tables exist.)</p><p><strong>当数据库有表时不能直接删除,可使用CASCADE强制级联删除,但不推荐使用.</strong></p><p><strong>Alter Database</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token punctuation">(</span><span class="token keyword">DATABASE</span><span class="token operator">|</span><span class="token keyword">SCHEMA</span><span class="token punctuation">)</span> database_name <span class="token keyword">SET</span> DBPROPERTIES <span class="token punctuation">(</span>property_name<span class="token operator">=</span>property_value<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">-- (Note: SCHEMA added in Hive 0.14.0)</span><span class="token keyword">ALTER</span> <span class="token punctuation">(</span><span class="token keyword">DATABASE</span><span class="token operator">|</span><span class="token keyword">SCHEMA</span><span class="token punctuation">)</span> database_name <span class="token keyword">SET</span> OWNER <span class="token punctuation">[</span><span class="token keyword">USER</span><span class="token operator">|</span>ROLE<span class="token punctuation">]</span> user_or_role<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">-- (Note: Hive 0.13.0 and later; SCHEMA added in Hive 0.14.0)</span><span class="token keyword">ALTER</span> <span class="token punctuation">(</span><span class="token keyword">DATABASE</span><span class="token operator">|</span><span class="token keyword">SCHEMA</span><span class="token punctuation">)</span> database_name <span class="token keyword">SET</span> LOCATION hdfs_path<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- (Note: Hive 2.2.1, 2.4.0 and later)</span><span class="token keyword">ALTER</span> <span class="token punctuation">(</span><span class="token keyword">DATABASE</span><span class="token operator">|</span><span class="token keyword">SCHEMA</span><span class="token punctuation">)</span> database_name <span class="token keyword">SET</span> MANAGEDLOCATION hdfs_path<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- (Note: Hive 4.0.0 and later)</span></code></pre><p><strong>Use Database</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">USE</span> database_name<span class="token punctuation">;</span><span class="token keyword">USE</span> <span class="token keyword">DEFAULT</span><span class="token punctuation">;</span></code></pre><p><strong>Create Table</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token keyword">TEMPORARY</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>EXTERNAL<span class="token punctuation">]</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>db_name<span class="token punctuation">.</span><span class="token punctuation">]</span>table_name    <span class="token comment" spellcheck="true">-- (Note: TEMPORARY available in Hive 0.14.0 and later)</span>  <span class="token punctuation">[</span><span class="token punctuation">(</span>col_name data_type <span class="token punctuation">[</span>column_constraint_specification<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> col_comment<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span>constraint_specification<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> table_comment<span class="token punctuation">]</span>  <span class="token punctuation">[</span>PARTITIONED <span class="token keyword">BY</span> <span class="token punctuation">(</span>col_name data_type <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> col_comment<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token keyword">CLUSTERED</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>col_name<span class="token punctuation">,</span> col_name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>SORTED <span class="token keyword">BY</span> <span class="token punctuation">(</span>col_name <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">INTO</span> num_buckets BUCKETS<span class="token punctuation">]</span>  <span class="token punctuation">[</span>SKEWED <span class="token keyword">BY</span> <span class="token punctuation">(</span>col_name<span class="token punctuation">,</span> col_name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">-- (Note: Available in Hive 0.10.0 and later)]</span>     <span class="token keyword">ON</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>col_value<span class="token punctuation">,</span> col_value<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>col_value<span class="token punctuation">,</span> col_value<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>     <span class="token punctuation">[</span>STORED <span class="token keyword">AS</span> DIRECTORIES<span class="token punctuation">]</span>  <span class="token punctuation">[</span>   <span class="token punctuation">[</span><span class="token keyword">ROW</span> FORMAT row_format<span class="token punctuation">]</span>    <span class="token punctuation">[</span>STORED <span class="token keyword">AS</span> file_format<span class="token punctuation">]</span>     <span class="token operator">|</span> STORED <span class="token keyword">BY</span> <span class="token string">'storage.handler.class.name'</span> <span class="token punctuation">[</span><span class="token keyword">WITH</span> SERDEPROPERTIES <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">-- (Note: Available in Hive 0.6.0 and later)</span>  <span class="token punctuation">]</span>  <span class="token punctuation">[</span>LOCATION hdfs_path<span class="token punctuation">]</span>  <span class="token punctuation">[</span>TBLPROPERTIES <span class="token punctuation">(</span>property_name<span class="token operator">=</span>property_value<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">-- (Note: Available in Hive 0.6.0 and later)</span>  <span class="token punctuation">[</span><span class="token keyword">AS</span> select_statement<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">-- (Note: Available in Hive 0.5.0 and later; not supported for external tables)</span></code></pre><table><thead><tr><th align="left">Storage Format</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">STORED AS TEXTFILE</td><td align="left">Stored as plain text files. TEXTFILE is the default file format, unless the configuration parameter <a href="https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties#ConfigurationProperties-hive.default.fileformat">hive.default.fileformat</a> has a different setting.Use the DELIMITED clause to read delimited files.Enable escaping for the delimiter characters by using the ‘ESCAPED BY’ clause (such as ESCAPED BY ‘&#39;)  Escaping is needed if you want to work with data that can contain these delimiter characters.   A custom NULL format can also be specified using the ‘NULL DEFINED AS’ clause (default is ‘\N’). (Hive 4.0) All BINARY columns in the table are assumed to be base64 encoded. To read the data as raw bytes:TBLPROPERTIES (“hive.serialization.decode.binary.as.base64”=”false”)</td></tr><tr><td align="left">STORED AS SEQUENCEFILE</td><td align="left">Stored as compressed Sequence File.</td></tr><tr><td align="left">STORED AS ORC</td><td align="left">Stored as <a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+ORC#LanguageManualORC-HiveQLSyntax">ORC file format</a>. Supports ACID Transactions &amp; Cost-based Optimizer (CBO). Stores column-level metadata.</td></tr><tr><td align="left">STORED AS PARQUET</td><td align="left">Stored as Parquet format for the <a href="https://cwiki.apache.org/confluence/display/Hive/Parquet">Parquet</a> columnar storage format in <a href="https://cwiki.apache.org/confluence/display/Hive/Parquet#Parquet-Hive0.13andlater">Hive 0.13.0 and later</a>;  Use ROW FORMAT SERDE … STORED AS INPUTFORMAT … OUTPUTFORMAT syntax … in <a href="https://cwiki.apache.org/confluence/display/Hive/Parquet#Parquet-Hive0.10-0.12">Hive 0.10, 0.11, or 0.12</a>.</td></tr><tr><td align="left">STORED AS AVRO</td><td align="left">Stored as Avro format in <a href="https://issues.apache.org/jira/browse/HIVE-6806">Hive 0.14.0 and later</a> (see <a href="https://cwiki.apache.org/confluence/display/Hive/AvroSerDe">Avro SerDe</a>).</td></tr><tr><td align="left">STORED AS RCFILE</td><td align="left">Stored as <a href="https://en.wikipedia.org/wiki/RCFile">Record Columnar File</a> format.</td></tr><tr><td align="left">STORED AS JSONFILE</td><td align="left">Stored as Json file format in Hive 4.0.0 and later.</td></tr><tr><td align="left">STORED BY</td><td align="left">Stored by a non-native table format. To create or link to a non-native table, for example a table backed by <a href="https://cwiki.apache.org/confluence/display/Hive/HBaseIntegration">HBase</a> or <a href="https://cwiki.apache.org/confluence/display/Hive/Druid+Integration">Druid</a> or <a href="https://cwiki.apache.org/confluence/display/Hive/AccumuloIntegration">Accumulo</a>.  See <a href="https://cwiki.apache.org/confluence/display/Hive/StorageHandlers">StorageHandlers</a> for more information on this option.</td></tr><tr><td align="left">INPUTFORMAT and OUTPUTFORMAT</td><td align="left">in the file_format to specify the name of a corresponding InputFormat and OutputFormat class as a string literal.  For example, ‘org.apache.hadoop.hive.contrib.fileformat.base64.Base64TextInputFormat’.   For LZO compression, the values to use are  ‘INPUTFORMAT “com.hadoop.mapred.DeprecatedLzoTextInputFormat”  OUTPUTFORMAT “<a href="http://org.apache.hadoop.hive.ql.io/">org.apache.hadoop.hive.ql.io</a>.HiveIgnoreKeyTextOutputFormat”‘   (see <a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+LZO">LZO Compression</a>).</td></tr></tbody></table><p>如:</p><p>create table table_name(</p><p>id int,name string,age int</p><p>)</p><p>CREATE TABLE：指定要创建的表的名字<br>col_name data_type：列名以及对应的数据类型，多个列之间使用逗号分隔<br>PARTITIONED BY：指定分区<br>CLUSTERED BY： 排序、分桶<br>ROW FORMAT：指定数据的分隔符等信息<br>STORED AS：指定表存储的数据格式：textfile rc orc parquet等<br>LOCATION：指定表在文件系统上的存储路径<br>AS select_statement: 通过select的sql语句的结果来创建表</p><p><strong>创建员工表:</strong></p><p>create table emp(<br>empno int,<br>ename string,<br>job string,<br>mgr int,<br>hiredate string,<br>sal double,<br>comm double,<br>deptno int<br>) ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’;</p><p><strong>load本地文件:</strong></p><p>load data local inpath ‘/home/hadoop/data/emp.txt’ overwrite into table emp;</p><p>Time taken: 0.155 seconds<br>hive (hive)&gt; select * from emp;<br>OK<br>emp.empno       emp.ename       emp.job emp.mgr emp.hiredate    emp.sal emp.comm        emp.deptno<br>7369    SMITH   CLERK   7902    1980-12-17 00:00:00     800.0   NULL    20<br>7499    ALLEN   SALESMAN        7698    1981-02-20 00:00:00     1600.0  300.0   30<br>7521    WARD    SALESMAN        7698    1981-02-22 00:00:00     1250.0  500.0   30<br>7566    JONES   MANAGER 7839    1981-04-02 00:00:00     2975.0  NULL    20<br>7654    MARTIN  SALESMAN        7698    1981-09-28 00:00:00     1250.0  1400.0  30<br>7698    BLAKE   MANAGER 7839    1981-05-01 00:00:00     2850.0  NULL    30<br>7782    CLARK   MANAGER 7839    1981-06-09 00:00:00     2450.0  NULL    10<br>7788    SCOTT   ANALYST 7566    1982-12-09 00:00:00     3000.0  NULL    20<br>7839    KING    PRESIDENT       NULL    5000.00 NULL    10.0    NULL<br>7844    TURNER  SALESMAN        7698    1981-09-08 00:00:00     1500.0  0.0     30<br>7876    ADAMS   CLERK   7788    1983-01-12 00:00:00     1100.0  NULL    20<br>7900    JAMES   CLERK   7698    1981-12-03 00:00:00     950.0   NULL    30<br>7902    FORD    ANALYST 7566    1981-12-03 00:00:00     3000.0  NULL    20<br>7934    MILLER  CLERK   7782    1982-01-23 00:00:00     1300.0  NULL    10<br>Time taken: 0.258 seconds, Fetched: 14 row(s)</p><p>只建表结构:</p><p>create table emp2 like emp;</p><p><strong>内部表和外部表的区别:</strong></p><p>​    内部表:创建语法create table xxxx;</p><p>​    <strong>内部表删除表之后HDFS和元数据都被删除了</strong></p><p>​    外部表:创建语法create external table xxx;</p><p>​    <strong>外部表删除之后只删除元数据,HDFS文件依旧还存在</strong></p><p>创建内部表:</p><p>create table emp_managed(<br>empno int,<br>ename string,<br>job string,<br>mgr int,<br>hiredate string,<br>sal double,<br>comm double,<br>deptno int<br>) ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’;</p><pre><code>hive (hive)&gt; desc formatted emp_managed;OKcol_name        data_type       comment# col_name              data_type               comment             empno                   int                                         ename                   string                                      job                     string                                      mgr                     int                                         hiredate                string                                      sal                     double                                      comm                    double                                      deptno                  int                                         # Detailed Table Information             Database:               hive                     OwnerType:              USER                     Owner:                  hadoop                   CreateTime:             Tue Dec 08 22:33:37 CST    LastAccessTime:         UNKNOWN                  Protect Mode:           None                     Retention:              0                        Location:               hdfs://warehouse001:9000/user/hive/warehouse/hive.db/emp_managed         Table Type:             MANAGED_TABLE      --内部表类型是MANAGED_TABLE 是交给hive内部管理的    Table Parameters:                        transient_lastDdlTime   1607438017          # Storage Information            SerDe Library:          org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe       InputFormat:            org.apache.hadoop.mapred.TextInputFormat         OutputFormat:           org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat       Compressed:             No                       Num Buckets:            -1                       Bucket Columns:         []                       Sort Columns:           []                       Storage Desc Params:                     field.delim             \t                          serialization.format    \t                  Time taken: 0.06 seconds, Fetched: 35 row(s)</code></pre><p>创建外部表:</p><p>create external table emp_external(<br>empno int,<br>ename string,<br>job string,<br>mgr int,<br>hiredate string,<br>sal double,<br>comm double,<br>deptno int<br>) ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’;</p><pre><code>hive (hive)&gt; desc formatted emp_external;OKcol_name        data_type       comment# col_name              data_type               comment             empno                   int                                         ename                   string                                      job                     string                                      mgr                     int                                         hiredate                string                                      sal                     double                                      comm                    double                                      deptno                  int                                         # Detailed Table Information             Database:               hive                     OwnerType:              USER                     Owner:                  hadoop                   CreateTime:             Tue Dec 08 22:39:49 CST      LastAccessTime:         UNKNOWN                  Protect Mode:           None                     Retention:              0                        Location:               hdfs://warehouse001:9000/user/hive/warehouse/hive.db/emp_external        Table Type:             EXTERNAL_TABLE  -- 外部表只删除元数据,不能删除HDFS文件        Table Parameters:                        EXTERNAL                TRUE                        transient_lastDdlTime   1607438389          # Storage Information            SerDe Library:          org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe       InputFormat:            org.apache.hadoop.mapred.TextInputFormat         OutputFormat:           org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat       Compressed:             No                       Num Buckets:            -1                       Bucket Columns:         []                       Sort Columns:           []                       Storage Desc Params:                     field.delim             \t                          serialization.format    \t                  Time taken: 0.053 seconds, Fetched: 36 row(s)</code></pre><p><strong>内部表和外部表的相互转换</strong></p><p>ALTER TABLE emp_external SET TBLPROPERTIES (‘EXTERNAL’ = ‘false’);</p><p><strong>EXTERNAL</strong>参数必须为大写</p><p>内部表同理转换.</p>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive基础之Hive简介及搭建</title>
      <link href="2018/12/05/2020-12-05-quannnxu-hive1/"/>
      <url>2018/12/05/2020-12-05-quannnxu-hive1/</url>
      
        <content type="html"><![CDATA[<h4 id="1-Hive是基于Hadoop之上的"><a href="#1-Hive是基于Hadoop之上的" class="headerlink" title="1.Hive是基于Hadoop之上的"></a><strong>1.Hive是基于Hadoop之上的</strong></h4><p>​    Hadoop广义:</p><p>​        大数据生态圈</p><p>​        Hive:使用sql完成大数据统计分析</p><p>​    Hadoop狭义:</p><p>​        HDFS    YARN    MR</p><h4 id="2-下载路径"><a href="#2-下载路径" class="headerlink" title="2.下载路径:"></a>2.下载路径:</h4><p>Apache的顶级项目或者是孵化项目路径</p><p>xxx.apache.org</p><p>GitHub:github.com/apache/xxx    (源码地址)</p><p>CDH版本:<a href="http://archive.cloudera.com/cdh5/cdh/5">http://archive.cloudera.com/cdh5/cdh/5</a></p><p>本次使用的是<strong>hive-1.1.0-cdh5.16.2</strong>版本</p><p>Hadoop、Hive、Sqoop、Hbase等    版本一定要一致（兼容性） Spark除外</p><p><a href="http://archive.cloudera.com/cdh5/cdh/5">http://archive.cloudera.com/cdh5/cdh/5</a></p><p>补充一个JDBC的概念:</p><p>Java数据库连接，（Java Database Connectivity，简称JDBC）是<a href="https://baike.baidu.com/item/Java%E8%AF%AD%E8%A8%80">Java语言</a>中用来规范客户端程序如何来访问数据库的<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3/10418844">应用程序接口</a>，提供了诸如查询和更新数据库中数据的方法。JDBC也是Sun Microsystems的商标。我们通常说的JDBC是面向关系型数据库的。</p><h4 id="3-distributed-storage-分布式存储系统"><a href="#3-distributed-storage-分布式存储系统" class="headerlink" title="3.distributed storage(分布式存储系统):"></a><strong>3.distributed storage(分布式存储系统):</strong></h4><p>​    HDFS</p><p>​    S3(亚马逊)</p><p>​    OSS(阿里云)</p><p>​    COS(腾讯云)</p><p>​    …</p><h4 id="4-Hive简介"><a href="#4-Hive简介" class="headerlink" title="4.Hive简介:"></a>4.Hive简介:</h4><p>​    FaceBook    解决海量的结构化日志的统计问题</p><p>​    Hive是构建在Hadoop之上的数据仓库</p><p>​        HDFS:Hive的数据存放在HDFS</p><p>​        MR:Hive作业（sql）是通过hive的框架翻译成MR</p><p>​        YARN:Hive的作业是提交到YARN上面去运行的</p><p>​    Hadoop:开发可以使用单机,生产上肯定都是分布式的</p><p>​    Hive其实就是一个客户端(提交机器)而已,没有集群概念</p><p>​        SQL==&gt;Hive==&gt;MR==&gt;YARN</p><p>​    Hive职责:将SQL翻译成底层对应的执行引擎作业</p><p>​    统一的元数据(metadata)管理==&gt;metastore</p><p>​        元数据:描述数据的数据</p><p>​        源数据:采集来的数据文件</p><p>​    Spark    SQL/Impala/Presto…统一使用metastore</p><p>Hive的数据是存放在distribute的storage上的,元数据是存储在metastore所对应的底层数据库中的(MySQL)</p><p>Hive架构:</p><p><img src="https://i.loli.net/2020/12/06/PijA9nQplqDLUXF.png"></p><h4 id="5-Hive架构"><a href="#5-Hive架构" class="headerlink" title="5.Hive架构"></a>5.Hive架构</h4><p><img src="https://i.loli.net/2020/12/07/Ct2pr6bKSjJonc7.png"></p><h5 id="5-1-Hive与RDBMS对比"><a href="#5-1-Hive与RDBMS对比" class="headerlink" title="5.1 Hive与RDBMS对比"></a>5.1 Hive与RDBMS对比</h5><p>可以从以下几点来对比:</p><p>​    分布式</p><p>​    节点数</p><p>​    成本</p><p>​    数据量</p><p>​    事务</p><p>​    hive也支持update操作,但一般不推荐用.</p><p>​    延时性</p><h5 id="5-2-Hive的适用场景"><a href="#5-2-Hive的适用场景" class="headerlink" title="5.2 Hive的适用场景"></a>5.2 Hive的适用场景</h5><p>​    批处理/离线处理</p><p>​    延时性大</p><p>​    尽量少涉及到update或者delete操作,虽然是支持的(走底层MR)</p><h5 id="5-2-Hive的优缺点"><a href="#5-2-Hive的优缺点" class="headerlink" title="5.2 Hive的优缺点"></a>5.2 Hive的优缺点</h5><p>​    优点:易上手、比MR使用起来简单的多</p><p>​    缺点:高延时</p><p><strong>Hive的执行速度对比MySQL的数据谁快?</strong></p><p>​    这两个是使用不同场景的,不能拿来比较</p><h5 id="5-3-Hive安装目录"><a href="#5-3-Hive安装目录" class="headerlink" title="5.3 Hive安装目录"></a>5.3 Hive安装目录</h5><p>auxlib  UDF函数编程</p><p>conf    Hive相关的配置文件</p><p>bin        jar包</p><p>lib         相关脚本</p><h5 id="5-4-添加到系统环境变量"><a href="#5-4-添加到系统环境变量" class="headerlink" title="5.4 添加到系统环境变量"></a>5.4 添加到系统环境变量</h5><p>[hadoop@warehouse001 ~]$ vi .bashrc</p><p>​        export HIVE_HOME=/home/hadoop/app/hive-1.1.0-cdh5.16.2<br>​        export PATH=$HIVE_HOME/bin:$PATH</p><p><strong>查看数据库</strong></p><p>hive&gt; show databases;<br>OK<br>default<br>Time taken: 3.702 seconds, Fetched: 1 row(s)</p><p><strong>创建表</strong></p><p>hive&gt; create table test(id int);<br>OK<br>Time taken: 4.293 seconds</p><p><strong>查询表</strong></p><p>hive&gt; select * from test;<br>OK<br>Time taken: 0.394 seconds</p><p>重新开启一个窗口重新进入Hive:</p><p>hive&gt; show tables;<br>FAILED: SemanticException org.apache.hadoop.hive.ql.metadata.HiveException: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient</p><p>原因:Derby是单Session的</p><p>Hive日志配置:</p><p>hive&gt; [hadoop@warehouse001 bin]$ cd ../conf/<br>[hadoop@warehouse001 conf]$ ll<br>total 20<br>-rw-r–r– 1 hadoop hadoop 1196 Jun  3  beeline-log4j.properties.template<br>-rw-r–r– 1 hadoop hadoop 2378 Jun  3  hive-env.sh.template<br>-rw-r–r– 1 hadoop hadoop 2662 Jun  3  hive-exec-log4j.properties.template<br>-rw-r–r– 1 hadoop hadoop 3505 Jun  3  hive-log4j.properties.template<br>-rw-r–r– 1 hadoop hadoop 2060 Jun  3  ivysettings.xml<br>[hadoop@warehouse001 conf]$ cp hive-log4j.properties.template hive-log4j.properties</p><p>Hive默认日志路径hive.log.dir=${java.io.tmpdir}/${user.name}</p><p>查看/tmp/hadoop/hive.log</p><p>Caused by: ERROR XJ040: Failed to start database ‘metastore_db’ with class loader sun.misc.Launcher$AppClassLoader@7cca494b, see the next exception for details.<br>        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)<br>        at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source)<br>        … 86 more<br>Caused by: ERROR XSDB6: Another instance of Derby may have already booted the database /home/hadoop/app/hive-1.1.0-cdh5.16.2/bin/metastore_db.</p><p>由此可见derby的单session的</p><h5 id="5-5-配置MySQL作为元数据库"><a href="#5-5-配置MySQL作为元数据库" class="headerlink" title="5.5 配置MySQL作为元数据库"></a>5.5 配置MySQL作为元数据库</h5><p>[hadoop@warehouse001 conf]$ vi hive-site.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionURL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/hive_metadata?createDatabaseIfNotExist=true<span class="token entity" title="&amp;">&amp;amp;</span>useSSL=false<span class="token entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity" title="&amp;">&amp;amp;</span>characterEncoding=UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionDriverName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionUserName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionPassword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>xxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>再开启hive就可以多个窗口访问了</p><p><strong>元数据表:</strong></p><p>mysql&gt; use hive_metadata;<br>Database changed<br>mysql&gt; show tables;<br>+—————————+<br>| Tables_in_hive_metadata   |<br>+—————————+<br>| bucketing_cols            |<br>| cds                       |<br>| columns_v2                |<br>| database_params           |<br>| dbs                       |<br>| func_ru                   |<br>| funcs                     |<br>| global_privs              |<br>| partition_keys            |<br>| roles                     |<br>| sd_params                 |<br>| sds                       |<br>| sequence_table            |<br>| serde_params              |<br>| serdes                    |<br>| skewed_col_names          |<br>| skewed_col_value_loc_map  |<br>| skewed_string_list        |<br>| skewed_string_list_values |<br>| skewed_values             |<br>| sort_cols                 |<br>| table_params              |<br>| tbls                      |<br>| version                   |<br>+—————————+</p><p>​    DBS: databases<br>​    TBLS: Tables<br>​    COLUMNS_V2: column </p><h5 id="5-6-Hive默认的存放路径"><a href="#5-6-Hive默认的存放路径" class="headerlink" title="5.6 Hive默认的存放路径"></a>5.6 Hive默认的存放路径</h5><p>/user/hive/warehouse</p><p>默认库的表则是在/user/hive/warehouse/下</p><p>用户自定义表/user/hive/warehouse/库名.db/下</p>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop06之Yarn参数调优</title>
      <link href="2018/12/02/2020-12-02-quannnxu-hadoop6/"/>
      <url>2018/12/02/2020-12-02-quannnxu-hadoop6/</url>
      
        <content type="html"><![CDATA[<h4 id="1-container容器"><a href="#1-container容器" class="headerlink" title="1.container容器"></a>1.container容器</h4><p>关于yarn的调优,其实就是调整container</p><p>虚拟化    是memory+cpu vcore组成的 是专门运行任务</p><p>生产上应如何调优container参数?</p><p>128G    16物理core</p><h5 id="1-1-系统装完消耗1G"><a href="#1-1-系统装完消耗1G" class="headerlink" title="1.1 系统装完消耗1G"></a>1.1 系统装完消耗1G</h5><h5 id="1-2-系统要预留20-内存"><a href="#1-2-系统要预留20-内存" class="headerlink" title="1.2 系统要预留20%内存"></a>1.2 系统要预留20%内存</h5><p>给当前进程服务,防止出现oom-kill机制</p><p>Linux系统防止夯住</p><p>给未来部署软件预留空间</p><p>128G服务器</p><p>128G*20%=26G </p><p>剩余102G</p><h5 id="1-3-DN-NM节点"><a href="#1-3-DN-NM节点" class="headerlink" title="1.3 DN NM节点"></a>1.3 DN NM节点</h5><p>存储和计算一体,数据本地化,节省网络IO</p><p>DN=2G(受限磁盘IO)</p><p>NM=4G    NM进程本身的内存</p><p>剩余内存96G    是真正container容器总内存,才是真正计算的内存</p><h5 id="1-4-container内存"><a href="#1-4-container内存" class="headerlink" title="1.4 container内存"></a>1.4 container内存</h5><p>yarn.nodemanager.resource.memory-mb        -1</p><p>​    <a href="http://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.16.2/">http://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.16.2/</a></p><p>yarn-default.xml</p><p><strong>yarn.nodemanager.resource.memory-mb    96G</strong></p><p><strong>yarn.scheduler.minimum-allocation-mb  1G</strong>    极限情况    96个container容器 内存1G</p><p><strong>yarn.scheduler.maximum-allocation-mb  96G</strong>    极限情况    1个container容器 内存96G</p><p>container容器会不断的字段增加内存1G,cdh有这个参数    默认不动</p><h5 id="1-5-container虚拟core"><a href="#1-5-container虚拟core" class="headerlink" title="1.5 container虚拟core"></a>1.5 container虚拟core</h5><p>这个概念是yarn自己引入的.设计初衷是考虑不同服务器的cpu性能不一样,每个cpu计算能力不一样.</p><p>比如某个物理cpu是另外一个物理cpu的2倍,这时通过设置第一个物理cpu的虚拟core来弥补差异</p><p>但是后来大家都是使用虚拟core，默认值一般都不会去修改，就是2</p><p>yarn.nodemanager.resource.pcores-vcores-multiplier  2 </p><p>生产调整</p><p><strong>yarn.nodemanager.resource.cpu-vcores    32</strong>(16*2,也可以适当预留几个物理core)</p><p><strong>yarn.scheduler.minimum-allocation-vcores  1</strong>    极限情况,是32个</p><p><strong>yarn.scheduler.maximum-allocation-vcores  32</strong>    极限情况,是1个</p><p>补充:</p><table><thead><tr><th>yarn.nodemanager.pmem-check-enabled(检查物理内存)</th><th>true</th></tr></thead><tbody><tr><td><strong>yarn.nodemanager.vmem-check-enabled(检查虚拟内存)</strong></td><td><strong>true</strong></td></tr><tr><td><strong>yarn.nodemanager.vmem-pmem-ratio(物理虚拟内存比例,一般不动)</strong></td><td><strong>2.1</strong></td></tr></tbody></table><h5 id="1-6-生产上如何设置"><a href="#1-6-生产上如何设置" class="headerlink" title="1.6 生产上如何设置"></a>1.6 生产上如何设置</h5><p>突破口yarn.scheduler.maximum-allocation-vcores</p><p>CPU    内存</p><p><strong>yarn.nodemanager.resource.cpu-vcores    32</strong></p><p><strong>yarn.scheduler.minimum-allocation-vcores  1</strong>    </p><p><strong>yarn.scheduler.maximum-allocation-vcores  4</strong>    极限情况下是有8个container</p><p>CDH官方经过大量验证,经验值,container容器最大分配vcore不要超过5,故一般生产设置4</p><p><strong>yarn.nodemanager.resource.memory-mb    96G</strong></p><p><strong>yarn.scheduler.minimum-allocation-mb  1G</strong>    </p><p><strong>yarn.scheduler.maximum-allocation-mb  12G</strong>    极限情况下,是有8个container</p><p>也就是说:1个container12G    </p><p>​                4个vcore    </p><p>​                1个vcore使用3G</p><p>正常来说,生产上yarn.scheduler.maximum-allocation-mb设置8G就OK</p><h5 id="1-7-参数如何配置"><a href="#1-7-参数如何配置" class="headerlink" title="1.7 参数如何配置"></a>1.7 参数如何配置</h5><p>假如该节点还有HBase RS节点=30G内存(关于内存指针压缩技术)</p><p><a href="https://blog.csdn.net/weixin_44641024/article/details/103248842">https://blog.csdn.net/weixin_44641024/article/details/103248842</a></p><p>服务器256G    32个物理core</p><p>如上6个参数如何设计?</p><p>预留256*20%=51    RS=30G</p><p>剩余175G</p><p>DN=3G    NM=6G</p><p>剩余166G</p><p><strong>yarn.nodemanager.resource.cpu-vcores    60</strong></p><p><strong>yarn.scheduler.minimum-allocation-vcores  1</strong>    </p><p><strong>yarn.scheduler.maximum-allocation-vcores  4</strong>    极限情况下是有8个container</p><p><strong>yarn.nodemanager.resource.memory-mb    166G</strong></p><p><strong>yarn.scheduler.minimum-allocation-mb  1G</strong>    </p><p><strong>yarn.scheduler.maximum-allocation-mb  21G</strong></p><p>1个container21G    4个vcore    1个vcore5G</p><h4 id="2-调度器"><a href="#2-调度器" class="headerlink" title="2.调度器"></a>2.调度器</h4><p>理想情况下，我们应用对Yarn资源的请求应该立刻得到满足，但现实情况资源往往是有限的，特别是在一</p><p>个很繁忙的集群，一个应用资源的请求经常需要等待一段时间才能的到相应的资源。在Yarn中，负责给应</p><p>用分配资源的就是Scheduler。其实调度本身就是一个难题，很难找到一个完美的策略可以解决所有的应用</p><p>场景。为此，Yarn提供了多种调度器和可配置的策略供我们选择。</p><h5 id="yarn的三种调度器"><a href="#yarn的三种调度器" class="headerlink" title="yarn的三种调度器:"></a>yarn的三种调度器:</h5><p><strong>FIFO Scheduler</strong>    先进先出调度器</p><p>把应用按提交的顺序排成一个队列，这是一个<strong>先进先出</strong>队列，在进行资源分配的时候，先给队列中最头上的应用进行分配资源，待最头上的应用需求满足后再给下一个分配，以此类推。</p><p><img src="https://i.loli.net/2020/12/05/2yhWg1HrIQTZlPA.png"></p><p><strong>Capacity Scheduler</strong>    计算调度器</p><p>Capacity调度器，有一个专门的队列用来运行小任务，但是为小任务专门设置一个队列会预先占用一定的集群资源，这就导致大任务的执行时间会落后于使用FIFO调度器时的时间。</p><p><img src="https://i.loli.net/2020/12/05/7dhbfQwnW1uAycz.png"></p><p><strong>FairScheduler</strong>    公平调度器 </p><p>在Fair调度器中，我们不需要预先占用一定的系统资源，Fair调度器会为所有运行的job动态的调整系统资源。如下图所示，当第一个大job提交时，只有这一个job在运行，此时它获得了所有集群资源；当第二个小任务提交后，Fair调度器会分配一半资源给这个小任务，让这两个任务公平的共享集群资源。</p><p><img src="https://i.loli.net/2020/12/05/aEeKiY8oxVj3pL6.png"></p><p>当第一个大job提交时，只有这一个job在运行，此时它获得了所有集群资源；</p><p>当第二个小任务提交后，从提交到获得资源会有一定的延迟，<br>因为它需要等待第一个任务释放占用的Container。</p><p>小任务执行完成之后也会释放自己占用的资源，大任务又获得了全部的系统资源。<br>最终的效果就是Fair调度器即得到了高的资源利用率又能保证小任务及时完成。</p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop05之MapReduce/yarn架构</title>
      <link href="2018/11/30/2020-11-29-quannnxu-hadoop5/"/>
      <url>2018/11/30/2020-11-29-quannnxu-hadoop5/</url>
      
        <content type="html"><![CDATA[<p>MapReduce</p><p>Hive 执行引擎就是MapReduce</p><h4 id="1-分布式计算框架"><a href="#1-分布式计算框架" class="headerlink" title="1.分布式计算框架"></a>1.分布式计算框架</h4><p>map    映射</p><p>​            指的是一组数据按照规则映射为一组</p><p>​            string= a b c</p><p>​            (a,1)</p><p>​            (b,1)</p><p>​            (a,1)</p><p>reduce    规约    汇总</p><p>​            (a,2)</p><p>​            (b,1)</p><p>SQL:</p><table><thead><tr><th align="center">id</th><th align="center">name</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">a</td></tr><tr><td align="center">2</td><td align="center">b</td></tr><tr><td align="center">3</td><td align="center">a</td></tr><tr><td align="center">4</td><td align="center">c</td></tr></tbody></table><p>select id,naem+’x’ from t;</p><table><thead><tr><th align="center">id</th><th align="center">name</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">ax</td></tr><tr><td align="center">2</td><td align="center">bx</td></tr><tr><td align="center">3</td><td align="center">ax</td></tr><tr><td align="center">4</td><td align="center">cx</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">from</span><span class="token punctuation">(</span>    <span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token operator">+</span><span class="token string">'x'</span> <span class="token keyword">from</span> t<span class="token punctuation">)</span> <span class="token keyword">group</span> <span class="token keyword">by</span> name<span class="token punctuation">;</span></code></pre><p>【<strong>shuffle</strong>】    洗牌:数据根据key进行网络传输规整到一起,按规则计算</p><p>warehouse001        </p><p>id=1        name=a    100w条</p><p>id=2        name=b    10w条</p><p>warehouse002        </p><p>id=1        name=a    1w条</p><p>id=3        name=c    10w条</p><p>reduce:</p><p>​                id=1        name=a    101w</p><p>​                id=2        name=b    10w</p><p>​                id=3        name=c    10w</p><h4 id="2-架构设计"><a href="#2-架构设计" class="headerlink" title="2.架构设计"></a>2.架构设计</h4><p>mr on yarn提交流程</p><p>yarn架构设计</p><h5 id="2-1-container-容器-虚拟化概念"><a href="#2-1-container-容器-虚拟化概念" class="headerlink" title="2.1 container 容器 虚拟化概念"></a>2.1 container 容器 虚拟化概念</h5><p>是一定的内存和cpu的资源组合</p><p>100个箱子</p><p>1个箱子    1个人    需要100h</p><p>1个箱子    5个人    需要20h</p><p>在内存够的情况下,适当增加cpu vcore来提升计算的并行度,提高效率</p><p>256G的服务器</p><p><strong>预留 38G(15%)</strong>:</p><p>剩余218G</p><p>1.系统需要一部分+预留空间(未来新增新的服务)</p><p>2.为了防止oom killer的机制(超出内存会杀掉耗内存最多的进程,是一种linux的保护机制)【<strong>out of memory</strong>】</p><p><img src="https://i.loli.net/2020/11/30/PlVA7SEx68QszZk.png"></p><h5 id="2-2流程"><a href="#2-2流程" class="headerlink" title="2.2流程"></a>2.2流程</h5><p><img src="https://i.loli.net/2020/11/30/TSgKNLn27QYtJ9j.png"></p><p>1.Client 向RM提交应用程序，其中包含applicationmaster主程序和启动命令<br>2.applications manager 会为【应用程序分配第一个container容器】，来运行applicationmaster主程序<br>3.applicationmaster主程序就会向applications manager 注册，就可以做yarn的web界面上看到job的运行状态<br>4.applicationmaster主程序采取轮询的方式通过【rpc】协议向resourcescheduler，申请和领取资源(哪台机器 领取多少内存 多少cpu VCORE)</p><p>启动applicationmaster主程序，领取资源；</p><hr><p>5.一旦applicationmaster主程序拿到资源的列表，就和对应的nm进程进行通信，要求启动container来运行task任务<br>6.nm就为task任务设置好运行的环境（container容器）将任务启动命令写在脚本里，并且通过脚本启动任务task<br>7.各个container的task 任务(map task、reduce task任务)，通过【rpc】协议向applicationmaster主程序进行汇报进度和状态，以此让applicationmaster主程序随时掌握task的运行状态。<br>当task任务运行失败，也会重启container任务<br>8.当所有的task任务全部完成，applicationmaster主程序会向applications manager 申请注销和关闭作业，这时在web界面查看任务是  是否完成 ，是成功还是失败。</p><p><strong>主程序在哪个进程的所在节点运行？</strong><br>nm</p><p><strong>主程序要申请container容器吗？</strong></p><p>需要</p><p><strong>一个作业，第一个container容器运行什么？</strong></p><p>运行主程序</p><h4 id="3-wordcount案例"><a href="#3-wordcount案例" class="headerlink" title="3.wordcount案例"></a>3.wordcount案例</h4><p><img src="https://i.loli.net/2020/11/30/tKLXJmfkwcNHVQp.png"></p><p><strong>前3个部分属于Map阶段,后3个部分属于Reduce阶段</strong></p><p>代码:</p><pre class=" language-shell"><code class="language-shell">package org.apache.hadoop.examples;import java.io.IOException;import java.util.StringTokenizer;import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.Path;import org.apache.hadoop.io.IntWritable;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapreduce.Job;import org.apache.hadoop.mapreduce.Mapper;import org.apache.hadoop.mapreduce.Reducer;import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;import org.apache.hadoop.util.GenericOptionsParser;public class WordCount &#123;  public static class TokenizerMapper        extends Mapper<Object, Text, Text, IntWritable>&#123;    //继承Mapper方法    private final static IntWritable one = new IntWritable(1);    private Text word = new Text();    public void map(Object key, Text value, Context context                    ) throws IOException, InterruptedException &#123;      StringTokenizer itr = new StringTokenizer(value.toString());      while (itr.hasMoreTokens()) &#123;        word.set(itr.nextToken());        context.write(word, one);        &#125;      //car,1      //car,1      //river,1    &#125;  &#125;  public static class IntSumReducer        extends Reducer<Text,IntWritable,Text,IntWritable> &#123;    private IntWritable result = new IntWritable();    public void reduce(Text key, Iterable<IntWritable> values,                        Context context                       ) throws IOException, InterruptedException &#123;      int sum = 0;      for (IntWritable val : values) &#123;          //reduce计数        sum += val.get();      &#125;      result.set(sum);   //3      context.write(key, result);   //car,3    &#125;  &#125;  public static void main(String[] args) throws Exception &#123;    Configuration conf = new Configuration();    String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();    if (otherArgs.length < 2) &#123;      System.err.println("Usage: wordcount <in> [<in>...] <out>");      System.exit(2);    &#125;    Job job = new Job(conf, "word count");    job.setJarByClass(WordCount.class);    job.setMapperClass(TokenizerMapper.class);    job.setCombinerClass(IntSumReducer.class);    job.setReducerClass(IntSumReducer.class);    job.setOutputKeyClass(Text.class);    job.setOutputValueClass(IntWritable.class);    for (int i = 0; i < otherArgs.length - 1; ++i) &#123;      FileInputFormat.addInputPath(job, new Path(otherArgs[i]));    &#125;    FileOutputFormat.setOutputPath(job,      new Path(otherArgs[otherArgs.length - 1]));    System.exit(job.waitForCompletion(true) ? 0 : 1);  &#125;&#125;</code></pre><p><strong>小文件的危害:</strong></p><p>在存储上,小文件过多对NN压力太大(元数据)</p><p>在计算上也会造成资源的浪费(container的内存是固定的,如10个小文件都是10M,container固定是1G,则需要耗费10G内存,但是如果合并小文件则只需要1G的内存)</p><p><strong>tip1:</strong></p><p>A表:主表</p><p>id    name</p><p>1        a        1</p><p>2        b        1</p><p>3        c        1</p><p>4        c        1</p><p>null    x        1w</p><p>B表:明细表</p><p>id    name</p><p>1        a        1w</p><p>2        b        2w</p><p>3        c        3w</p><p>null    x        4w</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>id<span class="token keyword">from</span> <span class="token number">a</span><span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token number">b</span><span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>id</code></pre><p>当null值join时会产生4wx1w数据</p><p>先要过滤null,否则会出现笛卡尔积</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span>id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token number">c</span><span class="token keyword">from</span> <span class="token number">a</span><span class="token keyword">group</span> <span class="token keyword">by</span> id<span class="token punctuation">)</span> <span class="token number">d</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">c</span> <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">100</span></code></pre><p>如果结果都是1则不需要担心,否则就要考虑这些值是否需要,如果需要的话只能慢慢跑,不需要的话就过滤掉.</p><p><strong>tip2:</strong></p><p>关于被挖矿后如何解决:</p><p><a href="https://blog.csdn.net/kevin_darkelf/article/details/46042739">https://blog.csdn.net/kevin_darkelf/article/details/46042739</a></p><p>分析脚本</p><p>一般给脚本权限 赋予 000</p><p>分析脚本，一般把目录删除掉，会又被下载，一般都是通过 wget命令</p><p>将wget命令 卸载掉</p><p>或者将wget重命名</p><p>最后一招，云主机的话联系客服备份文件,重置</p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop04之hdfs命令</title>
      <link href="2018/11/29/2020-11-28-quannnxu-hadoop4/"/>
      <url>2018/11/29/2020-11-28-quannnxu-hadoop4/</url>
      
        <content type="html"><![CDATA[<p>1.SNN(检查点动作)</p><p><img src="https://i.loli.net/2020/11/29/yqU1YtOkIhZVxSn.png"></p><p>517是正在编辑的日志                                                                                                                                                                                                                                                                                                             </p><p>1.snn执行checkpoint动作的时候,nn会使用当前的edit文件5515-516,nn会暂时将读写操作记录到一个新的edit文件中5117</p><p>2.snn将nn的fsimage 514和edits文件515-516远程下载到本地</p><p>3.snn将fsimage 514加载到内存中,将edits文件515-516年内容之内存中从头到尾的执行一次,创建一个新的fsimage文件516</p><p>4.snn将新的fsimage 516推送给nn</p><p>5.nn接受到fsimage 516.ckpt滚动为edit 157</p><p>是一份最新的</p><p>SNN主要目的是为了备份,但是生产不用,用的是HA,仅学习过程了解</p><p>HA:</p><p>NN(active)        NN(standby)热备</p><h4 id="2-hdfs命令"><a href="#2-hdfs命令" class="headerlink" title="2.hdfs命令"></a>2.hdfs命令</h4><h5 id="1-hadoop命令"><a href="#1-hadoop命令" class="headerlink" title="1.hadoop命令"></a>1.hadoop命令</h5><p>[hadoop@warehouse001 bin]$ ./hadoop<br>Usage: hadoop [–config confdir] COMMAND<br>       where COMMAND is one of:<br>  fs                   run a generic filesystem user client<br>  version              print the version<br>  jar <jar>            run a jar file<br>  checknative [-a|-h]  check native hadoop and compression libraries availability<br>  distcp <srcurl> <desturl> copy file or directories recursively<br>  archive -archiveName NAME -p <parent path> <src>* <dest> create a hadoop archive<br>  classpath            prints the class path needed to get the<br>  credential           interact with credential providers<br>                       Hadoop jar and the required libraries<br>  daemonlog            get/set the log level for each daemon<br>  s3guard              manage data on S3<br>  trace                view and modify Hadoop tracing settings<br> or<br>  CLASSNAME            run the class named CLASSNAME</p><p>Most commands print help when invoked w/o parameters.<br>[hadoop@warehouse001 bin]$ pwd<br>/home/hadoop/app/hadoop/bin</p><h5 id="2-fs命令"><a href="#2-fs命令" class="headerlink" title="2.fs命令"></a>2.fs命令</h5><p>[hadoop@warehouse001 bin]$ hadoop fs<br>Usage: hadoop fs [generic options]<br>        [-appendToFile <localsrc> … <dst>]<br>        [-cat [-ignoreCrc] <src> …]<br>        [-checksum <src> …]<br>        [-chgrp [-R] GROUP PATH…]<br>        [-chmod [-R] &lt;MODE[,MODE]… | OCTALMODE&gt; PATH…]<br>        [-chown [-R] [OWNER][:[GROUP]] PATH…]<br>        [-copyFromLocal [-f] [-p] [-l] <localsrc> … <dst>]<br>        [-copyToLocal [-p] [-ignoreCrc] [-crc] <src> … <localdst>]<br>        [-count [-q] [-h] [-v] [-x] <path> …]<br>        [-cp [-f] [-p | -p[topax]] <src> … <dst>]<br>        [-createSnapshot <snapshotDir> [<snapshotName>]]<br>        [-deleteSnapshot <snapshotDir> <snapshotName>]<br>        [-df [-h] [<path> …]]<br>        [-du [-s] [-h] [-x] <path> …]<br>        [-expunge]<br>        [-find <path> … <expression> …]<br>        [-get [-p] [-ignoreCrc] [-crc] <src> … <localdst>]<br>        [-getfacl [-R] <path>]<br>        [-getfattr [-R] {-n name | -d} [-e en] <path>]<br>        [-getmerge [-nl] <src> <localdst>]<br>        [-help [cmd …]]<br>        [-ls [-C] [-d] [-h] [-q] [-R] [-t] [-S] [-r] [-u] [<path> …]]<br>        [-mkdir [-p] <path> …]<br>        [-moveFromLocal <localsrc> … <dst>]<br>        [-moveToLocal <src> <localdst>]<br>        [-mv <src> … <dst>]<br>        [-put [-f] [-p] [-l] <localsrc> … <dst>]<br>        [-renameSnapshot <snapshotDir> <oldName> <newName>]<br>        [-rm [-f] [-r|-R] [-skipTrash] <src> …]<br>        [-rmdir [–ignore-fail-on-non-empty] <dir> …]<br>        [-setfacl [-R] [{-b|-k} {-m|-x <acl_spec>} <path>]|[–set <acl_spec> <path>]]<br>        [-setfattr {-n name [-v value] | -x name} <path>]<br>        [-setrep [-R] [-w] <rep> <path> …]<br>        [-stat [format] <path> …]<br>        [-tail [-f] <file>]<br>        [-test -[defsz] <path>]<br>        [-text [-ignoreCrc] <src> …]<br>        [-touchz <path> …]<br>        [-usage [cmd …]]</p><p>Generic options supported are<br>-conf <configuration file>     specify an application configuration file<br>-D &lt;property=value&gt;            use value for given property<br>-fs &lt;local|namenode:port&gt;      specify a namenode<br>-jt &lt;local|resourcemanager:port&gt;    specify a ResourceManager<br>-files <comma separated list of files>    specify comma separated files to be copied to the map reduce cluster<br>-libjars <comma separated list of jars>    specify comma separated jar files to include in the classpath.<br>-archives <comma separated list of archives>    specify comma separated archives to be unarchived on the compute machines.</p><p>The general command line syntax is<br>bin/hadoop command [genericOptions] [commandOptions]</p><p>检查支持压缩格式</p><p>[hadoop@warehouse001 bin]$ hadoop checknative<br>2018/11/29 18:31:58 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable<br>Native library checking:<br>hadoop:  false<br>zlib:    false<br>snappy:  false<br>lz4:     false<br>bzip2:   false<br>openssl: false<br>2018/11/29 18:31:58 INFO util.ExitUtil: Exiting with status 1</p><p>编译： <a href="https://blog.csdn.net/u010452388/article/details/99691421">https://blog.csdn.net/u010452388/article/details/99691421</a></p><p>尝试编译,编译后有更好的兼容性,二次开发</p><p>classpath</p><p>当前生效的目录,java运行的环境</p><p>[hadoop@warehouse001 bin]$ hadoop classpath<br>/home/hadoop/app/hadoop-2.6.0-cdh5.16.2/etc/hadoop:/home/hadoop/app/hadoop-2.6.0-cdh5.16.2/share/hadoop/common/lib/<em>:/home/hadoop/app/hadoop-2.6.0-cdh5.16.2/share/hadoop/common/</em>:/home/hadoop/app/hadoop-2.6.0-cdh5.16.2/share/hadoop/hdfs:/home/hadoop/app/hadoop-2.6.0-cdh5.16.2/share/hadoop/hdfs/lib/<em>:/home/hadoop/app/hadoop-2.6.0-cdh5.16.2/share/hadoop/hdfs/</em>:/home/hadoop/app/hadoop-2.6.0-cdh5.16.2/share/hadoop/yarn/lib/<em>:/home/hadoop/app/hadoop-2.6.0-cdh5.16.2/share/hadoop/yarn/</em>:/home/hadoop/app/hadoop-2.6.0-cdh5.16.2/share/hadoop/mapreduce/lib/<em>:/home/hadoop/app/hadoop-2.6.0-cdh5.16.2/share/hadoop/mapreduce/</em>:/home/hadoop/app/hadoop/contrib/capacity-scheduler/*.jar</p><p><a href="http://cn.voidcc.com/question/p-tenieuea-bex.html">http://cn.voidcc.com/question/p-tenieuea-bex.html</a></p><h5 id="3-hdfs"><a href="#3-hdfs" class="headerlink" title="3.hdfs"></a>3.hdfs</h5><p>hadoop fs=hdfs dfs</p><p>[hadoop@warehouse001 bin]$ cat hadoop</p><p># the core commands<br>    if [ “$COMMAND” = “fs” ] ; then<br>      CLASS=org.apache.hadoop.fs.FsShell</p><p>[hadoop@warehouse001 bin]$ cat hdfs</p><p>elif [ “$COMMAND” = “dfs” ] ; then<br>  CLASS=org.apache.hadoop.fs.FsShell</p><p>底层同样调用org.apache.hadoop.fs.FsShell</p><h5 id="3-1-dfs命令-使用较多的参数"><a href="#3-1-dfs命令-使用较多的参数" class="headerlink" title="3.1 dfs命令:(*使用较多的参数)"></a>3.1 dfs命令:(*使用较多的参数)</h5><p>[hadoop@warehouse001 bin]$ hdfs dfs<br>Usage: hadoop fs [generic options]<br>        [-appendToFile <localsrc> … <dst>]<br>      *  [-cat [-ignoreCrc] <src> …]<br>        [-checksum <src> …]<br>      *  [-chgrp [-R] GROUP PATH…]<br>      *[-chmod [-R] &lt;MODE[,MODE]… | OCTALMODE&gt; PATH…]<br>      *  [-chown [-R] [OWNER][:[GROUP]] PATH…]<br>      * [-copyFromLocal [-f] [-p] [-l] <localsrc> … <dst>]    ==&gt;put<br>      *[-copyToLocal [-p] [-ignoreCrc] [-crc] <src> … <localdst>]    ==&gt;get<br>        [-count [-q] [-h] [-v] [-x] <path> …]<br>      *  [-cp [-f] [-p | -p[topax]] <src> … <dst>]<br>        [-createSnapshot <snapshotDir> [<snapshotName>]]<br>        [-deleteSnapshot <snapshotDir> <snapshotName>]<br>        [-df [-h] [<path> …]]<br>      *  [-du [-s] [-h] [-x] <path> …]<br>        [-expunge]<br>      *  [-find <path> … <expression> …]<br>      *  [-get [-p] [-ignoreCrc] [-crc] <src> … <localdst>]<br>        [-getfacl [-R] <path>]<br>        [-getfattr [-R] {-n name | -d} [-e en] <path>]<br>        [-getmerge [-nl] <src> <localdst>]<br>      *  [-help [cmd …]]<br>      *  [-ls [-C] [-d] [-h] [-q] [-R] [-t] [-S] [-r] [-u] [<path> …]]<br>      *  [-mkdir [-p] <path> …]<br>        [-moveFromLocal <localsrc> … <dst>]<br>        [-moveToLocal <src> <localdst>]<br>      * [-mv <src> … <dst>]    【生产不建议使用移动，原因是移动过程中假如有问题，会导致数据不全。建议使用cp到目标端，验证通过再删除源端】<br>      *  [-put [-f] [-p] [-l] <localsrc> … <dst>]<br>        [-renameSnapshot <snapshotDir> <oldName> <newName>]<br>      * [-rm [-f] [-r|-R] [-skipTrash] <src> …]    【不建议使用skipTrash参数，会跳过回收站直接删除】<br>      * [-rmdir [–ignore-fail-on-non-empty] <dir> …]<br>        [-setfacl [-R] [{-b|-k} {-m|-x <acl_spec>} <path>]|[–set <acl_spec> <path>]]<br>        [-setfattr {-n name [-v value] | -x name} <path>]<br>        [-setrep [-R] [-w] <rep> <path> …]<br>        [-stat [format] <path> …]<br>        [-tail [-f] <file>]<br>        [-test -[defsz] <path>]<br>        [-text [-ignoreCrc] <src> …]<br>        [-touchz <path> …]<br>        [-usage [cmd …]]</p><p>Generic options supported are<br>-conf <configuration file>     specify an application configuration file<br>-D &lt;property=value&gt;            use value for given property<br>-fs &lt;local|namenode:port&gt;      specify a namenode<br>-jt &lt;local|resourcemanager:port&gt;    specify a ResourceManager<br>-files <comma separated list of files>    specify comma separated files to be copied to the map reduce cluster<br>-libjars <comma separated list of jars>    specify comma separated jar files to include in the classpath.<br>-archives <comma separated list of archives>    specify comma separated archives to be unarchived on the compute machines.</p><p>The general command line syntax is<br>bin/hadoop command [genericOptions] [commandOptions]</p><h5 id="3-2-dfsadmin"><a href="#3-2-dfsadmin" class="headerlink" title="3.2 dfsadmin"></a>3.2 dfsadmin</h5><p>[hadoop@warehouse001 bin]$ hdfs dfsadmin<br>Usage: hdfs dfsadmin<br>Note: Administrative commands can only be run as the HDFS superuser.<br>        [-report [-live] [-dead] [-decommissioning]]    【可以检查节点状况】<br>        [-safemode &lt;enter | leave | get | wait&gt;]    【安全模式】<br>        [-saveNamespace]<br>        [-rollEdits]<br>        [-restoreFailedStorage true|false|check]<br>        [-refreshNodes]<br>        [-setQuota <quota> <dirname>…<dirname>]<br>        [-clrQuota <dirname>…<dirname>]<br>        [-setSpaceQuota <quota> <dirname>…<dirname>]<br>        [-clrSpaceQuota <dirname>…<dirname>]<br>        [-finalizeUpgrade]<br>        [-rollingUpgrade [&lt;query|prepare|finalize&gt;]]<br>        [-refreshServiceAcl]<br>        [-refreshUserToGroupsMappings]<br>        [-refreshSuperUserGroupsConfiguration]<br>        [-refreshCallQueue]<br>        [-refresh <a href="host:ipc_port">host:ipc_port</a> <key> [arg1..argn]<br>        [-reconfig &lt;datanode|…&gt; <a href="host:ipc_port">host:ipc_port</a> &lt;start|status|properties&gt;]<br>        [-printTopology]<br>        [-refreshNamenodes datanode_host:ipc_port]<br>        [-deleteBlockPool datanode_host:ipc_port blockpoolId [force]]<br>        [-setBalancerBandwidth <bandwidth in bytes per second>]<br>        [-fetchImage <local directory>]<br>        [-allowSnapshot <snapshotDir>]<br>        [-disallowSnapshot <snapshotDir>]<br>        [-shutdownDatanode &lt;datanode_host:ipc_port&gt; [upgrade]]    【shutdown节点】<br>        [-getDatanodeInfo &lt;datanode_host:ipc_port&gt;]<br>        [-metasave filename]<br>        [-triggerBlockReport [-incremental] &lt;datanode_host:ipc_port&gt;]<br>        [-listOpenFiles [-blockingDecommission] [-path <path>]]<br>        [-help [cmd]]</p><p>Generic options supported are<br>-conf <configuration file>     specify an application configuration file<br>-D &lt;property=value&gt;            use value for given property<br>-fs &lt;local|namenode:port&gt;      specify a namenode<br>-jt &lt;local|resourcemanager:port&gt;    specify a ResourceManager<br>-files <comma separated list of files>    specify comma separated files to be copied to the map reduce cluster<br>-libjars <comma separated list of jars>    specify comma separated jar files to include in the classpath.<br>-archives <comma separated list of archives>    specify comma separated archives to be unarchived on the compute machines.</p><p>The general command line syntax is<br>bin/hadoop command [genericOptions] [commandOptions]</p><hr><h5 id="3-3-dfsadmin"><a href="#3-3-dfsadmin" class="headerlink" title="3.3 dfsadmin"></a>3.3 dfsadmin</h5><p>[hadoop@warehouse001 bin]$ hdfs dfsadmin -report<br>2018/11/29 19:03:58 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable<br>Configured Capacity: 42139451392 (39.25 GB)<br>Present Capacity: 26043494400 (24.25 GB)<br>DFS Remaining: 26043150336 (24.25 GB)<br>DFS Used: 344064 (336 KB)<br>DFS Used%: 0.00%<br>Under replicated blocks: 0<br>Blocks with corrupt replicas: 0<br>Missing blocks: 0<br>Missing blocks (with replication factor 1): 0</p><hr><p>Live datanodes (1):</p><p>Name: 172.23.75.57:50010 (warehouse001)<br>Hostname: warehouse001<br>Decommission Status : Normal<br>Configured Capacity: 42139451392 (39.25 GB)<br>DFS Used: 344064 (336 KB)<br>Non DFS Used: 13931802624 (12.98 GB)<br>DFS Remaining: 26043150336 (24.25 GB)<br>DFS Used%: 0.00%<br>DFS Remaining%: 61.80%<br>Configured Cache Capacity: 0 (0 B)<br>Cache Used: 0 (0 B)<br>Cache Remaining: 0 (0 B)<br>Cache Used%: 100.00%<br>Cache Remaining%: 0.00%<br>Xceivers: 1<br>Last contact: Sun Nov 29 19:03:57 CST 2018</p><hr><p>[hadoop@warehouse001 bin]$ hdfs haadmin<br>Usage: DFSHAAdmin [-ns <nameserviceId>]<br>    [-transitionToActive <serviceId> [–forceactive]]<br>    [-transitionToStandby <serviceId>]<br>    [-failover [–forcefence] [–forceactive] <serviceId> <serviceId>]<br>    [-getServiceState <serviceId>]<br>    [-checkHealth <serviceId>]<br>    [-help <command>]</p><p>Generic options supported are<br>-conf <configuration file>     specify an application configuration file<br>-D &lt;property=value&gt;            use value for given property<br>-fs &lt;local|namenode:port&gt;      specify a namenode<br>-jt &lt;local|resourcemanager:port&gt;    specify a ResourceManager<br>-files <comma separated list of files>    specify comma separated files to be copied to the map reduce cluster<br>-libjars <comma separated list of jars>    specify comma separated jar files to include in the classpath.<br>-archives <comma separated list of archives>    specify comma separated archives to be unarchived on the compute machines.</p><p>The general command line syntax is<br>bin/hadoop command [genericOptions] [commandOptions]</p><hr><h5 id="3-4-fsck"><a href="#3-4-fsck" class="headerlink" title="3.4 fsck"></a>3.4 fsck</h5><p>[hadoop@warehouse001 bin]$ hdfs fsck /    【健康检查】<br>2018/11/29 19:07:49 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable<br>Connecting to namenode via <a href="http://warehouse001:50070/fsck?ugi=hadoop&amp;path=/">http://warehouse001:50070/fsck?ugi=hadoop&amp;path=%2F</a><br>FSCK started by hadoop (auth:SIMPLE) from /172.23.75.57 for path / at Sun Nov 29 19:07:50 CST 2020<br>…………….Status: HEALTHY<br> Total size:    202382 B<br> Total dirs:    16<br> Total files:   16<br> Total symlinks:                0<br> Total blocks (validated):      14 (avg. block size 14455 B)<br> Minimally replicated blocks:   14 (100.0 %)<br> Over-replicated blocks:        0 (0.0 %)<br> Under-replicated blocks:       0 (0.0 %)<br> Mis-replicated blocks:         0 (0.0 %)<br> Default replication factor:    1<br> Average block replication:     1.0<br> Corrupt blocks:                0<br> Missing replicas:              0 (0.0 %)<br> Number of data-nodes:          1<br> Number of racks:               1<br>FSCK ended at Sun Nov 29 19:07:50 CST 2020 in 3 milliseconds</p><p>The filesystem under path ‘/‘ is HEALTHY</p><h4 id="4-安全模式"><a href="#4-安全模式" class="headerlink" title="4.安全模式"></a>4.安全模式</h4><h5 id="4-1-检查安全模式状态"><a href="#4-1-检查安全模式状态" class="headerlink" title="4.1 检查安全模式状态:"></a>4.1 检查安全模式状态:</h5><p>[hadoop@warehouse001 bin]$ hdfs dfsadmin -safemode get<br>2018/11/29 19:12:25 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable<br>Safe mode is OFF</p><h5 id="4-2-进入安全模式"><a href="#4-2-进入安全模式" class="headerlink" title="4.2 进入安全模式"></a>4.2 进入安全模式</h5><p>[hadoop@warehouse001 bin]$ hdfs dfsadmin -safemode enter<br>2018/11/29 19:13:23 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable<br>Safe mode is ON</p><h5 id="4-3-安全模式下是否可以读写"><a href="#4-3-安全模式下是否可以读写" class="headerlink" title="4.3 安全模式下是否可以读写"></a>4.3 安全模式下是否可以读写</h5><p>[hadoop@warehouse001 bin]$ echo 123 &gt; 3.log<br>[hadoop@warehouse001 bin]$ cat 3.log<br>123<br>[hadoop@warehouse001 bin]$ hdfs dfs -put 3.log /<br>2018/11/29 19:14:37 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable<br>put: Cannot create file/3.log.<em>COPYING</em>. Name node is in safe mode.</p><hr><p>[hadoop@warehouse001 bin]$ hdfs dfs -ls /<br>2018/11/29 19:15:23 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable<br>Found 3 items<br>drwx——   - hadoop supergroup          0 2020-11-24 23:06 /tmp<br>drwxr-xr-x   - hadoop supergroup          0 2020-11-22 16:02 /user<br>drwxr-xr-x   - hadoop supergroup          0 2020-11-24 23:06 /wordcount</p><p>结论:安全模式下可读,但不可写</p><p>安全模式,未来必然hdfs查看日志出现安全模式的英文单词,必然说明你的hdfs集群的有问题的,相当于处于一个保护模式.</p><p>一般需要你尝试手动执行命令离开安全模式(有可能会失败,根据问题去解决问题)</p><h5 id="4-4-维护操作-主动进入安全模式-维护操作"><a href="#4-4-维护操作-主动进入安全模式-维护操作" class="headerlink" title="4.4 维护操作(主动进入安全模式,维护操作)"></a>4.4 维护操作(主动进入安全模式,维护操作)</h5><p>保证这个时间段hdfs不会有新的数据写入,注意通知相关部门.</p><h4 id="5-回收站"><a href="#5-回收站" class="headerlink" title="5.回收站"></a>5.回收站</h4><p><a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/core-default.xml">https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/core-default.xml</a></p><h5 id="5-1-启用回收站"><a href="#5-1-启用回收站" class="headerlink" title="5.1 启用回收站"></a>5.1 启用回收站</h5><p>core-default.xml加入如下配置:(单位是分钟)</p><pre class=" language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.trash.interval<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>10080<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p>[hadoop@warehouse001 sbin]$ hdfs dfs -rm /wordcount/input/1.log<br>2018/11/29 19:35:57 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable<br>2018/11/29 19:35:57 INFO fs.TrashPolicyDefault: Moved: ‘hdfs://warehouse001:9000/wordcount/input/1.log’ to trash at: hdfs://warehouse001:9000/user/hadoop/.Trash/Current/wordcount/input/1.log</p><h5 id="5-2-回收站位置"><a href="#5-2-回收站位置" class="headerlink" title="5.2 回收站位置"></a>5.2 回收站位置</h5><p>hdfs://warehouse001:9000/user/hadoop/.Trash/Current/wordcount/input/1.log</p><p>生产必须要开启回收站,且回收站默认时间尽量长点.</p><p>涉及删除不要使用-skipTrash,以防万一.</p><p>恢复文件直接mv就可以了.</p><h4 id="6-各个节点平衡"><a href="#6-各个节点平衡" class="headerlink" title="6.各个节点平衡"></a>6.各个节点平衡</h4><p>开启节点平衡</p><p>[hadoop@warehouse001 sbin]$ ./start-balancer.sh<br>starting balancer, logging to /home/hadoop/app/hadoop-2.6.0-cdh5.16.2/logs/hadoop-hadoop-balancer-warehouse001.out<br>Time Stamp               Iteration#  Bytes Already Moved  Bytes Left To Move  Bytes Being Moved</p><hr><p>[hadoop@warehouse001 sbin]$ cat  /home/hadoop/app/hadoop-2.6.0-cdh5.16.2/logs/hadoop-hadoop-balancer-warehouse001.out<br>Time Stamp               Iteration#  Bytes Already Moved  Bytes Left To Move  Bytes Being Moved<br>The cluster is balanced. Exiting…<br>Nov 29, 2020 7:41:28 PM           0                  0 B                 0 B               -1 B<br>Nov 29, 2020 7:41:28 PM  Balancing took 1.47 seconds<br>f) unlimited<br>pending signals                 (-i) 30128<br>max locked memory       (kbytes, -l) 64<br>max memory size         (kbytes, -m) unlimited<br>open files                      (-n) 65535<br>pipe size            (512 bytes, -p) 8<br>POSIX message queues     (bytes, -q) 819200<br>real-time priority              (-r) 0<br>stack size              (kbytes, -s) 8192<br>cpu time               (seconds, -t) unlimited<br>max user processes              (-u) 4096<br>virtual memory          (kbytes, -v) unlimited<br>file locks                      (-x) unlimited</p><hr><p>[hadoop@warehouse001 sbin]$ cat  /home/hadoop/app/hadoop-2.6.0-cdh5.16.2/logs/hadoop-hadoop-balancer-warehouse001.log<br>2020-11-29 19:41:27,417 INFO org.apache.hadoop.hdfs.server.balancer.Balancer: namenodes  = [hdfs://warehouse001:9000]<br>2020-11-29 19:41:27,421 INFO org.apache.hadoop.hdfs.server.balancer.Balancer: parameters = Balancer.Parameters [BalancingPolicy.Node, threshold = 10.0, max idle iteration = 5, #excluded nodes = 0, #included nodes = 0, #source nodes = 0, run during upgrade = false]<br>2020-11-29 19:41:27,421 INFO org.apache.hadoop.hdfs.server.balancer.Balancer: included nodes = []<br>2020-11-29 19:41:27,421 INFO org.apache.hadoop.hdfs.server.balancer.Balancer: excluded nodes = []<br>2020-11-29 19:41:27,421 INFO org.apache.hadoop.hdfs.server.balancer.Balancer: source nodes = []<br>2020-11-29 19:41:27,504 WARN org.apache.hadoop.util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable<br>2020-11-29 19:41:28,311 INFO org.apache.hadoop.hdfs.server.balancer.Balancer: dfs.balancer.movedWinWidth = 5400000 (default=5400000)<br>2020-11-29 19:41:28,311 INFO org.apache.hadoop.hdfs.server.balancer.Balancer: dfs.balancer.moverThreads = 1000 (default=1000)<br>2020-11-29 19:41:28,311 INFO org.apache.hadoop.hdfs.server.balancer.Balancer: dfs.balancer.dispatcherThreads = 200 (default=200)<br>2020-11-29 19:41:28,311 INFO org.apache.hadoop.hdfs.server.balancer.Balancer: dfs.datanode.balance.max.concurrent.moves = 50 (default=50)<br>2020-11-29 19:41:28,315 INFO org.apache.hadoop.hdfs.server.balancer.Balancer: dfs.balancer.max-size-to-move = 10737418240 (default=10737418240)<br>2018-11-29 19:41:28,331 INFO org.apache.hadoop.net.NetworkTopology: Adding a new node: /default-rack/172.23.75.57:50010<br>2020-11-29 19:41:28,332 INFO org.apache.hadoop.hdfs.server.balancer.Balancer: 0 over-utilized: []<br>2020-11-29 19:41:28,332 INFO org.apache.hadoop.hdfs.server.balancer.Balancer: 0 underutilized: []</p><hr><p>threshold = 10.0【阈值】    </p><p>各个节点的使用率-平均磁盘使用率&lt;10%</p><p>生产上可以写个定时脚本,在业务低谷时定时执行.</p><p>dfs.datanode.balance.bandwidthPerSec             10m    【平衡带宽调节参数】</p><p><a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml">https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml</a></p><p>如何查看使用率:web,report等等</p><h4 id="7-单个节点多块磁盘平衡"><a href="#7-单个节点多块磁盘平衡" class="headerlink" title="7.单个节点多块磁盘平衡"></a>7.单个节点多块磁盘平衡</h4><p>磁盘挂载目录:</p><table><thead><tr><th>dfs.datanode.data.dir</th><th>file://${hadoop.tmp.dir}/dfs/data</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.data.dir <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/data01/dfs/dn,/data02/dfs/dn,/data03/dfs/dn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>#具体看磁盘挂载路径</code></pre><p>hdfs-default.xml配置节点信息</p><p>Apache hadoop2.x 不支持    dfs.disk.balancer.enabled 搜索不到<br><a href="https://hadoop.apache.org/docs/r2.10.1/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml">https://hadoop.apache.org/docs/r2.10.1/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml</a></p><p>Apache hadoop3.x 支持           dfs.disk.balancer.enabled 搜索到 是true<br><a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml">https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml</a></p><p>CDH    hadoop2.x 支持           dfs.disk.balancer.enabled 搜索到 是false<br><a href="http://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.16.2/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml">http://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.16.2/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml</a></p><p>如何去执行呢?<br>文档：<a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HDFSDiskbalancer.html">https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HDFSDiskbalancer.html</a></p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.disk.balancer.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p>[hadoop@warehouse001 hadoop]$ hdfs diskbalancer -plan warehouse001<br>20/11/28 22:37:01 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable<br>20/11/28 22:37:02 INFO planner.GreedyPlanner: Starting plan for Node : warehouse001:50020<br>20/11/28 22:37:02 INFO planner.GreedyPlanner: Compute Plan for Node : warehouse001:50020 took 1 ms<br>20/11/28 22:37:03 INFO command.Command: No plan generated. DiskBalancing not needed for node: warehouse001 threshold used: 10.0</p><p>hdfs diskbalancer -execute warehouse001.plan.json 执行<br>hdfs diskbalancer -query warehouse001 </p><h4 id="遇到问题的解决方式"><a href="#遇到问题的解决方式" class="headerlink" title="遇到问题的解决方式:"></a>遇到问题的解决方式:</h4><p>先自己分析,必须找到log,找到错误</p><p>百度谷歌搜素</p><p>问老师,同事,群友</p><p>apache issue</p><p>源代码导入IDEA进行debug</p><h4 id="日志的查找方法"><a href="#日志的查找方法" class="headerlink" title="日志的查找方法:"></a>日志的查找方法:</h4><p>以mysql为例:</p><p>配置文件 my.conf    data/hostname.err文件</p><p>当前目录的log文件夹</p><p>/var/log</p><p>ps -ef 查看进程描述    如:–log-error=/usr/local/mysql/data/hostname.err</p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop03之hdfs架构</title>
      <link href="2018/11/24/2020-11-25-quannnxu-hadoop3/"/>
      <url>2018/11/24/2020-11-25-quannnxu-hadoop3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-HDFS主从架构"><a href="#1-HDFS主从架构" class="headerlink" title="1.HDFS主从架构"></a>1.HDFS主从架构</h4><h5 id="namenode：nn名称节点"><a href="#namenode：nn名称节点" class="headerlink" title="namenode：nn名称节点"></a>namenode：nn名称节点</h5><p>a.文件的名称</p><p>b.文件的目录结构</p><p>c.文件的属性    权限    副本数    创建时间</p><p>[hadoop@warehouse001 ~]$ hdfs dfs -ls /<br>20/11/25 21:17:26 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable<br>Found 3 items<br>drwx——   - hadoop supergroup          0 2018-11-24 23:06 /tmp<br>drwxr-xr-x   - hadoop supergroup          0 2018-11-22 16:02 /user<br>drwxr-xr-x   - hadoop supergroup          0 2018-11-24 23:06 /wordcount</p><p>d.一个文件被对应切割那些数据块(包含副本数的块) ==&gt;对应分布在哪些datenode</p><p>blockmap 块映射  nn是不会持久化内存这种映射关系</p><p>是通过集群的启动和运行时,dn定期汇报blockreport给nn,然后再内存中动态维护这种映射关系</p><p>作用:</p><p>管理文件系统的命名空间,启示就是维护文件系统树的文件和文件夹</p><p>镜像文件    fsimage</p><p>编辑日志文件    editlogs</p><p>[hadoop@warehouse001 current]$ pwd<br>/home/hadoop/tmp/dfs/name/current</p><p>-rw-rw-r– 1 hadoop hadoop      42 Nov 26 20:06 edits_0000000000000000395-0000000000000000396<br>-rw-rw-r– 1 hadoop hadoop      42 Nov 26 21:06 edits_0000000000000000397-0000000000000000398<br>-rw-rw-r– 1 hadoop hadoop 1048576 Nov 26 21:06 edits_inprogress_0000000000000000399<br>-rw-rw-r– 1 hadoop hadoop    2599 Nov 26 20:06 fsimage_0000000000000000396<br>-rw-rw-r– 1 hadoop hadoop      62 Nov 26 20:06 fsimage_0000000000000000396.md5<br>-rw-rw-r– 1 hadoop hadoop    2599 Nov 26 21:06 fsimage_0000000000000000398<br>-rw-rw-r– 1 hadoop hadoop      62 Nov 26 21:06 fsimage_0000000000000000398.md5</p><h5 id="secondary-namenode-sn-第二名称节点"><a href="#secondary-namenode-sn-第二名称节点" class="headerlink" title="secondary namenode:sn    第二名称节点"></a>secondary namenode:sn    第二名称节点</h5><p>a.fsimage editlog文件拿过来合并  备份 推送给nn</p><p>[hadoop@warehouse001 current]$ pwd<br>/home/hadoop/tmp/dfs/namesecondary/current</p><p>-rw-rw-r– 1 hadoop hadoop      42 Nov 26 20:06 edits_0000000000000000395-0000000000000000396<br>-rw-rw-r– 1 hadoop hadoop      42 Nov 26 21:06 edits_0000000000000000397-0000000000000000398<br>-rw-rw-r– 1 hadoop hadoop    2599 Nov 26 20:06 fsimage_0000000000000000396<br>-rw-rw-r– 1 hadoop hadoop      62 Nov 26 20:06 fsimage_0000000000000000396.md5<br>-rw-rw-r– 1 hadoop hadoop    2599 Nov 26 21:06 fsimage_0000000000000000398<br>-rw-rw-r– 1 hadoop hadoop      62 Nov 26 21:06 fsimage_0000000000000000398.md5<br>-rw-rw-r– 1 hadoop hadoop     204 Nov 26 21:06 VERSION</p><p>将nn的 fsimage_0000000000000000396</p><p>edits_0000000000000000397-0000000000000000398    ==&gt;检测点动作 checkpoint合并 fsimage_0000000000000000398    将398推送给nn</p><p>而新的读写记录则在 edits_inprogress_0000000000000000399编辑日志里</p><p>dfs.namenode.checkpoint.period  3600<br>dfs.namenode.checkpoint.txns    1000000</p><p>早期为了解决nn是单点的，单点故障，增加一个snn，1小时的checkpoint<br>虽然能够减轻单点故障的带来的数据丢失风险，但是生产上不允许使用snn</p><p>11:00 checkpoint<br>11:30  数据一直在写 突然nn硬盘挂了  无法恢复<br>拿snn节点的最新的fsimage，那么只能恢复11点的数据</p><p>在生产上是不允许snn，是使用HA 高可靠，是通过配置另外一个实时的备份nn节点，<br>随时等待老大active nn 挂掉，然后成为老大</p><h5 id="datanode：-数据节点-dn"><a href="#datanode：-数据节点-dn" class="headerlink" title="datanode： 数据节点 dn"></a>datanode： 数据节点 dn</h5><p>a.存储数据块 和 数据块的校验和</p><p>[hadoop@warehouse001 subdir0]$ ll<br>-rw-rw-r– 1 hadoop hadoop     58 Nov 24 23:07 blk_1073741843<br>-rw-rw-r– 1 hadoop hadoop     11 Nov 24 23:07 blk_1073741843_1019.meta<br>-rw-rw-r– 1 hadoop hadoop    349 Nov 24 23:07 blk_1073741844<br>-rw-rw-r– 1 hadoop hadoop     11 Nov 24 23:07 blk_1073741844_1020.meta<br>-rw-rw-r– 1 hadoop hadoop  33585 Nov 24 23:07 blk_1073741845<br>-rw-rw-r– 1 hadoop hadoop    271 Nov 24 23:07 blk_1073741845_1021.meta<br>-rw-rw-r– 1 hadoop hadoop 141109 Nov 24 23:07 blk_1073741846<br>-rw-rw-r– 1 hadoop hadoop   1111 Nov 24 23:07 blk_1073741846_1022.meta<br>[hadoop@warehouse001 subdir0]$ pwd<br>/home/hadoop/tmp/dfs/data/current/BP-1844033615-172.23.75.57-1606031076865/current/finalized/subdir0/subdir0</p><p>b.每隔一定的时间去发送blockreport<br>dfs.blockreport.intervalMsec          21600000        ==&gt;6h<br>dfs.datanode.directoryscan.interval   21600         ==&gt;6h </p><p><a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml">https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml</a></p><p>补充:<a href="https://ruozedata.github.io/2019/06/06/%E7%94%9F%E4%BA%A7HDFS%20Block%E6%8D%9F%E5%9D%8F%E6%81%A2%E5%A4%8D%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5(%E5%90%AB%E6%80%9D%E8%80%83%E9%A2%98)/">https://ruozedata.github.io/2019/06/06/%E7%94%9F%E4%BA%A7HDFS%20Block%E6%8D%9F%E5%9D%8F%E6%81%A2%E5%A4%8D%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5(%E5%90%AB%E6%80%9D%E8%80%83%E9%A2%98)/</a></p><h4 id="2-HDFS写流程-面试"><a href="#2-HDFS写流程-面试" class="headerlink" title="2.HDFS写流程  面试"></a>2.HDFS写流程  面试</h4><p>对用户是无感知的</p><h5 id="2-1-HDFS-Client调用FileSystem-create-filePath-方法，去和NN进行【RPC】通信。"><a href="#2-1-HDFS-Client调用FileSystem-create-filePath-方法，去和NN进行【RPC】通信。" class="headerlink" title="2.1 HDFS Client调用FileSystem.create(filePath)方法，去和NN进行【RPC】通信。"></a>2.1 HDFS Client调用FileSystem.create(filePath)方法，去和NN进行【RPC】通信。</h5><p>NN会去check这个文件是否存在，是否有权限创建这个文件。<br>假如都可以，就创建一个新的文件，但是这时没有数据，是不关联任何block的。<br>NN根据文件的大小，根据块大小 副本数，计算要上传多少的块和对应哪些DN节点上。<br>最终这个信息返回给客户端【FSDataOutputStream】对象</p><h5 id="2-2Client-调用客户端【FSDataOutputStream】对象的write方法，"><a href="#2-2Client-调用客户端【FSDataOutputStream】对象的write方法，" class="headerlink" title="2.2Client 调用客户端【FSDataOutputStream】对象的write方法，"></a>2.2Client 调用客户端【FSDataOutputStream】对象的write方法，</h5><p>根据【副本放置策略】，将第一个块的第一个副本写到DN1，写完复制到DN2，写完再复制到DN3.<br>当第三个副本写完，就返回一个ack package确认包给DN2,DN2接收到ack 加上自己写完，<br>发送ack给DN1，DN1接收到ack加上自己写完，就发送ack给客户端【FSDataOutputStream】对象，<br>告诉它第一个块三副本写完了。<br>以此类推。</p><h5 id="2-3-当所有的块全部写完，Client调用【FSDataOutputStream】对象的close方法，"><a href="#2-3-当所有的块全部写完，Client调用【FSDataOutputStream】对象的close方法，" class="headerlink" title="2.3.当所有的块全部写完，Client调用【FSDataOutputStream】对象的close方法，"></a>2.3.当所有的块全部写完，Client调用【FSDataOutputStream】对象的close方法，</h5><p>关闭输出流。再次调用FileSystem.complete方法 ，告诉nn文件写成功。</p><p>伪分布式 1台dn，副本数参数必须设置是1吗？<br>设置2 也可以写，显示丢失一个副本</p><p>生产上分布式  3台dn，副本数参数是3，如果其中一个dn挂了，数据是否能够写入？<br>可以的 </p><p>生产上分布式  &gt;3台dn，副本数参数是3，如果其中一个dn挂了，数据是否能够写入？<br>肯定写</p><p><img src="https://i.loli.net/2020/11/26/xPDC61rl8XesfKt.png"></p><h4 id="3-HDFS读流程-面试"><a href="#3-HDFS读流程-面试" class="headerlink" title="3.HDFS读流程  面试"></a>3.HDFS读流程  面试</h4><h5 id="3-1Client调用FileSystem的open-filePath-，"><a href="#3-1Client调用FileSystem的open-filePath-，" class="headerlink" title="3.1Client调用FileSystem的open(filePath)，"></a>3.1Client调用FileSystem的open(filePath)，</h5><p>与NN进行【rpc】通信，返回该文件的部分或者全部的block列表<br>也就是返回【FSDataIntputStream】对象</p><h5 id="3-2Client调度【FSDataIntputStream】对象的read方法，"><a href="#3-2Client调度【FSDataIntputStream】对象的read方法，" class="headerlink" title="3.2Client调度【FSDataIntputStream】对象的read方法，"></a>3.2Client调度【FSDataIntputStream】对象的read方法，</h5><p>与第一个块的最近的DN的进行读取，读取完成后，会check，假如ok就关闭与DN通信。<br>假如不ok，就会记录块+DN的信息，下次就不从这个节点读取。那么从第二个节点读取。</p><p>然后与第二个块的最近的DN的进行读取，以此类推。<br>假如当block的列表全部读取完成，文件还没结束，就调用FileSystem从NN获取下一批次的block列表。</p><h5 id="3-3-Client调用【FSDataIntputStream】对象的close方法，关闭输入流。"><a href="#3-3-Client调用【FSDataIntputStream】对象的close方法，关闭输入流。" class="headerlink" title="3.3.Client调用【FSDataIntputStream】对象的close方法，关闭输入流。"></a>3.3.Client调用【FSDataIntputStream】对象的close方法，关闭输入流。</h5><p><img src="https://i.loli.net/2020/11/26/xPDC61rl8XesfKt.png"></p><h4 id="4-副本放置策略-不光光面试需要，生产也需要"><a href="#4-副本放置策略-不光光面试需要，生产也需要" class="headerlink" title="4.副本放置策略  不光光面试需要，生产也需要"></a>4.副本放置策略  不光光面试需要，生产也需要</h4><p><a href="https://www.bilibili.com/video/BV1eE411p7un">https://www.bilibili.com/video/BV1eE411p7un</a></p><p>生产上读写操作  尽量选择DN节点操作<br>第一个副本：<br>放置在上传的DN节点上，就近原则，节省IO(网络IO)<br>假如非DN节点，就随机挑选一个磁盘不太慢，cpu不太忙的节点。</p><p>第二个副本:<br>放置在第一个副本的不同机架上的某个节点</p><p>第三个副本:<br>与第二个副本放置同一个机架的不同节点上。</p><p>如果副本数设置更多，随机放。</p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop02之yarn部署及简析</title>
      <link href="2018/11/15/2020-11-22-quannnxu-hadoop2/"/>
      <url>2018/11/15/2020-11-22-quannnxu-hadoop2/</url>
      
        <content type="html"><![CDATA[<h4 id="主从架构"><a href="#主从架构" class="headerlink" title="主从架构"></a>主从架构</h4><p>ResourceManager daemon and NodeManager daemon</p><h4 id="1-yarn部署"><a href="#1-yarn部署" class="headerlink" title="1.yarn部署"></a>1.yarn部署</h4><h5 id="1-1-配置文件"><a href="#1-1-配置文件" class="headerlink" title="1.1 配置文件"></a>1.1 配置文件</h5><p>[hadoop@warehouse001hadoop]$ cp mapred-site.xml.template mapred-site.xml<br>[hadoop@warehouse001hadoop]$ vi mapred-site.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>[hadoop@warehouse001hadoop]$ vi yarn-site.xml </p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>open: <a href="http://114.67.101.143:8088/cluster%E5%AE%98%E7%BD%91">http://114.67.101.143:8088/cluster官网</a></p><p>启动:</p><p>[hadoop@warehouse001 hadoop]$ sbin/start-yarn.sh </p><p>查看进程:</p><p>[hadoop@warehouse001 hadoop]$ jps<br>12496 Jps<br>30954 ResourceManager<br>29050 NameNode<br>29179 DataNode<br>29340 SecondaryNameNode<br>31182 NodeManager</p><h4 id="2-案例"><a href="#2-案例" class="headerlink" title="2.案例"></a>2.案例</h4><p>wordcount</p><pre class=" language-linux"><code class="language-linux">#配置环境变量[hadoop@warehouse001 hadoop]$ cd [hadoop@warehouse001 ~]$ which hadoop/usr/bin/which: no hadoop in (/usr/java/jdk1.8.0_181/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/hadoop/.local/bin:/home/hadoop/bin)[hadoop@warehouse001 ~]$ vi .bashrc # .bashrc# Source global definitionsif [ -f /etc/bashrc ]; then        . /etc/bashrcfi# Uncomment the following line if you don't like systemctl's auto-paging feature:# export SYSTEMD_PAGER=export HADOOP_HOME=/home/hadoop/app/hadoopexport PATH=$&#123;HADOOP_HOME&#125;/bin:$&#123;HADOOP_HOME&#125;/sbin:$PATH# User specific aliases and functions[hadoop@warehouse001 ~]$ source .bashrc [hadoop@warehouse001 ~]$ which hadoop~/app/hadoop/bin/hadoop#造数据[hadoop@warehouse001 ~]$ cd data/[hadoop@warehouse001 data]$ mkdir input[hadoop@warehouse001 data]$ cd input/[hadoop@warehouse001 input]$ vi 1.loga b cwww.quanxu.comxiaominglihua1112a bc#上传hdfs[hadoop@warehouse001 input]$ hdfs dfs -ls /20/11/24 22:42:09 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicableFound 1 itemsdrwxr-xr-x   - hadoop supergroup          0 2018-11-22 16:02 /user[hadoop@warehouse001 input]$ hdfs dfs -mkdir -p /wordcount/input20/11/24 22:43:27 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable[hadoop@warehouse001 input]$ hdfs dfs -ls /20/11/24 22:43:40 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicableFound 2 itemsdrwxr-xr-x   - hadoop supergroup          0 2018-11-22 16:02 /userdrwxr-xr-x   - hadoop supergroup          0 2018-11-24 22:43 /wordcountdrwxr-xr-x   - hadoop supergroup          0 2018-11-24 22:43 /wordcount/input[hadoop@warehouse001 input]$ hdfs dfs -put 1.log /wordcount/input20/11/24 22:45:52 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable[hadoop@warehouse001 hadoop]$ cd src/[hadoop@warehouse001 src]$ lltotal 200drwxr-xr-x  2 hadoop hadoop  4096 Jun  3  2018 build-rw-r--r--  1 hadoop hadoop 12096 Jun  3  2018 BUILDING.txtdrwxr-xr-x  3 hadoop hadoop  4096 Jun  3  2018 dev-supportdrwxr-xr-x  3 hadoop hadoop  4096 Jun  3  2018 hadoop-assembliesdrwxr-xr-x  2 hadoop hadoop  4096 Jun  3  2018 hadoop-build-toolsdrwxr-xr-x  2 hadoop hadoop  4096 Jun  3  2018 hadoop-clientdrwxr-xr-x 10 hadoop hadoop  4096 Jun  3  2018 hadoop-common-projectdrwxr-xr-x  2 hadoop hadoop  4096 Jun  3  2018 hadoop-distdrwxr-xr-x  6 hadoop hadoop  4096 Jun  3  2018 hadoop-hdfs-projectdrwxr-xr-x 10 hadoop hadoop  4096 Jun  3  2018 hadoop-mapreduce1-projectdrwxr-xr-x  9 hadoop hadoop  4096 Jun  3  2018 hadoop-mapreduce-projectdrwxr-xr-x  3 hadoop hadoop  4096 Jun  3  2018 hadoop-maven-pluginsdrwxr-xr-x  2 hadoop hadoop  4096 Jun  3  2018 hadoop-miniclusterdrwxr-xr-x  3 hadoop hadoop  4096 Jun  3  2018 hadoop-projectdrwxr-xr-x  2 hadoop hadoop  4096 Jun  3  2018 hadoop-project-distdrwxr-xr-x 18 hadoop hadoop  4096 Jun  3  2018 hadoop-toolsdrwxr-xr-x  3 hadoop hadoop  4096 Jun  3  2018 hadoop-yarn-project-rw-r--r--  1 hadoop hadoop 85063 Jun  3  2018 LICENSE.txt-rw-r--r--  1 hadoop hadoop 14978 Jun  3  2018 NOTICE.txt-rw-r--r--  1 hadoop hadoop 19039 Jun  3  2018 pom.xml-rw-r--r--  1 hadoop hadoop  1366 Jun  3  2018 README.txt[hadoop@warehouse001 src]$ cd hadoop-mapreduce-projecthadoop@warehouse001 src]$ cd hadoop-mapreduce-project[hadoop@warehouse001 hadoop-mapreduce-project]$ lltotal 328drwxr-xr-x  2 hadoop hadoop   4096 Jun  3  2018 bin-rw-r--r--  1 hadoop hadoop   2018 Jun  3  2018 CHANGES.MAPREDUCE-2841.txt-rw-r--r--  1 hadoop hadoop 293811 Jun  3  2018 CHANGES.txtdrwxr-xr-x  2 hadoop hadoop   4096 Jun  3  2018 confdrwxr-xr-x  2 hadoop hadoop   4096 Jun  3  2018 dev-supportdrwxr-xr-x 10 hadoop hadoop   4096 Jun  3  2018 hadoop-mapreduce-clientdrwxr-xr-x  4 hadoop hadoop   4096 Jun  3  2018 hadoop-mapreduce-examplesdrwxr-xr-x  3 hadoop hadoop   4096 Jun  3  2018 lib-rw-r--r--  1 hadoop hadoop  11091 Jun  3  2018 pom.xml[hadoop@warehouse001 hadoop-mapreduce-project]$ cd hadoop-mapreduce-examples[hadoop@warehouse001 hadoop-mapreduce-examples]$ lltotal 16drwxr-xr-x 2 hadoop hadoop 4096 Jun  3  2018 dev-support-rw-r--r-- 1 hadoop hadoop 5097 Jun  3  2018 pom.xmldrwxr-xr-x 4 hadoop hadoop 4096 Jun  3  2018 src[hadoop@warehouse001 hadoop-mapreduce-examples]$ cd src[hadoop@warehouse001 src]$ cd main[hadoop@warehouse001 main]$ cd java/[hadoop@warehouse001 java]$ lltotal 4drwxr-xr-x 3 hadoop hadoop 4096 Jun  3  2018 org[hadoop@warehouse001 java]$ cd org/[hadoop@warehouse001 org]$ lltotal 4drwxr-xr-x 3 hadoop hadoop 4096 Jun  3  2018 apache[hadoop@warehouse001 org]$ cd apache/[hadoop@warehouse001 apache]$ lltotal 4drwxr-xr-x 3 hadoop hadoop 4096 Jun  3  2018 hadoop[hadoop@warehouse001 apache]$ cd hadoop/[hadoop@warehouse001 hadoop]$ lltotal 4drwxr-xr-x 5 hadoop hadoop 4096 Jun  3  2018 examples[hadoop@warehouse001 hadoop]$ cd examples/[hadoop@warehouse001 examples]$ lltotal 204-rw-r--r-- 1 hadoop hadoop  2897 Jun  3  2018 AggregateWordCount.java-rw-r--r-- 1 hadoop hadoop  3016 Jun  3  2018 AggregateWordHistogram.java-rw-r--r-- 1 hadoop hadoop 21254 Jun  3  2018 BaileyBorweinPlouffe.javadrwxr-xr-x 2 hadoop hadoop  4096 Jun  3  2018 dancing-rw-r--r-- 1 hadoop hadoop 13495 Jun  3  2018 DBCountPageView.java-rw-r--r-- 1 hadoop hadoop  4301 Jun  3  2018 ExampleDriver.java-rw-r--r-- 1 hadoop hadoop  3730 Jun  3  2018 Grep.java-rw-r--r-- 1 hadoop hadoop  7033 Jun  3  2018 Join.java-rw-r--r-- 1 hadoop hadoop  8111 Jun  3  2018 MultiFileWordCount.java-rw-r--r-- 1 hadoop hadoop   853 Jun  3  2018 package.htmldrwxr-xr-x 3 hadoop hadoop  4096 Jun  3  2018 pi-rw-r--r-- 1 hadoop hadoop 12628 Jun  3  2018 QuasiMonteCarlo.java-rw-r--r-- 1 hadoop hadoop 40575 Jun  3  2018 RandomTextWriter.java-rw-r--r-- 1 hadoop hadoop 10573 Jun  3  2018 RandomWriter.java-rw-r--r-- 1 hadoop hadoop  7809 Jun  3  2018 SecondarySort.java-rw-r--r-- 1 hadoop hadoop  8167 Jun  3  2018 Sort.javadrwxr-xr-x 3 hadoop hadoop  4096 Jun  3  2018 terasort-rw-r--r-- 1 hadoop hadoop  3297 Jun  3  2018 WordCount.java-rw-r--r-- 1 hadoop hadoop  6327 Jun  3  2018 WordMean.java-rw-r--r-- 1 hadoop hadoop  7084 Jun  3  2018 WordMedian.java-rw-r--r-- 1 hadoop hadoop  7253 Jun  3  2018 WordStandardDeviation.java#下载到本地[hadoop@warehouse001 examples]$ sz WordCount.javarz?a? zmodem ′???￡  °′ Ctrl+C ???￡Transferring WordCount.java...  100%       3 KB    3 KB/s 00:00:01       0 Errors[hadoop@warehouse001 hadoop]$ find ./ -name *example*.jar./share/hadoop/mapreduce1/hadoop-examples-2.6.0-mr1-cdh5.16.2.jar./share/hadoop/mapreduce2/hadoop-mapreduce-examples-2.6.0-cdh5.16.2.jar./share/hadoop/mapreduce2/sources/hadoop-mapreduce-examples-2.6.0-cdh5.16.2-test-sources.jar./share/hadoop/mapreduce2/sources/hadoop-mapreduce-examples-2.6.0-cdh5.16.2-sources.jarhadoop jar \./share/hadoop/mapreduce2/hadoop-mapreduce-examples-2.6.0-cdh5.16.2.jar \wordcount /wordcount/input /wordcount/output1 [hadoop@warehouse001 hadoop]$ hadoop jar \> ./share/hadoop/mapreduce2/hadoop-mapreduce-examples-2.6.0-cdh5.16.2.jar \> wordcount /wordcount/input /wordcount/output1 20/11/24 23:06:50 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable20/11/24 23:06:51 INFO client.RMProxy: Connecting to ResourceManager at /0.0.0.0:803220/11/24 23:06:52 INFO input.FileInputFormat: Total input paths to process : 120/11/24 23:06:52 INFO mapreduce.JobSubmitter: number of splits:1【了解split切分的规则】20/11/24 23:06:53 INFO mapreduce.JobSubmitter: Submitting tokens for job: job_1606044808202_000120/11/24 23:06:53 INFO impl.YarnClientImpl: Submitted application application_1606044808202_0001【分配的作业id号，web界面会显示】20/11/24 23:06:53 INFO mapreduce.Job: The url to track the job: http://warehouse001:8088/proxy/application_1606044808202_0001/20/11/24 23:06:53 INFO mapreduce.Job: Running job: job_1606044808202_000120/11/24 23:06:58 INFO mapreduce.Job: Job job_1606044808202_0001 running in uber mode : false【了解uber mode】20/11/24 23:06:58 INFO mapreduce.Job:  map 0% reduce 0%20/11/24 23:07:02 INFO mapreduce.Job:  map 100% reduce 0%20/11/24 23:07:07 INFO mapreduce.Job:  map 100% reduce 100%20/11/24 23:07:08 INFO mapreduce.Job: Job job_1606044808202_0001 completed successfully20/11/24 23:07:08 INFO mapreduce.Job: Counters: 49        File System Counters                FILE: Number of bytes read=96                FILE: Number of bytes written=286259                FILE: Number of read operations=0                FILE: Number of large read operations=0                FILE: Number of write operations=0                HDFS: Number of bytes read=160                HDFS: Number of bytes written=58                HDFS: Number of read operations=6                HDFS: Number of large read operations=0                HDFS: Number of write operations=2        Job Counters                 Launched map tasks=1                Launched reduce tasks=1【了解map、reduce个数的规则】                Data-local map tasks=1                Total time spent by all maps in occupied slots (ms)=1783                Total time spent by all reduces in occupied slots (ms)=1958                Total time spent by all map tasks (ms)=1783                Total time spent by all reduce tasks (ms)=1958                Total vcore-milliseconds taken by all map tasks=1783                Total vcore-milliseconds taken by all reduce tasks=1958                Total megabyte-milliseconds taken by all map tasks=1825792                Total megabyte-milliseconds taken by all reduce tasks=2004992        Map-Reduce Framework                Map input records=8                Map output records=11                Map output bytes=92                Map output materialized bytes=96                Input split bytes=111                Combine input records=11                Combine output records=8                Reduce input groups=8                Reduce shuffle bytes=96                Reduce input records=8                Reduce output records=8                Spilled Records=16                Shuffled Maps =1                Failed Shuffles=0                Merged Map outputs=1                GC time elapsed (ms)=89                CPU time spent (ms)=860                Physical memory (bytes) snapshot=489730048                Virtual memory (bytes) snapshot=5554565120                Total committed heap usage (bytes)=466092032        Shuffle Errors                BAD_ID=0                CONNECTION=0                IO_ERROR=0                WRONG_LENGTH=0                WRONG_MAP=0                WRONG_REDUCE=0        File Input Format Counters                 Bytes Read=49        File Output Format Counters                 Bytes Written=58</code></pre><p><img src="https://i.loli.net/2020/11/24/7s82mHTuvPDLntV.png"></p><p>如报错可进入history查看日志</p><h4 id="3-关于挖矿"><a href="#3-关于挖矿" class="headerlink" title="3.关于挖矿"></a>3.关于挖矿</h4><p><a href="https://segmentfault.com/a/1190000015264170">https://segmentfault.com/a/1190000015264170</a></p><p>[hadoop@warehouse001 hadoop]$ top</p><p>top - 23:20:34 up 8 days,  5:42,  1 user,  load average: 0.00, 0.01, 0.05<br>Tasks:  84 total,   1 running,  83 sleeping,   0 stopped,   0 zombie<br>%Cpu(s):  0.2 us,  0.2 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st<br>KiB Mem :  7734044 total,  2442532 free,  2900996 used,  2390516 buff/cache<br>KiB Swap:        0 total,        0 free,        0 used.  4533612 avail Mem </p><p>  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND<br> 5931 root      20   0   42156   5532   2704 S   0.3  0.1   0:50.91 aliyun-service<br>29340 hadoop    20   0 2798988 248088  19424 S   0.3  3.2   1:12.20 java          </p><p>cpu过高，杀掉进程后，过段时间挖矿进程会重启</p><p>所以需要调整8088端口</p><p>在yarn-site.xml 新增:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>yarn.resourcemanager.hostname<span class="token entity" title="&#125;">&amp;#125;</span>:7776<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p>#重启</p><p>[hadoop@warehouse001 hadoop]$ sbin/stop-yarn.sh </p><p>[hadoop@warehouse001 hadoop]$ sbin/start-yarn.sh</p><p><img src="https://i.loli.net/2020/11/24/uaGfhgHEne2SVLB.png"></p><h4 id="4-jps命令"><a href="#4-jps命令" class="headerlink" title="4.jps命令"></a>4.jps命令</h4><h5 id="4-1-位置"><a href="#4-1-位置" class="headerlink" title="4.1 位置"></a>4.1 位置</h5><p>[hadoop@ruozedata001 hadoop]$ which jps<br>/usr/java/jdk1.8.0_181/bin/jps<br>[hadoop@ruozedata001 hadoop]$ </p><h5 id="4-2-使用"><a href="#4-2-使用" class="headerlink" title="4.2 使用"></a>4.2 使用</h5><p>[hadoop@ruozedata001 hadoop]$ jps<br>21828 NameNode<br>21959 DataNode<br>27577 NodeManager<br>27466 ResourceManager<br>22124 SecondaryNameNode</p><h5 id="4-3-对应的标识文件存储在哪里"><a href="#4-3-对应的标识文件存储在哪里" class="headerlink" title="4.3 对应的标识文件存储在哪里"></a>4.3 对应的标识文件存储在哪里</h5><p>[hadoop@warehouse001 hsperfdata_hadoop]$ ll<br>total 160<br>-rw——- 1 hadoop hadoop 32768 Nov 24 23:36 13863<br>-rw——- 1 hadoop hadoop 32768 Nov 24 23:36 14136<br>-rw——- 1 hadoop hadoop 32768 Nov 24 23:36 29050<br>-rw——- 1 hadoop hadoop 32768 Nov 24 23:36 29179<br>-rw——- 1 hadoop hadoop 32768 Nov 24 23:36 29340<br>[hadoop@warehouse001 hsperfdata_hadoop]$ pwd<br>/tmp/hsperfdata_hadoop</p><h5 id="4-4-哪个用户可以查看"><a href="#4-4-哪个用户可以查看" class="headerlink" title="4.4 哪个用户可以查看"></a>4.4 哪个用户可以查看</h5><p>[root@warehouse001 ~]# jps<br>14389 Jps<br>13863 ResourceManager<br>14136 NodeManager<br>29050 NameNode<br>29179 DataNode<br>29340 SecondaryNameNode</p><p>root和当前用户</p><h5 id="4-5-出现process-information-unavailable描述"><a href="#4-5-出现process-information-unavailable描述" class="headerlink" title="4.5 出现process information unavailable描述"></a>4.5 出现process information unavailable描述</h5><p>当看见 process information unavailable<br>不能代表进程是存在 或者不存在，要当心，尤其使用jps命令来做脚本状态检测的<br>一般使用经典的 ps -ef | grep xxx命令去查看进程是否存在，<br>这才是真正的状态检测</p><p>但是: 比如spark thriftserver +hive 会启动一个driver 进程 110，<br>默认端口号 10001。由于该程序的内存泄露或者某种bug，导致<br>进程ps是存在的，10001端口号下线了，就不能够对外提供服务。</p><p>总结: 未来做任何程序的状态检测，必须通过端口号来。</p><p>CDH root用户，jps命令查看会有很多的 process information unavailable<br>ps -ef| grep xxx 查看是正确的<br>那么想要看到正常的表述，需要切换对应的用户，<br>比如su - hdfs(有可能你切换不过去，需要/etc/passwd文件的修正)<br>再执行jps命令</p><h5 id="4-6-删除之后是否影响服务重启呢"><a href="#4-6-删除之后是否影响服务重启呢" class="headerlink" title="4.6 删除之后是否影响服务重启呢"></a>4.6 删除之后是否影响服务重启呢</h5><p>经过测试验证，不影响重启</p><h4 id="5-pid文件"><a href="#5-pid文件" class="headerlink" title="5.pid文件"></a>5.pid文件</h4><h5 id="5-1-pid文件的位置"><a href="#5-1-pid文件的位置" class="headerlink" title="5.1 pid文件的位置"></a>5.1 pid文件的位置</h5><p>/tmp </p><p>[hadoop@warehouse001 tmp]$ ll</p><p>-rw-rw-r– 1 hadoop hadoop        6 Nov 22 15:59 hadoop-hadoop-datanode.pid</p><p>[hadoop@warehouse001 sbin]$ pwd<br>/home/hadoop/app/hadoop/sbin</p><p>停止进程脚本:</p><p>hadoop-daemon.sh</p><pre class=" language-shell"><code class="language-shell">    if [ -f $pid ]; then      TARGET_PID=`cat $pid`      if kill -0 $TARGET_PID > /dev/null 2>&1; then        echo stopping $command        kill $TARGET_PID        sleep $HADOOP_STOP_TIMEOUT        if kill -0 $TARGET_PID > /dev/null 2>&1; then          echo "$command did not stop gracefully after $HADOOP_STOP_TIMEOUT seconds: killing with kill -9"          kill -9 $TARGET_PID        fi      else        echo no $command to stop      fi      rm -f $pid    else      echo no $command to stop    fi    ;;  (*)    echo $usage    exit 1    ;;</code></pre><h5 id="5-2-删除之后是否影响服务重启呢"><a href="#5-2-删除之后是否影响服务重启呢" class="headerlink" title="5.2 删除之后是否影响服务重启呢"></a>5.2 删除之后是否影响服务重启呢</h5><p>经过测试验证，影响重启</p><h5 id="5-3-如何修改位置"><a href="#5-3-如何修改位置" class="headerlink" title="5.3 如何修改位置"></a>5.3 如何修改位置</h5><p>[hadoop@ruozedata001 hadoop]$ vi hadoop-env.sh<br>export HADOOP_PID_DIR=/home/hadoop/tmp</p><p>[hadoop@warehouse001 tmp]$ jps<br>17667 NameNode<br>17798 DataNode<br>17963 SecondaryNameNode<br>18077 Jps<br>[hadoop@warehouse001 tmp]$ cat hadoop-hadoop-datanode.pid<br>17798</p><h4 id="6-块-block"><a href="#6-块-block" class="headerlink" title="6.块 block"></a>6.块 block</h4><p>dfs.blocksize   128M<br>大文件  小文件</p><p>一缸水 260ml<br>瓶子的规格 128ml   ==》   dfs.blocksize<br>260/128=2 ….4ml<br>1 128ml<br>2 128ml<br>3 4ml</p><p>一个大文件 260m<br>1 128m<br>2 128m<br>3 4m    –只占用4m不会占用128m</p><p>存储到伪分布式hdfs上是                     3个块                   实际存储260m x 1=260m<br>      集群hdfs上&gt;=3节点  多副本机制3<br>      一个块会被连他自己 复制是3份    3x3= 9个块          实际存储260m x 3=780m</p><p>10个小文件 每个小文件 10m，那么伪分布式：<br>10个块 </p><p>namenode：维护一个文件被切割哪个块，这些块被存放到哪些机器</p><p>10条元数据</p><p>10个小文件 合并 1个文件100m,     那么伪分布式：<br>1个块</p><p>1条元数据</p><p>10个小文件10m VS 1个大文件100m<br>结果： 1个大文件对 nn的存储压力较小</p><p>再举例:<br>假设1亿个小文件，每个小文件10kb, 集群3副本机制，3亿个block，3亿个元数据<br>假如1亿个小文件，合并为1kw个 100m文件 , 集群3副本机制，3kw block，3kw元数据 </p><p>nn维护 3亿个元数据 还是 3kw元数据 的压力，谁轻松？<br>3kw轻松</p><p>元数据是存储在nn进程的内存里 ，那内存是一定的 8g</p><p>所以生产上:<br>尽量规避小文件在hdfs上的存储<br>a.数据传输到hdfs之前，提前合并<br>b.数据已经到hdfs，就定时的  业务低谷期，去合并冷文件<br>          写个脚本 每一天合并<br>          11-1 合并09-30数据<br>          11-2 合并10-1数据</p><p>​          一天卡一天去处理 </p><p>关于split切分的规则</p><p><a href="https://blog.csdn.net/jinywum/article/details/81458359">https://blog.csdn.net/jinywum/article/details/81458359</a></p><p>map、reduce任务个数的规则</p><p><a href="https://blog.csdn.net/zhanglh046/article/details/78567105">https://blog.csdn.net/zhanglh046/article/details/78567105</a></p><p>什么是uber模式</p><p>Uber模式简单地可以理解成JVM重用，该模式是2.x开始引入的；以Uber模式运行MR作业，所有的Map Tasks和Reduce Tasks将会在ApplicationMaster所在的容器（container）中运行，也就是说整个MR作业运行的过程只会启动AM container，因为不需要启动mapper 和 reducer containers，所以AM不需要和远程containers通信，整个过程简单了。</p><p>不是所有的MR作业都可以启用Uber模式，如果我们的MR作业输入的数据量非常小，启动Map container或Reduce container的时间都比处理数据要长，那么这个作业就可以考虑启用Uber模式运行，一般情况下，对小作业启用Uber模式运行会得到2x-3x的性能提升。</p><p>启用uber模式的要求非常严格，代码如下：</p><p>isUber = uberEnabled &amp;&amp; smallNumMapTasks &amp;&amp; smallNumReduceTasks &amp;&amp; smallInput &amp;&amp; smallMemory &amp;&amp; smallCpu &amp;&amp; notChainJob &amp;&amp; isValidUberMaxReduces;</p><ul><li><strong>uberEnabled</strong>：其实就是 mapreduce.job.ubertask.enable 参数的值，默认情况下为 false ；也就是说默认情况不启用Uber模式；</li><li><strong>smallNumMapTasks</strong>：启用Uber模式的作业Map的个数必须小于等于 mapreduce.job.ubertask.maxmaps 参数的值，该值默认为9；也计算说，在默认情况下，如果你想启用Uber模式，作业的Map个数必须小于10；</li><li><strong>smallNumReduceTasks</strong>：同理，Uber模式的作业Reduce的个数必须小于等于mapreduce.job.ubertask.maxreduces，该值默认为1；也计算说，在默认情况下，如果你想启用Uber模式，作业的Reduce个数必须小于等于1；</li><li><strong>smallInput</strong>：不是任何作业都适合启用Uber模式的，输入数据的大小必须小于等于 mapreduce.job.ubertask.maxbytes 参数的值，默认情况是HDFS一个文件块大小；</li><li><strong>smallMemory</strong>：因为作业是在AM所在的container中运行，所以要求我们设置的Map内存（mapreduce.map.memory.mb）和Reduce内存（mapreduce.reduce.memory.mb）必须小于等于 AM所在容器内存大小设置（yarn.app.mapreduce.am.resource.mb）；</li><li><strong>smallCpu</strong>：同理，Map配置的vcores（mapreduce.map.cpu.vcores）个数和 Reduce配置的vcores（mapreduce.reduce.cpu.vcores）个数也必须小于等于AM所在容器vcores个数的设置（yarn.app.mapreduce.am.resource.cpu-vcores）；</li><li><strong>notChainJob</strong>：此外，处理数据的Map class（mapreduce.job.map.class）和Reduce class（mapreduce.job.reduce.class）必须不是 ChainMapper 或 ChainReducer 才行；</li><li><strong>isValidUberMaxReduces</strong>：目前仅当Reduce的个数小于等于1的作业才能启用Uber模式。</li></ul><p>同时满足上面八个条件才能在作业运行的时候启动Uber模式。下面是一个启用Uber模式运行的作业运行成功的日志：</p><p>File System Counters FILE: Number of bytes read=215 FILE: Number of bytes written=505 FILE: Number of read operations=0 FILE: Number of large read operations=0 FILE: Number of write operations=0 HDFS: Number of bytes read=1200 HDFS: Number of bytes written=274907 HDFS: Number of read operations=57 HDFS: Number of large read operations=0 HDFS: Number of write operations=11 Job Counters Launched map tasks=2 Launched reduce tasks=1 Other local map tasks=2 Total time spent by all maps in occupied slots (ms)=3664 Total time spent by all reduces in occupied slots (ms)=2492 TOTAL_LAUNCHED_UBERTASKS=3 NUM_UBER_SUBMAPS=2 NUM_UBER_SUBREDUCES=1 Map-Reduce Framework Map input records=2 Map output records=8 Map output bytes=82 Map output materialized bytes=85 Input split bytes=202 Combine input records=8 Combine output records=6 Reduce input groups=5 Reduce shuffle bytes=0 Reduce input records=6 Reduce output records=5 Spilled Records=12 Shuffled Maps =0 Failed Shuffles=0 Merged Map outputs=0 GC time elapsed (ms)=65 CPU time spent (ms)=1610 Physical memory (bytes) snapshot=1229729792 Virtual memory (bytes) snapshot=5839392768 Total committed heap usage (bytes)=3087532032 File Input Format Counters Bytes Read=50 File Output Format Counters Bytes Written=41</p><p>细心的同学应该会发现里面多了 TOTAL_LAUNCHED_UBERTASKS、NUM_UBER_SUBMAPS 以及 NUM_UBER_SUBREDUCES 信息，以前需要启用Map Task 或 Reduce Task运行的工作直接在AM中运行，所有出现了NUM_UBER_SUBMAPS和原来Map Task个数一样；同理，NUM_UBER_SUBREDUCES 和Reduce Task个数一样。</p><p>作业:</p><p>1.作业输出的内容</p><p>2.拓展 hdfs小文件如何合并</p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop01之安装部署</title>
      <link href="2018/11/10/2020-11-21-quannnxu-hadoop1/"/>
      <url>2018/11/10/2020-11-21-quannnxu-hadoop1/</url>
      
        <content type="html"><![CDATA[<h4 id="1-谈谈大数据"><a href="#1-谈谈大数据" class="headerlink" title="1.谈谈大数据"></a>1.谈谈大数据</h4><p>存储                      hdfs  hive  hbase  kudu<br>计算                      SQL 数据处理 、scala/java、spark、flink<br>资源和计算作业的调度分配  yarn</p><h4 id="2-hadoop官网"><a href="#2-hadoop官网" class="headerlink" title="2.hadoop官网"></a>2.hadoop官网</h4><p><a href="https://hadoop.apache.org/">https://hadoop.apache.org</a></p><p>hive.apache.org</p><h4 id="3-hadoop版本选择"><a href="#3-hadoop版本选择" class="headerlink" title="3.hadoop版本选择"></a>3.hadoop版本选择</h4><p>hadoop2.x    hadoop3.x</p><h4 id="4-hadoop认知"><a href="#4-hadoop认知" class="headerlink" title="4.hadoop认知"></a>4.hadoop认知</h4><p>广义: 以apache hadoop软件为主的生态圈 包含hive sqoop hbase kafka spark flink<br>狭义: apache hadoop软件<br>        hdfs          存储<br>        mapreduce     计算<br>        yarn          资源作业的分配调度</p><p>大数据平台： 存储是第一位；存储和计算是相辅相成的</p><h4 id="5-部署前准备"><a href="#5-部署前准备" class="headerlink" title="5.部署前准备"></a>5.部署前准备</h4><p>创建用户<br>useradd hadoop<br>su - hadoop<br>mkdir sourcecode software app log lib data tmp shell</p><p>cd software/</p><p>rz上传tar包</p><p>[hadoop@warehouse001 software]$ ll<br>total 424180<br>-rw-r–r– 1 root root 434354462 Nov 22 09:42 hadoop-2.6.0-cdh5.16.2.tar.gz</p><h4 id="6-jdk部署"><a href="#6-jdk部署" class="headerlink" title="6.jdk部署"></a>6.jdk部署</h4><p>[hadoop@warehouse001 software]$ which java<br>/usr/java/jdk1.8.0_181/bin/java</p><h4 id="7-hdfs安装"><a href="#7-hdfs安装" class="headerlink" title="7.hdfs安装"></a>7.hdfs安装</h4><h5 id="7-1解压"><a href="#7-1解压" class="headerlink" title="7.1解压"></a>7.1解压</h5><p>[hadoop@warehouse001 ~]$ cd software/<br>[hadoop@warehouse001 software]$ tar -xzvf hadoop-2.6.0-cdh5.16.2.tar.gz -C ../app/</p><h5 id="7-2软连接"><a href="#7-2软连接" class="headerlink" title="7.2软连接"></a>7.2软连接</h5><p>[hadoop@warehouse001 ~]$ cd app/<br>[hadoop@warehouse001 app]$ ll<br>total 4<br>drwxr-xr-x 14 hadoop hadoop 4096 Jun  3  2018 hadoop-2.6.0-cdh5.16.2<br>[hadoop@warehouse001 app]$ ln -s hadoop-2.6.0-cdh5.16.2  hadoop<br>[hadoop@warehouse001 app]$ ll<br>total 4<br>lrwxrwxrwx  1 hadoop hadoop   22 Nov 22 09:44 hadoop -&gt; hadoop-2.6.0-cdh5.16.2<br>drwxr-xr-x 14 hadoop hadoop 4096 Jun  3  2018 hadoop-2.6.0-cdh5.16.2<br>【补充】软连接：<br>    a.版本切换，脚本应用是配置的hadoop，是无感知的 </p><p>b.小盘换大盘<br>    /       系统盘  100G  /ruozedata 80G<br>    /data01 数据盘  2T</p><p>​    ll /             看一下ruozedata文件夹权限<br>​    ll /ruozedata    看一下ruozedata文件夹内容的权限<br>​    mv      /ruozedata /data01/ruozedata<br>​    ln -s   /data01/ruozedata  /ruozedata</p><p>注意的是：<br>权限 rwx  用户用户组</p><h5 id="7-3-解读目录只关注-bin-sbin-etc"><a href="#7-3-解读目录只关注-bin-sbin-etc" class="headerlink" title="7.3 解读目录只关注 bin  sbin  etc"></a>7.3 解读目录只关注 bin  sbin  etc</h5><p>[hadoop@warehouse001 app]$ cd hadoop<br>[hadoop@warehouse001 hadoop]$ ll<br>total 152<br>drwxr-xr-x  2 hadoop hadoop  4096 Jun  3  2018 bin        可执行命令<br>drwxr-xr-x  2 hadoop hadoop  4096 Jun  3  2018 bin-mapreduce1<br>drwxr-xr-x  3 hadoop hadoop  4096 Jun  3  2018 cloudera<br>drwxr-xr-x  6 hadoop hadoop  4096 Jun  3  2018 etc        配置文件<br>drwxr-xr-x  5 hadoop hadoop  4096 Jun  3  2018 examples<br>drwxr-xr-x  3 hadoop hadoop  4096 Jun  3  2018 examples-mapreduce1<br>drwxr-xr-x  2 hadoop hadoop  4096 Jun  3  2018 include<br>drwxr-xr-x  3 hadoop hadoop  4096 Jun  3  2018 lib<br>drwxr-xr-x  3 hadoop hadoop  4096 Jun  3  2018 libexec<br>-rw-r–r–  1 hadoop hadoop 85063 Jun  3  2018 LICENSE.txt<br>-rw-r–r–  1 hadoop hadoop 14978 Jun  3  2018 NOTICE.txt<br>-rw-r–r–  1 hadoop hadoop  1366 Jun  3  2018 README.txt<br>drwxr-xr-x  3 hadoop hadoop  4096 Jun  3  2018 sbin        启动停止脚本<br>drwxr-xr-x  4 hadoop hadoop  4096 Jun  3  2018 share<br>drwxr-xr-x 18 hadoop hadoop  4096 Jun  3  2018 src</p><h5 id="7-4部署模式"><a href="#7-4部署模式" class="headerlink" title="7.4部署模式"></a>7.4部署模式</h5><p>Local (Standalone) Mode  本地      1台机器  1个单独的java进程 用于debug<br>Pseudo-Distributed Mode  伪分布式  1台机器  多个java进程<br>Fully-Distributed Mode   集群      多台机器 多个java进程 </p><h5 id="7-5修改hadoop-env-sh文件，显性java家目录"><a href="#7-5修改hadoop-env-sh文件，显性java家目录" class="headerlink" title="7.5修改hadoop-env.sh文件，显性java家目录"></a>7.5修改hadoop-env.sh文件，显性java家目录</h5><p>export JAVA_HOME=/usr/java/jdk1.8.0_181</p><h5 id="7-6配置hadoop用户的ssh信任关系"><a href="#7-6配置hadoop用户的ssh信任关系" class="headerlink" title="7.6配置hadoop用户的ssh信任关系"></a>7.6配置hadoop用户的ssh信任关系</h5><p>删除已存在的.ssh，建议生产上mv移走重命名</p><p>[hadoop@warehouse001 ~]$ ssh-keygen<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/home/hadoop/.ssh/id_rsa):<br>Created directory ‘/home/hadoop/.ssh’.<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /home/hadoop/.ssh/id_rsa.<br>Your public key has been saved in /home/hadoop/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>SHA256:dBcBU5BHmP5ZqYc1cy8Bsd1bcHJbgQJ18aESVXW2bUs hadoop@warehouse001<br>The key’s randomart image is:<br>+—[RSA 2048]—-+<br>|         .*@B**+X|<br>|          +o==oBB|<br>|        …o+o.E=|<br>|       . …. O.=|<br>|        S  . * B.|<br>|            = o .|<br>|             . . |<br>|                 |<br>|                 |<br>+—-[SHA256]—–+<br>[hadoop@warehouse001 ~]$<br>[hadoop@warehouse001 ~]$ cd .ssh<br>[hadoop@warehouse001 .ssh]$ ll<br>total 8<br>-rw——- 1 hadoop hadoop 1679 Nov 22 10:29 id_rsa<br>-rw-r–r– 1 hadoop hadoop  401 Nov 22 10:29 id_rsa.pub<br>[hadoop@warehouse001 .ssh]$ cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys<br>[hadoop@warehouse001 .ssh]$ chmod 0600 ~/.ssh/authorized_keys</p><p>验证ssh,第一次必须输入yes建立关系,无需输入密码即可打印日期</p><p>[hadoop@warehouse001 .ssh]$ ssh hadoop@warehouse001 date<br>The authenticity of host ‘warehouse001 (172.23.75.57)’ can’t be established.<br>ECDSA key fingerprint is SHA256:XliTXyWZCOu2gk6FPXdhy4QOtYyTzmmKx6UdMuQ1LpY.<br>ECDSA key fingerprint is MD5:3e:e7:27:d3:95:28:f2:dd:b5:71:df:93:c9:83:b6:f3.<br>Are you sure you want to continue connecting (yes/no)? yes<br>Warning: Permanently added ‘warehouse001,172.23.75.57’ (ECDSA) to the list of known hosts.<br>Sun Nov 22 10:31:25 CST 2018</p><p>第二次直接打印</p><p>[hadoop@warehouse001 .ssh]$ ssh hadoop@warehouse001 date<br>Sun Nov 22 10:33:23 CST 2018<br>[hadoop@warehouse001 .ssh]$ </p><h5 id="7-7-配置namenode进程以warehouse001启动"><a href="#7-7-配置namenode进程以warehouse001启动" class="headerlink" title="7.7 配置namenode进程以warehouse001启动"></a>7.7 配置namenode进程以warehouse001启动</h5><p>修改core-site.xml文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://warehouse001:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h5 id="7-8-配置secondary-namenode进程以warehouse001启动"><a href="#7-8-配置secondary-namenode进程以warehouse001启动" class="headerlink" title="7.8 配置secondary namenode进程以warehouse001启动"></a>7.8 配置secondary namenode进程以warehouse001启动</h5><p>修改hdfs-site.xml文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.secondary.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>warehouse001:50090<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.secondary.https-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>warehouse001:50091<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h5 id="7-9配置datanode进程以warehouse001启动"><a href="#7-9配置datanode进程以warehouse001启动" class="headerlink" title="7.9配置datanode进程以warehouse001启动"></a>7.9配置datanode进程以warehouse001启动</h5><p>[hadoop@warehouse001 hadoop]$ vi slaves                </p><p>warehouse001</p><h5 id="7-10格式化"><a href="#7-10格式化" class="headerlink" title="7.10格式化"></a>7.10格式化</h5><p>[hadoop@warehouse001 hadoop]$ sbin/start-dfs.sh<br>20/11/22 11:17:04 INFO namenode.NNStorageRetentionManager: Going to retain 1 images with txid &gt;= 0<br>20/11/22 11:17:04 INFO util.ExitUtil: Exiting with status 0<br>20/11/22 11:17:04 INFO namenode.NameNode: SHUTDOWN_MSG:<br>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>SHUTDOWN_MSG: Shutting down NameNode at warehouse001/172.23.75.57<br>**<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p><h5 id="7-11启动"><a href="#7-11启动" class="headerlink" title="7.11启动"></a>7.11启动</h5><p>[hadoop@warehouse001 sbin]$ sh start-dfs.sh<br>which: no start-dfs.sh in (/usr/java/jdk1.8.0_181/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/hadoop/.local/bin:/home/hadoop/bin)<br>20/11/22 11:29:21 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable<br>Starting namenodes on [warehouse001]<br>warehouse001: starting namenode, logging to /home/hadoop/app/hadoop-2.6.0-cdh5.16.2/logs/hadoop-hadoop-namenode-warehouse001.out<br>localhost: starting datanode, logging to /home/hadoop/app/hadoop-2.6.0-cdh5.16.2/logs/hadoop-hadoop-datanode-warehouse001.out<br>Starting secondary namenodes [warehouse001]<br>warehouse001: starting secondarynamenode, logging to /home/hadoop/app/hadoop-2.6.0-cdh5.16.2/logs/hadoop-hadoop-secondarynamenode-warehouse001.out<br>20/11/22 11:29:36 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable</p><p>[hadoop@warehouse001 hadoop]$ jps<br>13377 Jps<br>13090 NameNode<br>12098 SecondaryNameNode<br>11944 DataNode</p><p>hdfs存储来说:<br>namenode             名称节点       老大<br>secondary namenode   第二名称节点   老二  每隔1小时 把老大备份一下</p><p>datanode             数据节点       小弟</p><p>最终三个进程以warehouse001 机器名称启动 </p><p>[hadoop@warehouse001 sbin]$ sh start-dfs.sh<br>which: no start-dfs.sh in (/usr/java/jdk1.8.0_181/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/hadoop/.local/bin:/home/hadoop/bin)<br>20/11/22 11:54:41 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable<br>Starting namenodes on [warehouse001]<br>warehouse001: starting namenode, logging to /home/hadoop/app/hadoop-2.6.0-cdh5.16.2/logs/hadoop-hadoop-namenode-warehouse001.out<br>warehouse001: starting datanode, logging to /home/hadoop/app/hadoop-2.6.0-cdh5.16.2/logs/hadoop-hadoop-datanode-warehouse001.out<br>Starting secondary namenodes [warehouse001]<br>warehouse001: starting secondarynamenode, logging to /home/hadoop/app/hadoop-2.6.0-cdh5.16.2/logs/hadoop-hadoop-secondarynamenode-warehouse001.out<br>20/11/22 11:54:56 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable</p><p>打开web，云主机需要开启【安全组】</p><p><a href="http://warehouse001:50070/dfshealth.html#tab-overview">http://warehouse001:50070/dfshealth.html#tab-overview</a></p><p>Make the HDFS directories required to execute MapReduce jobs:</p><pre><code>  $ bin/hdfs dfs -mkdir /user  $ bin/hdfs dfs -mkdir /user/&lt;username&gt;</code></pre><p>8.案例<br>[hadoop@warehouse001 hadoop]$bin/hadoop jar <br>share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.0-cdh5.16.2.jar <br>grep input output ‘dfs[a-z.]+’</p><p>执行成功后</p><p>[hadoop@warehouse001 hadoop]$ bin/hdfs dfs -get output output</p><p>[hadoop@warehouse001 hadoop]$ cd output/<br>[hadoop@warehouse001 output]$ ll<br>total 4<br>-rw-r–r– 1 hadoop hadoop 301 Nov 22 14:44 part-r-00000<br>-rw-r–r– 1 hadoop hadoop   0 Nov 22 14:44 _SUCCESS<br>[hadoop@warehouse001 output]$ cat part-r-00000<br>6       dfs.audit.logger<br>4       dfs.class<br>3       dfs.logger<br>3       dfs.server.namenode.<br>2       dfs.audit.log.maxfilesize<br>2       dfs.audit.log.maxbackupindex<br>2       dfs.period<br>1       dfsmetrics.log<br>1       dfsadmin<br>1       dfs.servers<br>1       dfs.replication<br>1       dfs.namenode.secondary.https<br>1       dfs.namenode.secondary.http<br>1       dfs.log<br>1       dfs.file<br>1       dfs.namenode.http</p><p>但是namenode、datanode、checkpoint(secondarynamenode)官方默认配置如下:<br>dfs.namenode.name.dir –&gt; file://${hadoop.tmp.dir}/dfs/name<br>dfs.datanode.data.dir –&gt; file://${hadoop.tmp.dir}/dfs/data<br>dfs.namenode.checkpoint.dir –&gt; file://${hadoop.tmp.dir}/dfs/namesecondary</p><p>所以配置hadoop.tmp.dir临时目录改为/home/hadoop/tmp，<br>那么namenode、datanode、checkpoint(secondarynamenode)<br>存储也对应变更。</p><p>1.sql行转列、列转行</p><p> 我们首先先通过一个学生成绩表(下面简化了些)来形象了解下行转列</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span>  <span class="token keyword">TABLE</span> mydatabasedb<span class="token punctuation">.</span>StudentScores<span class="token punctuation">(</span>UserName <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Subject <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Score <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> mydatabasedb<span class="token punctuation">.</span>StudentScores <span class="token keyword">SELECT</span> <span class="token string">'Nick'</span><span class="token punctuation">,</span> <span class="token string">'语文'</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> mydatabasedb<span class="token punctuation">.</span>StudentScores <span class="token keyword">SELECT</span> <span class="token string">'Nick'</span><span class="token punctuation">,</span> <span class="token string">'数学'</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> mydatabasedb<span class="token punctuation">.</span>StudentScores <span class="token keyword">SELECT</span> <span class="token string">'Nick'</span><span class="token punctuation">,</span> <span class="token string">'英语'</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> mydatabasedb<span class="token punctuation">.</span>StudentScores <span class="token keyword">SELECT</span> <span class="token string">'Nick'</span><span class="token punctuation">,</span> <span class="token string">'生物'</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> mydatabasedb<span class="token punctuation">.</span>StudentScores <span class="token keyword">SELECT</span> <span class="token string">'Kent'</span><span class="token punctuation">,</span> <span class="token string">'语文'</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> mydatabasedb<span class="token punctuation">.</span>StudentScores <span class="token keyword">SELECT</span> <span class="token string">'Kent'</span><span class="token punctuation">,</span> <span class="token string">'数学'</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> mydatabasedb<span class="token punctuation">.</span>StudentScores <span class="token keyword">SELECT</span> <span class="token string">'Kent'</span><span class="token punctuation">,</span> <span class="token string">'英语'</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> mydatabasedb<span class="token punctuation">.</span>StudentScores <span class="token keyword">SELECT</span> <span class="token string">'Kent'</span><span class="token punctuation">,</span> <span class="token string">'生物'</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">;</span><span class="token keyword">select</span>  <span class="token operator">*</span> <span class="token keyword">from</span> mydatabasedb<span class="token punctuation">.</span>StudentScores<span class="token keyword">select</span> UserName<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">case</span> Subject <span class="token keyword">when</span> <span class="token string">'语文'</span> <span class="token keyword">then</span> score <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'语文'</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">case</span> Subject <span class="token keyword">when</span> <span class="token string">'数学'</span> <span class="token keyword">then</span> score <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'数学'</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">case</span> Subject <span class="token keyword">when</span> <span class="token string">'英语'</span> <span class="token keyword">then</span> score <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'英语'</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">case</span> Subject <span class="token keyword">when</span> <span class="token string">'生物'</span> <span class="token keyword">then</span> score <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'生物'</span><span class="token keyword">from</span> mydatabasedb<span class="token punctuation">.</span>StudentScores<span class="token keyword">group</span> <span class="token keyword">by</span> UserName</code></pre><p><img src="https://i.loli.net/2020/11/22/b3HoLOiN8YnzwFq.png"></p><p>列转行:</p><p><img src="https://i.loli.net/2020/11/23/UCgtDy2PNVxOz1e.png"></p><p>实现:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token string">'语文'</span> <span class="token keyword">as</span> 科目<span class="token punctuation">,</span>语文 <span class="token keyword">as</span> 分数 <span class="token keyword">from</span> mydatabasedb<span class="token punctuation">.</span>student    <span class="token keyword">union</span> <span class="token keyword">all</span>    <span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token string">'数学'</span> <span class="token keyword">as</span> 科目<span class="token punctuation">,</span>数学 <span class="token keyword">as</span> 分数 <span class="token keyword">from</span> mydatabasedb<span class="token punctuation">.</span>student    <span class="token keyword">union</span> <span class="token keyword">all</span>    <span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token string">'物理'</span> <span class="token keyword">as</span> 科目<span class="token punctuation">,</span>物理 <span class="token keyword">as</span> 分数 <span class="token keyword">from</span> mydatabasedb<span class="token punctuation">.</span>student<span class="token punctuation">)</span> <span class="token number">a</span> </code></pre><p><img src="https://i.loli.net/2020/11/23/Oy9qUF2gAQt3ez4.png"></p><p>理解：把语文列装换为分数列，本身列头没有了，使用字符来填充列头，代表本身列具备的含义。</p><p>单个示例:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token string">'语文'</span> <span class="token keyword">as</span> 科目<span class="token punctuation">,</span> 语文 <span class="token keyword">as</span> 分数 <span class="token keyword">from</span> mydatabasedb<span class="token punctuation">.</span>student</code></pre><p><img src="https://i.loli.net/2020/11/23/qAjzQyilEUvGY2h.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql语法</title>
      <link href="2018/11/05/2020-11-16-quanxu-shu-cang-zhi-mysql-yu-fa/"/>
      <url>2018/11/05/2020-11-16-quanxu-shu-cang-zhi-mysql-yu-fa/</url>
      
        <content type="html"><![CDATA[<h4 id="1-字段类型"><a href="#1-字段类型" class="headerlink" title="1.字段类型"></a>1.字段类型</h4><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型:"></a>数值类型:</h5><p>​        int    整数</p><p>​        long    长整型</p><p>​        float    单精度</p><p>​        double    双精度</p><p>​        decimal    钱</p><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串:"></a>字符串:</h5><p>​        char 字节    定长0-255长度    aaaaxxxxxx    自动补齐</p><p>​        varchar    字符串    变长0-65535字节    aaaa</p><h5 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h5><p>​        date    日期    YYYY-MM-DD</p><p>​        time    时间    HH:MM:SS</p><p>​        datetime    年月日时分秒</p><p>​        timestamp        年月日时分秒</p><h5 id="datetime和timestamp的区别"><a href="#datetime和timestamp的区别" class="headerlink" title="datetime和timestamp的区别:"></a>datetime和timestamp的区别:</h5><h6 id="datetime类型使用8个字节来表示日期和时间。"><a href="#datetime类型使用8个字节来表示日期和时间。" class="headerlink" title="datetime类型使用8个字节来表示日期和时间。"></a>datetime类型使用8个字节来表示日期和时间。</h6><p>支持的常见插入格式为：</p><ol><li>（推荐甚至强制要求必须）‘YYYY-MM-DD HH:MM:SS’或‘YYYYMMDDHHMMSS’格式的字符串表示。这种方式可以表达的范围是‘1000-01-01 00:00:00’~~‘9999-12-31 23:59:59’。</li><li>MySQL中还支持一些不严格的语法格式，任何的标点都可以用来做间隔符。情况与date类型相同，而且时间部分也可以使用任意的分隔符隔开，这与Time类型不同，Time类型只能用‘:’隔开呢。</li><li>使用now()来输入当前系统日期和时间。</li></ol><h6 id="timestamp类型使用4个字节来表示日期和时间。"><a href="#timestamp类型使用4个字节来表示日期和时间。" class="headerlink" title="timestamp类型使用4个字节来表示日期和时间。"></a>timestamp类型使用4个字节来表示日期和时间。</h6><p>支持的常见插入格式为：</p><p>二者主要区别在于取值范围。</p><ol><li><p>timestamp存储需要四个字节，它的取值范围为“1970-01-01 00:00:01” UTC ~ “2038-01-19 03:14:07” （和时区有关）</p></li><li><p>而datetime取值范围为“1000-01-01 00:00:00” ~ “9999-12-31 23:59:59”（和时区无关，怎么存入怎么返回，对程序员友好）</p><p>3、timestamp类型还有一个很大的特殊点，就是时间是根据时区来显示的。<br>例如，在东八区插入的timestamp类型为2009-09-30 14:21:25，在东七区显示时，时间部门就变成了13:21:25，在东九区显示时，时间部门就变成了15:21:25。<br>4、需要显示日期与时间，timestamp类型需要根据不同地区的时区来转换时间，但是，timestamp类型的范围太小，其最大时间为2038-01-19 11:14:07。<br>如果插入时间的比这个大，将会数据库插入0000-00-00 00:00:00。所以需要的时间范围比较大，还是选择dateTime类型比较安全。</p></li></ol><h4 id="2-sql类型"><a href="#2-sql类型" class="headerlink" title="2.sql类型"></a>2.sql类型</h4><p>ddl    数据定义语言    create drop</p><p>dml    数据操作语言    select    insert    update    delete    (增删改查)</p><p>dcl    数据控制语言    grant</p><h4 id="3-建表规范"><a href="#3-建表规范" class="headerlink" title="3.建表规范"></a>3.建表规范</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> ruozedata<span class="token punctuation">.</span>employee<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">--第一列必须为自增长字段 主键，且无业务意义  架构设计默认规则</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">--业务字段</span>age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">--业务字段</span>create_user <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">--创建者</span>create_time <span class="token keyword">timestamp</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token keyword">current_timestamp</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">--创建时间</span>update_user <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">--更新者</span>update_time <span class="token keyword">timestamp</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token keyword">current_timestamp</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">--更新时间</span><span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">--一张表只有一个主键 id，业务字段需要唯一的话，就使用唯一约束来保证</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>规范:<br>1.表名称  字段名称 不要写中文  尽量不要汉语拼音<br>2.统一风格:<br>已经存在表结构设计，风格比如是create_user;不同表的同一字段名称尽量统一,以防后面开发字段混淆.</p><h4 id="4-增删改查"><a href="#4-增删改查" class="headerlink" title="4.增删改查"></a>4.增删改查</h4><p>插入数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> ruozedata<span class="token punctuation">.</span>employee<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'quanxu'</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>查询数据:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> ruozedata<span class="token punctuation">.</span>employee <span class="token keyword">set</span> age<span class="token operator">=</span><span class="token string">'25'</span> <span class="token keyword">where</span> name <span class="token operator">=</span><span class="token string">'quanxu'</span><span class="token punctuation">;</span></code></pre><p>删除数据:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>创建唯一约束:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> ruozedata<span class="token punctuation">.</span>employee <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> employee_un <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>SQL 错误 [1062] [23000]: Duplicate entry ‘quanxu’ for key ‘employee_un’</p><p>违反唯一约束,这时就要去检查是否重复</p><h4 id="5-后面四个字段一定要加上"><a href="#5-后面四个字段一定要加上" class="headerlink" title="5.后面四个字段一定要加上"></a>5.后面四个字段一定要加上</h4><pre class=" language-sql"><code class="language-sql">create_user <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">--创建者</span>create_time <span class="token keyword">timestamp</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token keyword">current_timestamp</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">--创建时间</span>update_user <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">--更新者</span>update_time <span class="token keyword">timestamp</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token keyword">current_timestamp</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">--更新时间</span></code></pre><p>离线数仓抽数的基础</p><h4 id="6-字段注释一定要加上"><a href="#6-字段注释一定要加上" class="headerlink" title="6.字段注释一定要加上"></a>6.字段注释一定要加上</h4><p>comment ‘xxxx’</p><pre class=" language-sql"><code class="language-sql">name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'名字'</span><span class="token punctuation">,</span></code></pre><h4 id="7-其他语法"><a href="#7-其他语法" class="headerlink" title="7.其他语法"></a>7.其他语法</h4><ul><li><p>1.where(筛选)</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee <span class="token keyword">where</span> name <span class="token operator">=</span><span class="token string">'zhangsan'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee <span class="token keyword">where</span> name <span class="token operator">=</span><span class="token string">'zhangsan'</span> <span class="token operator">and</span> age<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee <span class="token keyword">where</span> age<span class="token operator">=</span><span class="token number">12</span> <span class="token operator">or</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee <span class="token keyword">where</span> age<span class="token operator">></span><span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee <span class="token keyword">where</span> age <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee <span class="token keyword">where</span> age <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>2.order by (排序)</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee <span class="token keyword">order</span> <span class="token keyword">by</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--默认正序</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">asc</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--正序</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">desc</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--倒序</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">desc</span><span class="token punctuation">,</span>name <span class="token keyword">desc</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--多个排序</span></code></pre></li><li><p>3.like(模糊匹配)</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'l%'</span>    <span class="token comment" spellcheck="true">--以l开头</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%o'</span>    <span class="token comment" spellcheck="true">--以o结尾</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%i%'</span>    <span class="token comment" spellcheck="true">--含有i</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee <span class="token keyword">where</span> name <span class="token operator">like</span> '<span class="token comment" spellcheck="true">--p%'    --第三个位为p,_表示占位符</span></code></pre></li><li><p>4.union(合并)</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">a</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">b</span>    <span class="token comment" spellcheck="true">--合并后去重</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">a</span> <span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">b</span>    <span class="token comment" spellcheck="true">--合并不去重</span></code></pre></li><li><p>5.分组语法</p><pre class=" language-sql"><code class="language-sql">sum    <span class="token comment" spellcheck="true">--求和</span>avg    <span class="token comment" spellcheck="true">--平均数</span>max    <span class="token comment" spellcheck="true">--最大值</span>min    <span class="token comment" spellcheck="true">--最小值</span>count    <span class="token comment" spellcheck="true">--计数</span><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee<span class="token punctuation">;</span><span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee <span class="token keyword">group</span> <span class="token keyword">by</span> name<span class="token punctuation">;</span><span class="token keyword">select</span>name<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> sum_age<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee<span class="token keyword">group</span> <span class="token keyword">by</span> name<span class="token keyword">having</span> sum_age <span class="token operator">></span><span class="token number">30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--having相当于过滤</span><span class="token comment" spellcheck="true">--    等同于==></span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span>name<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> sum_age<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">--子查询</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">from</span> ruozedata<span class="token punctuation">.</span>employee<span class="token keyword">group</span> <span class="token keyword">by</span> name<span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token keyword">where</span> sum_age <span class="token operator">></span><span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--能使用having尽量使用having,不能使用时再使用子查询</span></code></pre></li></ul><p>tips:</p><h5 id="spark中exists和in有什么区别"><a href="#spark中exists和in有什么区别" class="headerlink" title="spark中exists和in有什么区别?"></a>spark中exists和in有什么区别?</h5><h5 id="一、exists和in的使用方式"><a href="#一、exists和in的使用方式" class="headerlink" title="一、exists和in的使用方式"></a>一、exists和in的使用方式</h5><p>​       1、exists是对外表做loop循环，每次loop循环再对内表（子查询）进行查询，那么因为对内表的查询使用的索引（内表效率高，故可用大表），而外表有多大都需要遍历，不可避免（尽量用小表），故内表大的使用exists，可加快效率；</p><p>　　2、in是把外表和内表做hash连接，先查询内表，再把内表结果与外表匹配，对外表使用索引（外表效率高，可用大表），而内表多大都需要查询，不可避免，故外表大的使用in，可加快效率。</p><p>　　3、如果用not in ，则是内外表都全表扫描，无索引，效率低，可考虑使用not exists，也可使用A left join B on A.id=B.id where B.id is null 进行优化。</p><h5 id="二、EXISTS与IN-的用法异同"><a href="#二、EXISTS与IN-的用法异同" class="headerlink" title="二、EXISTS与IN 的用法异同"></a>二、EXISTS与IN 的用法异同</h5><p>1、IN只能返回一个字段值，但EXITS允许返回多个字段。<br>2、exists是对外表做loop循环，每次loop循环再对内表做查询；IN是将外表和内表做hash连接，相当于多个or条件叠加。exists需要查询数据库，in是内存里遍历比较。</p><h5 id="2、EXISTS与IN-的效率比较"><a href="#2、EXISTS与IN-的效率比较" class="headerlink" title="2、EXISTS与IN 的效率比较"></a>2、EXISTS与IN 的效率比较</h5><p>对于表A，表B：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--用法1</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">a</span> <span class="token keyword">where</span> <span class="token number">cc</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">cc</span> <span class="token keyword">from</span> <span class="token number">b</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--用法2</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">a</span> <span class="token keyword">where</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">b</span> <span class="token keyword">where</span> <span class="token number">cc</span><span class="token operator">=</span><span class="token number">a</span><span class="token punctuation">.</span><span class="token number">cc</span><span class="token punctuation">)</span></code></pre><p>1、若表A/B大小相当，那运行效率差异不大；<br>2、若表A（外表）更大，则用法1即in()效率更高；<br>3、若表B（内表）更大，则用法2即exists()效率更高。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql部署</title>
      <link href="2018/11/03/2020-11-14-quanxu-shu-cang-zhi-mysql-bu-shu/"/>
      <url>2018/11/03/2020-11-14-quanxu-shu-cang-zhi-mysql-bu-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h3><p><a href="https://www.bilibili.com/video/BV12b411N7Lv">https://www.bilibili.com/video/BV12b411N7Lv</a><br><a href="https://www.bilibili.com/video/BV1Tt411p7de">https://www.bilibili.com/video/BV1Tt411p7de</a></p><p><a href="https://github.com/Hackeruncle/MySQL">https://github.com/Hackeruncle/MySQL</a><br><a href="https://github.com/Hackeruncle/MySQL/blob/master/MySQL%205.7.11%20Install.txt">https://github.com/Hackeruncle/MySQL/blob/master/MySQL%205.7.11%20Install.txt</a></p><h4 id="1-jdk安装"><a href="#1-jdk安装" class="headerlink" title="1.jdk安装"></a>1.jdk安装</h4><p>mkdir -p /usr/java</p><p>tar  -zxvf jdk-8u181-linux-x64.tar.gz -C  /usr/java</p><p>[root@warehouse001 java]# ll<br>total 350520<br>drwxr-xr-x 7   10  143      4096 Jul  7  2018 jdk1.8.0_181【注意赋所属组的权限】</p><p>chmod 775 jdk1.8.0_181</p><p>chown -R root:root jdk1.8.0_181</p><p>vi /etc/profile</p><p>追加:</p><p>export JAVA_HOME=/usr/java/jdk1.8.0_181<br>export PATH=$JAVA_HOME/bin:$PATH</p><h4 id="2-mysql的安装"><a href="#2-mysql的安装" class="headerlink" title="2.mysql的安装"></a>2.mysql的安装</h4><p>要注意文档中的命令是哪个用户,哪个目录执行</p><p>tar -zxvf mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz -C /usr/local/</p><p>mv mysql-5.7.11-linux-glibc2.5-x86_64 mysql</p><h5 id="创建my-cnf-见文件"><a href="#创建my-cnf-见文件" class="headerlink" title="创建my.cnf(见文件)"></a>创建my.cnf(见文件)</h5><p>vi /etc/my.cnf</p><pre class=" language-shell"><code class="language-shell">[client]port            = 3306socket          = /usr/local/mysql/data/mysql.sockdefault-character-set=utf8mb4[mysqld]port            = 3306socket          = /usr/local/mysql/data/mysql.sockskip-slave-startskip-external-lockingkey_buffer_size = 256Msort_buffer_size = 2Mread_buffer_size = 2Mread_rnd_buffer_size = 4Mquery_cache_size= 32Mmax_allowed_packet = 16Mmyisam_sort_buffer_size=128Mtmp_table_size=32Mtable_open_cache = 512thread_cache_size = 8wait_timeout = 86400interactive_timeout = 86400max_connections = 600# Try number of CPU's*2 for thread_concurrency#thread_concurrency = 32 #isolation level and default engine default-storage-engine = INNODBtransaction-isolation = READ-COMMITTEDserver-id  = 1739basedir     = /usr/local/mysqldatadir     = /usr/local/mysql/datapid-file     = /usr/local/mysql/data/hostname.pid#open performance schemalog-warningssysdate-is-nowbinlog_format = ROWlog_bin_trust_function_creators=1log-error  = /usr/local/mysql/data/hostname.errlog-bin = /usr/local/mysql/arch/mysql-binexpire_logs_days = 7innodb_write_io_threads=16relay-log  = /usr/local/mysql/relay_log/relay-logrelay-log-index = /usr/local/mysql/relay_log/relay-log.indexrelay_log_info_file= /usr/local/mysql/relay_log/relay-log.infolog_slave_updates=1gtid_mode=OFFenforce_gtid_consistency=OFF# slaveslave-parallel-type=LOGICAL_CLOCKslave-parallel-workers=4master_info_repository=TABLErelay_log_info_repository=TABLErelay_log_recovery=ON#other logs#general_log =1#general_log_file  = /usr/local/mysql/data/general_log.err#slow_query_log=1#slow_query_log_file=/usr/local/mysql/data/slow_log.err#for replication slavesync_binlog = 500#for innodb options innodb_data_home_dir = /usr/local/mysql/data/innodb_data_file_path = ibdata1:1G;ibdata2:1G:autoextendinnodb_log_group_home_dir = /usr/local/mysql/archinnodb_log_files_in_group = 4innodb_log_file_size = 1Ginnodb_log_buffer_size = 200M#根据生产需要，调整pool size innodb_buffer_pool_size = 2G#innodb_additional_mem_pool_size = 50M #deprecated in 5.6tmpdir = /usr/local/mysql/tmpinnodb_lock_wait_timeout = 1000#innodb_thread_concurrency = 0innodb_flush_log_at_trx_commit = 2innodb_locks_unsafe_for_binlog=1#innodb io features: add for mysql5.5.8performance_schemainnodb_read_io_threads=4innodb-write-io-threads=4innodb-io-capacity=200#purge threads change default(0) to 1 for purgeinnodb_purge_threads=1innodb_use_native_aio=on#case-sensitive file names and separate tablespaceinnodb_file_per_table = 1lower_case_table_names=1[mysqldump]quickmax_allowed_packet = 128M[mysql]no-auto-rehashdefault-character-set=utf8mb4[mysqlhotcopy]interactive-timeout[myisamchk]key_buffer_size = 256Msort_buffer_size = 256Mread_buffer = 2Mwrite_buffer = 2M</code></pre><p>#根据生产需要，调整pool size </p><p>innodb_buffer_pool_size = 2G</p><p>#innodb_additional_mem_pool_size = 50M #deprecated in 5.6</p><p>tmpdir = /usr/local/mysql/tmp</p><h4 id="3-创建用户组及用户"><a href="#3-创建用户组及用户" class="headerlink" title="3.创建用户组及用户"></a>3.创建用户组及用户</h4><p>groupadd -g 101 dba</p><p>useradd -u 514 -g dba -G root -d /usr/local/mysql mysqladmin</p><p>id mysqladmin</p><p>–uid=514(mysqladmin) gid=101(dba) groups=101(dba),0(root)</p><p>4.copy 环境变量配置文件至mysqladmin用户的home目录中,为了以下步骤配置个人环境变量</p><p>cp /etc/skel/.* /usr/local/mysql  ###important</p><h4 id="5-配置环境变量"><a href="#5-配置环境变量" class="headerlink" title="5.配置环境变量"></a>5.配置环境变量</h4><pre class=" language-shell"><code class="language-shell">[root@hadoop39 local]# vi mysql/.bash_profile# .bash_profile# Get the aliases and functionsif [ -f ~/.bashrc ]; then        . ~/.bashrcfi# User specific environment and startup programsexport MYSQL_BASE=/usr/local/mysqlexport PATH=$&#123;MYSQL_BASE&#125;/bin:$PATHunset USERNAME#stty erase ^Hset umask to 022umask 022PS1=`uname -n`":"'$USER'":"'$PWD'":>"; export PS1</code></pre><h4 id="6-赋权限和用户组，切换用户mysqladmin，安装"><a href="#6-赋权限和用户组，切换用户mysqladmin，安装" class="headerlink" title="6.赋权限和用户组，切换用户mysqladmin，安装"></a>6.赋权限和用户组，切换用户mysqladmin，安装</h4><pre class=" language-shell"><code class="language-shell">[root@hadoop39 local]# chown  mysqladmin:dba /etc/my.cnf [root@hadoop39 local]# chmod  640 /etc/my.cnf  [root@hadoop39 local]# chown -R mysqladmin:dba /usr/local/mysql[root@hadoop39 local]# chmod -R 755 /usr/local/mysql </code></pre><h4 id="7-配置服务及开机自启动"><a href="#7-配置服务及开机自启动" class="headerlink" title="7.配置服务及开机自启动"></a>7.配置服务及开机自启动</h4><pre class=" language-shell"><code class="language-shell">[root@hadoop39 local]# cd /usr/local/mysql#将服务文件拷贝到init.d下，并重命名为mysql[root@hadoop39 mysql]# cp support-files/mysql.server /etc/rc.d/init.d/mysql #赋予可执行权限[root@hadoop39 mysql]# chmod +x /etc/rc.d/init.d/mysql#删除服务[root@hadoop39 mysql]# chkconfig --del mysql#添加服务[root@hadoop39 mysql]# chkconfig --add mysql[root@hadoop39 mysql]# chkconfig --level 345 mysql on</code></pre><p>这步并不能真正实现开机自启动</p><p>这步需要测试</p><pre class=" language-shell"><code class="language-shell">[root@sht-sgmhadoopnn-01 mysql]# vi /etc/rc.local#!/bin/sh## This script will be executed *after* all the other init scripts.# You can put your own initialization stuff in here if you don't# want to do the full Sys V style init stuff.touch /var/lock/subsys/localsu - mysqladmin -c "/etc/init.d/mysql start --federated"</code></pre><h4 id="8-安装libaio及安装mysql的初始db"><a href="#8-安装libaio及安装mysql的初始db" class="headerlink" title="8.安装libaio及安装mysql的初始db"></a>8.安装libaio及安装mysql的初始db</h4><pre class=" language-shell"><code class="language-shell">[root@hadoop39 mysql]# yum -y install libaio[root@hadoop39 mysql]# sudo su - mysqladminhadoop39.ruoze:mysqladmin:/usr/local/mysql:> bin/mysqld \--defaults-file=/etc/my.cnf \--user=mysqladmin \--basedir=/usr/local/mysql/ \--datadir=/usr/local/mysql/data/ \--initialize</code></pre><p>在初始化时如果加上 –initial-insecure，则会创建空密码的 root@localhost 账号，否则会创建带密码的 root@localhost 账号，密码直接写在 log-error 日志文件中<br>（在5.6版本中是放在 ~/.mysql_secret 文件里，更加隐蔽，不熟悉的话可能会无所适从）</p><h4 id="9-查看临时密码"><a href="#9-查看临时密码" class="headerlink" title="9.查看临时密码"></a>9.查看临时密码</h4><p>warehouse001:mysqladmin:/usr/local/mysql/data:&gt;cat hostname.err |grep password</p><p>2020-11-15T09:59:50.686247Z 1 [Note] A temporary password is generated for root@localhost: oifbVz!YZ2.D</p><h4 id="10-启动"><a href="#10-启动" class="headerlink" title="10.启动"></a>10.启动</h4><p>/usr/local/mysql/bin/mysqld_safe –defaults-file=/etc/my.cnf &amp;</p><h4 id="11-登录及修改用户密码"><a href="#11-登录及修改用户密码" class="headerlink" title="11.登录及修改用户密码"></a>11.登录及修改用户密码</h4><pre class=" language-shell"><code class="language-shell">hadoop39.ruoze:mysqladmin:/usr/local/mysql/data:>mysql -uroot -p'kFCqrXeh2y(0'mysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 2Server version: 5.7.11-logCopyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql> alter user root@localhost identified by 'ruozedata';Query OK, 0 rows affected (0.05 sec)mysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'ruozedata' ;Query OK, 0 rows affected, 1 warning (0.02 sec)mysql> flush privileges;Query OK, 0 rows affected (0.00 sec)mysql> exit;Bye</code></pre><h4 id="12-重启"><a href="#12-重启" class="headerlink" title="12.重启"></a>12.重启</h4><pre class=" language-shell"><code class="language-shell">hadoop39.ruoze:mysqladmin:/usr/local/mysql:> service mysql restarthadoop39.ruoze:mysqladmin:/usr/local/mysql/data:>mysql -uroot -pruozedatamysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 2Server version: 5.7.11-log MySQL Community Server (GPL)Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql> </code></pre><h3 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3.常用命令"></a>3.常用命令</h3><p>create database ruozedata;<br>grant all privileges on ruozedata.* to quanxu@’%’ identified by ‘ruozedata’;<br>flush privileges;</p><p>【注意】：对于mysql的用户操作，比如权限相关的 ，最后一步必须执行刷新权限。<br>          %代表了 任意的客户端的IP地址 都被允许使用quanxu用户来远程访问</p><p>grant all privileges on ruozedata.* to quanxu@’16.2.3.2’ identified by ‘ruozedata’;</p><p>我已经赋予%权限，在访问的时候为什么还抛错权限  访问错误<br>grant all privileges on ruozedata.* to quanxu@’客户端机器的IP’ identified by ‘ruozedata’;</p><p>grant all privileges on ruozedata.* to quanxu@’192.168.0.%’ identified by ‘ruozedata’;</p><p>139.224.129这个网段的所有ip都允许有权限去访问</p><p>mysql&gt; show databases;<br>mysql&gt; use mysql;<br>mysql&gt; show tables;</p><p>查看表结构<br>mysql&gt; desc db;<br>mysql&gt; show create table DB;<br>mysql&gt; select User,Host,db,Select_priv,Delete_priv from db;</p><p>杀会话<br>mysql&gt; show processlist;<br>mysql&gt; kill 7;</p><p>报错:DBeaver连接时connect time out</p><p>原因:云主机安全组没有加3306端口,阿里云需要配置</p><p><img src="C:\Users\10090\AppData\Roaming\Typora\typora-user-images\image-20201116175652491.png" alt="image-20201116175652491"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
